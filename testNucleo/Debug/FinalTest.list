
FinalTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080052f4  080052f4  000152f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  08005448  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000384  20000074  080054b8  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003f8  080054b8  000203f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014a39  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028dc  00000000  00000000  00034add  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001740  00000000  00000000  000373c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001608  00000000  00000000  00038b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002278a  00000000  00000000  0003a108  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f78c  00000000  00000000  0005c892  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000db15b  00000000  00000000  0006c01e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00147179  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006560  00000000  00000000  001471f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	080052dc 	.word	0x080052dc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	080052dc 	.word	0x080052dc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000540:	f023 0218 	bic.w	r2, r3, #24
 8000544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4313      	orrs	r3, r2
 800054c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fd55 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f8ed 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fa49 	bl	8000a34 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a2:	f000 f9d3 	bl	800094c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80005a6:	f000 fa1d 	bl	80009e4 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80005aa:	f000 f98f 	bl	80008cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  buf[0] = 0xD0; // "id" register
 80005ae:	23d0      	movs	r3, #208	; 0xd0
 80005b0:	703b      	strb	r3, [r7, #0]
  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, buf, 1, HAL_MAX_DELAY); //send 1 byte
 80005b2:	463a      	mov	r2, r7
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	21ec      	movs	r1, #236	; 0xec
 80005be:	4866      	ldr	r0, [pc, #408]	; (8000758 <main+0x1c8>)
 80005c0:	f001 f8fe 	bl	80017c0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, BME_ADDR, buf, 1, HAL_MAX_DELAY); //receive 1 byte
 80005c4:	463a      	mov	r2, r7
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2301      	movs	r3, #1
 80005ce:	21ec      	movs	r1, #236	; 0xec
 80005d0:	4861      	ldr	r0, [pc, #388]	; (8000758 <main+0x1c8>)
 80005d2:	f001 f9e9 	bl	80019a8 <HAL_I2C_Master_Receive>
  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005d6:	463b      	mov	r3, r7
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fdd1 	bl	8000180 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4639      	mov	r1, r7
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	485c      	ldr	r0, [pc, #368]	; (800075c <main+0x1cc>)
 80005ea:	f003 fcbb 	bl	8003f64 <HAL_UART_Transmit>

  if(buf[0] != 0x60){ // if the device id does not match expected
 80005ee:	783b      	ldrb	r3, [r7, #0]
 80005f0:	2b60      	cmp	r3, #96	; 0x60
 80005f2:	d001      	beq.n	80005f8 <main+0x68>
  	  Error_Handler();
 80005f4:	f000 faa4 	bl	8000b40 <Error_Handler>
  }

  buf[0] = 0xF4; // "ctrl_meas" register
 80005f8:	23f4      	movs	r3, #244	; 0xf4
 80005fa:	703b      	strb	r3, [r7, #0]
  buf[1] = 0b001 << 5 | 0b11; // oversampling = 1 for temperature, normal mode
 80005fc:	2323      	movs	r3, #35	; 0x23
 80005fe:	707b      	strb	r3, [r7, #1]
  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, buf, 2, HAL_MAX_DELAY); //send 2 bytes
 8000600:	463a      	mov	r2, r7
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2302      	movs	r3, #2
 800060a:	21ec      	movs	r1, #236	; 0xec
 800060c:	4852      	ldr	r0, [pc, #328]	; (8000758 <main+0x1c8>)
 800060e:	f001 f8d7 	bl	80017c0 <HAL_I2C_Master_Transmit>

  buf[0] = 0xF5; // "config" register
 8000612:	23f5      	movs	r3, #245	; 0xf5
 8000614:	703b      	strb	r3, [r7, #0]
  buf[1] = 0b100 << 5; // 1 measure every 500ms
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	707b      	strb	r3, [r7, #1]
  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, buf, 2, HAL_MAX_DELAY); //send 2 bytes
 800061a:	463a      	mov	r2, r7
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2302      	movs	r3, #2
 8000624:	21ec      	movs	r1, #236	; 0xec
 8000626:	484c      	ldr	r0, [pc, #304]	; (8000758 <main+0x1c8>)
 8000628:	f001 f8ca 	bl	80017c0 <HAL_I2C_Master_Transmit>

  buf[0] = 0x88; // "dig_Tx" registers
 800062c:	2388      	movs	r3, #136	; 0x88
 800062e:	703b      	strb	r3, [r7, #0]
  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, buf, 1, HAL_MAX_DELAY); //send 1 bytes
 8000630:	463a      	mov	r2, r7
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	21ec      	movs	r1, #236	; 0xec
 800063c:	4846      	ldr	r0, [pc, #280]	; (8000758 <main+0x1c8>)
 800063e:	f001 f8bf 	bl	80017c0 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(&hi2c1, BME_ADDR, buf, 6, HAL_MAX_DELAY); //receive 6 bytes
 8000642:	463a      	mov	r2, r7
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2306      	movs	r3, #6
 800064c:	21ec      	movs	r1, #236	; 0xec
 800064e:	4842      	ldr	r0, [pc, #264]	; (8000758 <main+0x1c8>)
 8000650:	f001 f9aa 	bl	80019a8 <HAL_I2C_Master_Receive>
  dig_T1 = buf[0] | (uint16_t)buf[1] << 8;
 8000654:	783b      	ldrb	r3, [r7, #0]
 8000656:	b21a      	sxth	r2, r3
 8000658:	787b      	ldrb	r3, [r7, #1]
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	b21b      	sxth	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b21b      	sxth	r3, r3
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <main+0x1d0>)
 8000666:	801a      	strh	r2, [r3, #0]
  dig_T2 = buf[2] | (uint16_t)buf[3] << 8;
 8000668:	78bb      	ldrb	r3, [r7, #2]
 800066a:	b21a      	sxth	r2, r3
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21b      	sxth	r3, r3
 8000672:	4313      	orrs	r3, r2
 8000674:	b21a      	sxth	r2, r3
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <main+0x1d4>)
 8000678:	801a      	strh	r2, [r3, #0]
  dig_T3 = buf[4] | (uint16_t)buf[5] << 8;
 800067a:	793b      	ldrb	r3, [r7, #4]
 800067c:	b21a      	sxth	r2, r3
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	b21b      	sxth	r3, r3
 8000684:	4313      	orrs	r3, r2
 8000686:	b21a      	sxth	r2, r3
 8000688:	4b37      	ldr	r3, [pc, #220]	; (8000768 <main+0x1d8>)
 800068a:	801a      	strh	r2, [r3, #0]

  strcpy((char*)bufUart, "INIT COMPLETED\r\n");
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4a36      	ldr	r2, [pc, #216]	; (800076c <main+0x1dc>)
 8000692:	461c      	mov	r4, r3
 8000694:	4615      	mov	r5, r2
 8000696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069a:	682b      	ldr	r3, [r5, #0]
 800069c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, bufUart, strlen((char*)bufUart), HAL_MAX_DELAY);
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fd6c 	bl	8000180 <strlen>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	f107 010c 	add.w	r1, r7, #12
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	4829      	ldr	r0, [pc, #164]	; (800075c <main+0x1cc>)
 80006b6:	f003 fc55 	bl	8003f64 <HAL_UART_Transmit>
  {

	  //HAL_UART_Transmit(&huart1, "UnTourDePlus\r\n", 16, 50);
	  //HAL_UART_Transmit(&huart1, buf, 11, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  HAL_Delay(2000);
 80006ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006be:	f000 fd47 	bl	8001150 <HAL_Delay>

	  buf[0] = 0xFA; // temperature MSB register
 80006c2:	23fa      	movs	r3, #250	; 0xfa
 80006c4:	703b      	strb	r3, [r7, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, buf, 1, HAL_MAX_DELAY); // send 1 byte
 80006c6:	463a      	mov	r2, r7
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	21ec      	movs	r1, #236	; 0xec
 80006d2:	4821      	ldr	r0, [pc, #132]	; (8000758 <main+0x1c8>)
 80006d4:	f001 f874 	bl	80017c0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, BME_ADDR, buf, 3, HAL_MAX_DELAY); // receive 3 bytes
 80006d8:	463a      	mov	r2, r7
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2303      	movs	r3, #3
 80006e2:	21ec      	movs	r1, #236	; 0xec
 80006e4:	481c      	ldr	r0, [pc, #112]	; (8000758 <main+0x1c8>)
 80006e6:	f001 f95f 	bl	80019a8 <HAL_I2C_Master_Receive>

	  adc_T = (int32_t)buf[0] << 12 | (int32_t)buf[1] << 4 | buf[2] >> 4;
 80006ea:	783b      	ldrb	r3, [r7, #0]
 80006ec:	031a      	lsls	r2, r3, #12
 80006ee:	787b      	ldrb	r3, [r7, #1]
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4313      	orrs	r3, r2
 80006f4:	78ba      	ldrb	r2, [r7, #2]
 80006f6:	0912      	lsrs	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	4313      	orrs	r3, r2
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
	  temperature = BME280_compensate_T(adc_T);
 80006fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000700:	f000 f9e0 	bl	8000ac4 <BME280_compensate_T>
 8000704:	6238      	str	r0, [r7, #32]
	  sprintf(bufUart, "%ld\r\n", temperature);
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	6a3a      	ldr	r2, [r7, #32]
 800070c:	4918      	ldr	r1, [pc, #96]	; (8000770 <main+0x1e0>)
 800070e:	4618      	mov	r0, r3
 8000710:	f004 f9de 	bl	8004ad0 <siprintf>
	  HAL_UART_Transmit(&huart1, bufUart, strlen((char*)bufUart), HAL_MAX_DELAY);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd31 	bl	8000180 <strlen>
 800071e:	4603      	mov	r3, r0
 8000720:	b29a      	uxth	r2, r3
 8000722:	f107 010c 	add.w	r1, r7, #12
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <main+0x1cc>)
 800072c:	f003 fc1a 	bl	8003f64 <HAL_UART_Transmit>


	  if(temperature < 2000) { // if T < 20°C
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000736:	da05      	bge.n	8000744 <main+0x1b4>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2120      	movs	r1, #32
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <main+0x1e4>)
 800073e:	f000 ff7d 	bl	800163c <HAL_GPIO_WritePin>
 8000742:	e004      	b.n	800074e <main+0x1be>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2120      	movs	r1, #32
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <main+0x1e4>)
 800074a:	f000 ff77 	bl	800163c <HAL_GPIO_WritePin>
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800074e:	2101      	movs	r1, #1
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <main+0x1e4>)
 8000752:	f000 ff8b 	bl	800166c <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8000756:	e7b0      	b.n	80006ba <main+0x12a>
 8000758:	200000a4 	.word	0x200000a4
 800075c:	200000f0 	.word	0x200000f0
 8000760:	20000090 	.word	0x20000090
 8000764:	20000092 	.word	0x20000092
 8000768:	20000094 	.word	0x20000094
 800076c:	080052f4 	.word	0x080052f4
 8000770:	08005308 	.word	0x08005308
 8000774:	48000400 	.word	0x48000400

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0ae      	sub	sp, #184	; 0xb8
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000782:	2248      	movs	r2, #72	; 0x48
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f004 f99a 	bl	8004ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2250      	movs	r2, #80	; 0x50
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 f98a 	bl	8004ac0 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007ba:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80007bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	f023 0303 	bic.w	r3, r3, #3
 80007c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d0:	f001 fd3c 	bl	800224c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff feab 	bl	8000530 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007da:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <SystemClock_Config+0x150>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007e2:	4a39      	ldr	r2, [pc, #228]	; (80008c8 <SystemClock_Config+0x150>)
 80007e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <SystemClock_Config+0x150>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007f6:	2327      	movs	r3, #39	; 0x27
 80007f8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000808:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080a:	2301      	movs	r3, #1
 800080c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800081c:	2360      	movs	r3, #96	; 0x60
 800081e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800082c:	4618      	mov	r0, r3
 800082e:	f002 f8bf 	bl	80029b0 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000838:	f000 f982 	bl	8000b40 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800083c:	236f      	movs	r3, #111	; 0x6f
 800083e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000840:	2302      	movs	r3, #2
 8000842:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000858:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f002 fc3a 	bl	80030d8 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800086a:	f000 f969 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800086e:	f242 1305 	movw	r3, #8453	; 0x2105
 8000872:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000874:	2318      	movs	r3, #24
 8000876:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800087c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800087e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000882:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000884:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000888:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800088a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800088e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000894:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800089a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80008a0:	2300      	movs	r3, #0
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 f85e 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x142>
  {
    Error_Handler();
 80008b6:	f000 f943 	bl	8000b40 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008ba:	f003 f9cc 	bl	8003c56 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008be:	bf00      	nop
 80008c0:	37b8      	adds	r7, #184	; 0xb8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	58000400 	.word	0x58000400

080008cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_I2C1_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_I2C1_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_I2C1_Init+0x74>)
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_I2C1_Init+0x7c>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_I2C1_Init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_I2C1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <MX_I2C1_Init+0x74>)
 8000908:	f000 feca 	bl	80016a0 <HAL_I2C_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000912:	f000 f915 	bl	8000b40 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_I2C1_Init+0x74>)
 800091a:	f001 fb1b 	bl	8001f54 <HAL_I2CEx_ConfigAnalogFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000924:	f000 f90c 	bl	8000b40 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_I2C1_Init+0x74>)
 800092c:	f001 fb5d 	bl	8001fea <HAL_I2CEx_ConfigDigitalFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 f903 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000a4 	.word	0x200000a4
 8000944:	40005400 	.word	0x40005400
 8000948:	00707cbb 	.word	0x00707cbb

0800094c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_USART1_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000996:	f003 fa95 	bl	8003ec4 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f8ce 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009a8:	f003 ff23 	bl	80047f2 <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f8c5 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009ba:	f003 ff58 	bl	800486e <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 f8bc 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009ca:	f003 fed9 	bl	8004780 <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f8b4 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000f0 	.word	0x200000f0
 80009e0:	40013800 	.word	0x40013800

080009e4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USB_PCD_Init+0x48>)
 80009ea:	4a11      	ldr	r2, [pc, #68]	; (8000a30 <MX_USB_PCD_Init+0x4c>)
 80009ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USB_PCD_Init+0x48>)
 80009f0:	2208      	movs	r2, #8
 80009f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_USB_PCD_Init+0x48>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USB_PCD_Init+0x48>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_USB_PCD_Init+0x48>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USB_PCD_Init+0x48>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_USB_PCD_Init+0x48>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USB_PCD_Init+0x48>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_USB_PCD_Init+0x48>)
 8000a1a:	f001 fb32 	bl	8002082 <HAL_PCD_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a24:	f000 f88c 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000017c 	.word	0x2000017c
 8000a30:	40006800 	.word	0x40006800

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f7ff fd87 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff fd84 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff fd81 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f7ff fd7e 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2123      	movs	r1, #35	; 0x23
 8000a64:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <MX_GPIO_Init+0x84>)
 8000a66:	f000 fde9 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4810      	ldr	r0, [pc, #64]	; (8000abc <MX_GPIO_Init+0x88>)
 8000a7c:	f000 fc6e 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a80:	2323      	movs	r3, #35	; 0x23
 8000a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <MX_GPIO_Init+0x84>)
 8000a96:	f000 fc61 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_GPIO_Init+0x8c>)
 8000aac:	f000 fc56 	bl	800135c <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	48000c00 	.word	0x48000c00

08000ac4 <BME280_compensate_T>:

/* USER CODE BEGIN 4 */
// From BME280 datasheet
int32_t BME280_compensate_T(int32_t adc_T){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T, t_fine;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2))>>11;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	10da      	asrs	r2, r3, #3
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <BME280_compensate_T+0x70>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <BME280_compensate_T+0x74>)
 8000ada:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	12db      	asrs	r3, r3, #11
 8000ae4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) -  ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	111b      	asrs	r3, r3, #4
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <BME280_compensate_T+0x70>)
 8000aec:	8812      	ldrh	r2, [r2, #0]
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	1112      	asrs	r2, r2, #4
 8000af4:	490f      	ldr	r1, [pc, #60]	; (8000b34 <BME280_compensate_T+0x70>)
 8000af6:	8809      	ldrh	r1, [r1, #0]
 8000af8:	1a52      	subs	r2, r2, r1
 8000afa:	fb02 f303 	mul.w	r3, r2, r3
 8000afe:	131b      	asrs	r3, r3, #12
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <BME280_compensate_T+0x78>)
 8000b02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b06:	fb02 f303 	mul.w	r3, r2, r3
 8000b0a:	139b      	asrs	r3, r3, #14
 8000b0c:	613b      	str	r3, [r7, #16]
	t_fine = var1+var2;
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
	T = (t_fine *5 + 128) >> 8;
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3380      	adds	r3, #128	; 0x80
 8000b20:	121b      	asrs	r3, r3, #8
 8000b22:	60bb      	str	r3, [r7, #8]
	return T;
 8000b24:	68bb      	ldr	r3, [r7, #8]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000090 	.word	0x20000090
 8000b38:	20000092 	.word	0x20000092
 8000b3c:	20000094 	.word	0x20000094

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Turn on Red LED
 8000b44:	2201      	movs	r2, #1
 8000b46:	2102      	movs	r1, #2
 8000b48:	4801      	ldr	r0, [pc, #4]	; (8000b50 <Error_Handler+0x10>)
 8000b4a:	f000 fd77 	bl	800163c <HAL_GPIO_WritePin>
	while(1);
 8000b4e:	e7fe      	b.n	8000b4e <Error_Handler+0xe>
 8000b50:	48000400 	.word	0x48000400

08000b54 <LL_AHB2_GRP1_EnableClock>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b78:	68fb      	ldr	r3, [r7, #12]
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_I2C_MspInit+0x5c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d117      	bne.n	8000c4a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff ff9a 	bl	8000b54 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c26:	2312      	movs	r3, #18
 8000c28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c32:	2304      	movs	r3, #4
 8000c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <HAL_I2C_MspInit+0x60>)
 8000c3e:	f000 fb8d 	bl	800135c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c42:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000c46:	f7ff ff9e 	bl	8000b86 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005400 	.word	0x40005400
 8000c58:	48000400 	.word	0x48000400

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_UART_MspInit+0x58>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d116      	bne.n	8000cac <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c82:	f7ff ff99 	bl	8000bb8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff ff64 	bl	8000b54 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c8c:	23c0      	movs	r3, #192	; 0xc0
 8000c8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <HAL_UART_MspInit+0x5c>)
 8000ca8:	f000 fb58 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	48000400 	.word	0x48000400

08000cbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_PCD_MspInit+0x5c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d118      	bne.n	8000d10 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff38 	bl	8000b54 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ce4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ce8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f000 fb2a 	bl	800135c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d08:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000d0c:	f7ff ff3b 	bl	8000b86 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40006800 	.word	0x40006800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f9c2 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f003 fe60 	bl	8004a6c <__errno>
 8000dac:	4602      	mov	r2, r0
 8000dae:	230c      	movs	r3, #12
 8000db0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20030000 	.word	0x20030000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000098 	.word	0x20000098
 8000de0:	200003f8 	.word	0x200003f8

08000de4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <SystemInit+0xa0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <SystemInit+0xa0>)
 8000df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df4:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <SystemInit+0xa0>)
 8000df6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e12:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e16:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <SystemInit+0xa4>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e34:	f023 0305 	bic.w	r3, r3, #5
 8000e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <SystemInit+0xa8>)
 8000e56:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <SystemInit+0xa8>)
 8000e5e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	faf6fefb 	.word	0xfaf6fefb
 8000e8c:	22041000 	.word	0x22041000

08000e90 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	4a47      	ldr	r2, [pc, #284]	; (8000fc0 <SystemCoreClockUpdate+0x130>)
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b0c      	cmp	r3, #12
 8000eb6:	d867      	bhi.n	8000f88 <SystemCoreClockUpdate+0xf8>
 8000eb8:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <SystemCoreClockUpdate+0x30>)
 8000eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebe:	bf00      	nop
 8000ec0:	08000ef5 	.word	0x08000ef5
 8000ec4:	08000f89 	.word	0x08000f89
 8000ec8:	08000f89 	.word	0x08000f89
 8000ecc:	08000f89 	.word	0x08000f89
 8000ed0:	08000efd 	.word	0x08000efd
 8000ed4:	08000f89 	.word	0x08000f89
 8000ed8:	08000f89 	.word	0x08000f89
 8000edc:	08000f89 	.word	0x08000f89
 8000ee0:	08000f05 	.word	0x08000f05
 8000ee4:	08000f89 	.word	0x08000f89
 8000ee8:	08000f89 	.word	0x08000f89
 8000eec:	08000f89 	.word	0x08000f89
 8000ef0:	08000f0d 	.word	0x08000f0d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000ef4:	4a33      	ldr	r2, [pc, #204]	; (8000fc4 <SystemCoreClockUpdate+0x134>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	6013      	str	r3, [r2, #0]
      break;
 8000efa:	e049      	b.n	8000f90 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000efc:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <SystemCoreClockUpdate+0x134>)
 8000efe:	4a32      	ldr	r2, [pc, #200]	; (8000fc8 <SystemCoreClockUpdate+0x138>)
 8000f00:	601a      	str	r2, [r3, #0]
      break;
 8000f02:	e045      	b.n	8000f90 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f04:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <SystemCoreClockUpdate+0x134>)
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <SystemCoreClockUpdate+0x13c>)
 8000f08:	601a      	str	r2, [r3, #0]
      break;
 8000f0a:	e041      	b.n	8000f90 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	3301      	adds	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d105      	bne.n	8000f3a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000f2e:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <SystemCoreClockUpdate+0x138>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	e00d      	b.n	8000f56 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d105      	bne.n	8000f4c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000f40:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <SystemCoreClockUpdate+0x13c>)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e004      	b.n	8000f56 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0f5b      	lsrs	r3, r3, #29
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	3301      	adds	r3, #1
 8000f78:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <SystemCoreClockUpdate+0x134>)
 8000f84:	6013      	str	r3, [r2, #0]
      break;
 8000f86:	e003      	b.n	8000f90 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000f88:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <SystemCoreClockUpdate+0x134>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6013      	str	r3, [r2, #0]
      break;
 8000f8e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <SystemCoreClockUpdate+0x140>)
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <SystemCoreClockUpdate+0x134>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <SystemCoreClockUpdate+0x134>)
 8000fb0:	6013      	str	r3, [r2, #0]

}
 8000fb2:	bf00      	nop
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	080053ac 	.word	0x080053ac
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	00f42400 	.word	0x00f42400
 8000fcc:	01e84800 	.word	0x01e84800
 8000fd0:	0800534c 	.word	0x0800534c

08000fd4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000fd4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd8:	3304      	adds	r3, #4

08000fda <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fda:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fdc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000fde:	d3f9      	bcc.n	8000fd4 <CopyDataInit>
  bx lr
 8000fe0:	4770      	bx	lr

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000fe2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000fe4:	3004      	adds	r0, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000fe6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>
  bx lr
 8000fea:	4770      	bx	lr

08000fec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000fee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ff0:	f7ff fef8 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <LoopForever+0x8>)
 8000ff6:	490c      	ldr	r1, [pc, #48]	; (8001028 <LoopForever+0xc>)
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <LoopForever+0x10>)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f7ff ffed 	bl	8000fda <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <LoopForever+0x14>)
 8001002:	490c      	ldr	r1, [pc, #48]	; (8001034 <LoopForever+0x18>)
 8001004:	2300      	movs	r3, #0
 8001006:	f7ff ffee 	bl	8000fe6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800100a:	480b      	ldr	r0, [pc, #44]	; (8001038 <LoopForever+0x1c>)
 800100c:	490b      	ldr	r1, [pc, #44]	; (800103c <LoopForever+0x20>)
 800100e:	2300      	movs	r3, #0
 8001010:	f7ff ffe9 	bl	8000fe6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001014:	f003 fd30 	bl	8004a78 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001018:	f7ff faba 	bl	8000590 <main>

0800101c <LoopForever>:

LoopForever:
  b LoopForever
 800101c:	e7fe      	b.n	800101c <LoopForever>
 800101e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001020:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001024:	20000004 	.word	0x20000004
 8001028:	20000074 	.word	0x20000074
 800102c:	08005448 	.word	0x08005448
  INIT_BSS _sbss, _ebss
 8001030:	20000074 	.word	0x20000074
 8001034:	200003f8 	.word	0x200003f8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001038:	20030000 	.word	0x20030000
 800103c:	20030000 	.word	0x20030000

08001040 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_Init+0x3c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_Init+0x3c>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001058:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f000 f94c 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f80f 	bl	8001084 <HAL_InitTick>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	e001      	b.n	8001076 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001072:	f7ff fdba 	bl	8000bea <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001076:	79fb      	ldrb	r3, [r7, #7]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58004000 	.word	0x58004000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d024      	beq.n	80010e2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001098:	f002 f9c4 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800109c:	4602      	mov	r2, r0
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_InitTick+0x6c>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f946 	bl	8001342 <HAL_SYSTICK_Config>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10f      	bne.n	80010dc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	d809      	bhi.n	80010d6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c2:	2200      	movs	r2, #0
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ca:	f000 f920 	bl	800130e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <HAL_InitTick+0x70>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e007      	b.n	80010e6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e004      	b.n	80010e6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e001      	b.n	80010e6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000000c 	.word	0x2000000c
 800111c:	200003f0 	.word	0x200003f0

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200003f0 	.word	0x200003f0

08001138 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTickPrio+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffe2 	bl	8001120 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_Delay+0x40>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffd2 	bl	8001120 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
    {
    }
  }
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000000c 	.word	0x2000000c

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff47 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff5e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff90 	bl	800124c <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5f 	bl	80011f8 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb2 	bl	80012b4 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e14c      	b.n	8001606 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 813e 	beq.w	8001600 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d00b      	beq.n	80013a4 <HAL_GPIO_Init+0x48>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d007      	beq.n	80013a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001398:	2b11      	cmp	r3, #17
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b12      	cmp	r3, #18
 80013a2:	d130      	bne.n	8001406 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013da:	2201      	movs	r2, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	f003 0201 	and.w	r2, r3, #1
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0xea>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b12      	cmp	r3, #18
 8001444:	d123      	bne.n	800148e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0203 	and.w	r2, r3, #3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8098 	beq.w	8001600 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80014d0:	4a54      	ldr	r2, [pc, #336]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014fa:	d019      	beq.n	8001530 <HAL_GPIO_Init+0x1d4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a4a      	ldr	r2, [pc, #296]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d013      	beq.n	800152c <HAL_GPIO_Init+0x1d0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a49      	ldr	r2, [pc, #292]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d00d      	beq.n	8001528 <HAL_GPIO_Init+0x1cc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a48      	ldr	r2, [pc, #288]	; (8001630 <HAL_GPIO_Init+0x2d4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d007      	beq.n	8001524 <HAL_GPIO_Init+0x1c8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a47      	ldr	r2, [pc, #284]	; (8001634 <HAL_GPIO_Init+0x2d8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d101      	bne.n	8001520 <HAL_GPIO_Init+0x1c4>
 800151c:	2304      	movs	r3, #4
 800151e:	e008      	b.n	8001532 <HAL_GPIO_Init+0x1d6>
 8001520:	2307      	movs	r3, #7
 8001522:	e006      	b.n	8001532 <HAL_GPIO_Init+0x1d6>
 8001524:	2303      	movs	r3, #3
 8001526:	e004      	b.n	8001532 <HAL_GPIO_Init+0x1d6>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x1d6>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_GPIO_Init+0x1d6>
 8001530:	2300      	movs	r3, #0
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001542:	4938      	ldr	r1, [pc, #224]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 8001552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001576:	4a30      	ldr	r2, [pc, #192]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 8001580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a4:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f aeab 	bne.w	800136c <HAL_GPIO_Init+0x10>
  }
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40010000 	.word	0x40010000
 8001628:	48000400 	.word	0x48000400
 800162c:	48000800 	.word	0x48000800
 8001630:	48000c00 	.word	0x48000c00
 8001634:	48001000 	.word	0x48001000
 8001638:	58000800 	.word	0x58000800

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001658:	e002      	b.n	8001660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43d9      	mvns	r1, r3
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	400b      	ands	r3, r1
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e081      	b.n	80017b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d106      	bne.n	80016cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fa96 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2224      	movs	r2, #36	; 0x24
 80016d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001700:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	e006      	b.n	8001728 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001726:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d104      	bne.n	800173a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001738:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800175c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	ea42 0103 	orr.w	r1, r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	021a      	lsls	r2, r3, #8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69d9      	ldr	r1, [r3, #28]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1a      	ldr	r2, [r3, #32]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	461a      	mov	r2, r3
 80017cc:	460b      	mov	r3, r1
 80017ce:	817b      	strh	r3, [r7, #10]
 80017d0:	4613      	mov	r3, r2
 80017d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b20      	cmp	r3, #32
 80017de:	f040 80da 	bne.w	8001996 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_I2C_Master_Transmit+0x30>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e0d3      	b.n	8001998 <HAL_I2C_Master_Transmit+0x1d8>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017f8:	f7ff fc92 	bl	8001120 <HAL_GetTick>
 80017fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2319      	movs	r3, #25
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f9e6 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0be      	b.n	8001998 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2221      	movs	r2, #33	; 0x21
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2210      	movs	r2, #16
 8001826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	893a      	ldrh	r2, [r7, #8]
 800183a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001846:	b29b      	uxth	r3, r3
 8001848:	2bff      	cmp	r3, #255	; 0xff
 800184a:	d90e      	bls.n	800186a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	22ff      	movs	r2, #255	; 0xff
 8001850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001856:	b2da      	uxtb	r2, r3
 8001858:	8979      	ldrh	r1, [r7, #10]
 800185a:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fb48 	bl	8001ef8 <I2C_TransferConfig>
 8001868:	e06c      	b.n	8001944 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	b2da      	uxtb	r2, r3
 800187a:	8979      	ldrh	r1, [r7, #10]
 800187c:	4b48      	ldr	r3, [pc, #288]	; (80019a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 fb37 	bl	8001ef8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800188a:	e05b      	b.n	8001944 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	6a39      	ldr	r1, [r7, #32]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f9e3 	bl	8001c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e07b      	b.n	8001998 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d034      	beq.n	8001944 <HAL_I2C_Master_Transmit+0x184>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d130      	bne.n	8001944 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	2200      	movs	r2, #0
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f975 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e04d      	b.n	8001998 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	2bff      	cmp	r3, #255	; 0xff
 8001904:	d90e      	bls.n	8001924 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	22ff      	movs	r2, #255	; 0xff
 800190a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001910:	b2da      	uxtb	r2, r3
 8001912:	8979      	ldrh	r1, [r7, #10]
 8001914:	2300      	movs	r3, #0
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 faeb 	bl	8001ef8 <I2C_TransferConfig>
 8001922:	e00f      	b.n	8001944 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	b2da      	uxtb	r2, r3
 8001934:	8979      	ldrh	r1, [r7, #10]
 8001936:	2300      	movs	r3, #0
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fada 	bl	8001ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001948:	b29b      	uxth	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d19e      	bne.n	800188c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	6a39      	ldr	r1, [r7, #32]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f9c2 	bl	8001cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e01a      	b.n	8001998 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2220      	movs	r2, #32
 8001968:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001976:	400b      	ands	r3, r1
 8001978:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2220      	movs	r2, #32
 800197e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
  }
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	80002000 	.word	0x80002000
 80019a4:	fe00e800 	.word	0xfe00e800

080019a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	461a      	mov	r2, r3
 80019b4:	460b      	mov	r3, r1
 80019b6:	817b      	strh	r3, [r7, #10]
 80019b8:	4613      	mov	r3, r2
 80019ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	f040 80db 	bne.w	8001b80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_I2C_Master_Receive+0x30>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e0d4      	b.n	8001b82 <HAL_I2C_Master_Receive+0x1da>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019e0:	f7ff fb9e 	bl	8001120 <HAL_GetTick>
 80019e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2319      	movs	r3, #25
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f8f2 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0bf      	b.n	8001b82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2222      	movs	r2, #34	; 0x22
 8001a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	893a      	ldrh	r2, [r7, #8]
 8001a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2bff      	cmp	r3, #255	; 0xff
 8001a32:	d90e      	bls.n	8001a52 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	22ff      	movs	r2, #255	; 0xff
 8001a38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	8979      	ldrh	r1, [r7, #10]
 8001a42:	4b52      	ldr	r3, [pc, #328]	; (8001b8c <HAL_I2C_Master_Receive+0x1e4>)
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 fa54 	bl	8001ef8 <I2C_TransferConfig>
 8001a50:	e06d      	b.n	8001b2e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	8979      	ldrh	r1, [r7, #10]
 8001a64:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <HAL_I2C_Master_Receive+0x1e4>)
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fa43 	bl	8001ef8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001a72:	e05c      	b.n	8001b2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	6a39      	ldr	r1, [r7, #32]
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 f96b 	bl	8001d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e07c      	b.n	8001b82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d034      	beq.n	8001b2e <HAL_I2C_Master_Receive+0x186>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d130      	bne.n	8001b2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f880 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e04d      	b.n	8001b82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2bff      	cmp	r3, #255	; 0xff
 8001aee:	d90e      	bls.n	8001b0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	22ff      	movs	r2, #255	; 0xff
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	8979      	ldrh	r1, [r7, #10]
 8001afe:	2300      	movs	r3, #0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f9f6 	bl	8001ef8 <I2C_TransferConfig>
 8001b0c:	e00f      	b.n	8001b2e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	8979      	ldrh	r1, [r7, #10]
 8001b20:	2300      	movs	r3, #0
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f9e5 	bl	8001ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d19d      	bne.n	8001a74 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f8cd 	bl	8001cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e01a      	b.n	8001b82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2220      	movs	r2, #32
 8001b52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6859      	ldr	r1, [r3, #4]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_I2C_Master_Receive+0x1e8>)
 8001b60:	400b      	ands	r3, r1
 8001b62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e000      	b.n	8001b82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001b80:	2302      	movs	r3, #2
  }
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	80002400 	.word	0x80002400
 8001b90:	fe00e800 	.word	0xfe00e800

08001b94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d103      	bne.n	8001bb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d007      	beq.n	8001bd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	619a      	str	r2, [r3, #24]
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bec:	e022      	b.n	8001c34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d01e      	beq.n	8001c34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7ff fa93 	bl	8001120 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d302      	bcc.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d113      	bne.n	8001c34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e00f      	b.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d0cd      	beq.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c68:	e02c      	b.n	8001cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f8dc 	bl	8001e2c <I2C_IsAcknowledgeFailed>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e02a      	b.n	8001cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d01e      	beq.n	8001cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c86:	f7ff fa4b 	bl	8001120 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d302      	bcc.n	8001c9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d113      	bne.n	8001cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	f043 0220 	orr.w	r2, r3, #32
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e007      	b.n	8001cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d1cb      	bne.n	8001c6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce8:	e028      	b.n	8001d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 f89c 	bl	8001e2c <I2C_IsAcknowledgeFailed>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e026      	b.n	8001d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfe:	f7ff fa0f 	bl	8001120 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d302      	bcc.n	8001d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d113      	bne.n	8001d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	f043 0220 	orr.w	r2, r3, #32
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e007      	b.n	8001d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d1cf      	bne.n	8001cea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d60:	e055      	b.n	8001e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f860 	bl	8001e2c <I2C_IsAcknowledgeFailed>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e053      	b.n	8001e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d129      	bne.n	8001dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d105      	bne.n	8001d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e03f      	b.n	8001e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2220      	movs	r2, #32
 8001da4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001db2:	400b      	ands	r3, r1
 8001db4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e022      	b.n	8001e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd8:	f7ff f9a2 	bl	8001120 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d302      	bcc.n	8001dee <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e007      	b.n	8001e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d1a2      	bne.n	8001d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	fe00e800 	.word	0xfe00e800

08001e2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d151      	bne.n	8001eea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e46:	e022      	b.n	8001e8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4e:	d01e      	beq.n	8001e8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e50:	f7ff f966 	bl	8001120 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d302      	bcc.n	8001e66 <I2C_IsAcknowledgeFailed+0x3a>
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d113      	bne.n	8001e8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f043 0220 	orr.w	r2, r3, #32
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e02e      	b.n	8001eec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d1d5      	bne.n	8001e48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fe71 	bl	8001b94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <I2C_IsAcknowledgeFailed+0xc8>)
 8001ebe:	400b      	ands	r3, r1
 8001ec0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f043 0204 	orr.w	r2, r3, #4
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	fe00e800 	.word	0xfe00e800

08001ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	817b      	strh	r3, [r7, #10]
 8001f06:	4613      	mov	r3, r2
 8001f08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <I2C_TransferConfig+0x58>)
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	ea02 0103 	and.w	r1, r2, r3
 8001f22:	897b      	ldrh	r3, [r7, #10]
 8001f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f28:	7a7b      	ldrb	r3, [r7, #9]
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	03ff63ff 	.word	0x03ff63ff

08001f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d138      	bne.n	8001fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e032      	b.n	8001fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d139      	bne.n	8002074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800200a:	2302      	movs	r3, #2
 800200c:	e033      	b.n	8002076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2224      	movs	r2, #36	; 0x24
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800203c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	e000      	b.n	8002076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002074:	2302      	movs	r3, #2
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002084:	b08b      	sub	sp, #44	; 0x2c
 8002086:	af06      	add	r7, sp, #24
 8002088:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0ad      	b.n	80021f0 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7fe fe07 	bl	8000cbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fc97 	bl	80049ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e035      	b.n	8002132 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	015b      	lsls	r3, r3, #5
 80020cc:	4413      	add	r3, r2
 80020ce:	3329      	adds	r3, #41	; 0x29
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	015b      	lsls	r3, r3, #5
 80020da:	4413      	add	r3, r2
 80020dc:	3328      	adds	r3, #40	; 0x28
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	b291      	uxth	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	015b      	lsls	r3, r3, #5
 80020ec:	4413      	add	r3, r2
 80020ee:	3336      	adds	r3, #54	; 0x36
 80020f0:	460a      	mov	r2, r1
 80020f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	015b      	lsls	r3, r3, #5
 80020fa:	4413      	add	r3, r2
 80020fc:	332b      	adds	r3, #43	; 0x2b
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	015b      	lsls	r3, r3, #5
 8002108:	4413      	add	r3, r2
 800210a:	3338      	adds	r3, #56	; 0x38
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	015b      	lsls	r3, r3, #5
 8002116:	4413      	add	r3, r2
 8002118:	333c      	adds	r3, #60	; 0x3c
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	3302      	adds	r3, #2
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	4413      	add	r3, r2
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	3301      	adds	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	d3c4      	bcc.n	80020c6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e031      	b.n	80021a6 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	015b      	lsls	r3, r3, #5
 8002148:	4413      	add	r3, r2
 800214a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	015b      	lsls	r3, r3, #5
 8002158:	4413      	add	r3, r2
 800215a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	4413      	add	r3, r2
 800216a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	015b      	lsls	r3, r3, #5
 8002178:	4413      	add	r3, r2
 800217a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	015b      	lsls	r3, r3, #5
 8002188:	4413      	add	r3, r2
 800218a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	330a      	adds	r3, #10
 8002198:	015b      	lsls	r3, r3, #5
 800219a:	4413      	add	r3, r2
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3301      	adds	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3c8      	bcc.n	8002142 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	687e      	ldr	r6, [r7, #4]
 80021b8:	466d      	mov	r5, sp
 80021ba:	f106 0410 	add.w	r4, r6, #16
 80021be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	1d33      	adds	r3, r6, #4
 80021c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ca:	6838      	ldr	r0, [r7, #0]
 80021cc:	f002 fc2a 	bl	8004a24 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d102      	bne.n	80021ee <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f805 	bl	80021f8 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800221c:	b29b      	uxth	r3, r3
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002230:	b29b      	uxth	r3, r3
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	58000400 	.word	0x58000400

0800226c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <HAL_PWREx_GetVoltageRange+0x18>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	58000400 	.word	0x58000400

08002288 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800229a:	d101      	bne.n	80022a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_RCC_HSE_EnableBypass>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80022b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_RCC_HSE_DisableBypass>:
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_RCC_HSE_Enable>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_RCC_HSE_Disable>:
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002318:	6013      	str	r3, [r2, #0]
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_RCC_HSE_IsReady>:
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002336:	d101      	bne.n	800233c <LL_RCC_HSE_IsReady+0x18>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <LL_RCC_HSE_IsReady+0x1a>
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_RCC_HSI_Enable>:
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_RCC_HSI_Disable>:
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800236a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_RCC_HSI_IsReady>:
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002396:	d101      	bne.n	800239c <LL_RCC_HSI_IsReady+0x18>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <LL_RCC_HSI_IsReady+0x1a>
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_RCC_HSI48_Enable>:
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_RCC_HSI48_Disable>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_RCC_HSI48_IsReady>:
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d101      	bne.n	800242e <LL_RCC_HSI48_IsReady+0x18>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_RCC_HSI48_IsReady+0x1a>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_RCC_LSE_Enable>:
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_RCC_LSE_Disable>:
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_RCC_LSE_EnableBypass>:
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_RCC_LSE_DisableBypass>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d101      	bne.n	80024da <LL_RCC_LSE_IsReady+0x18>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <LL_RCC_LSE_IsReady+0x1a>
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d101      	bne.n	8002542 <LL_RCC_LSI1_IsReady+0x18>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_RCC_LSI1_IsReady+0x1a>
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d101      	bne.n	80025aa <LL_RCC_LSI2_IsReady+0x18>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <LL_RCC_LSI2_IsReady+0x1a>
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6013      	str	r3, [r2, #0]
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d101      	bne.n	8002636 <LL_RCC_MSI_IsReady+0x16>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_RCC_MSI_IsReady+0x18>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2bb0      	cmp	r3, #176	; 0xb0
 8002680:	d901      	bls.n	8002686 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002682:	23b0      	movs	r3, #176	; 0xb0
 8002684:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002686:	687b      	ldr	r3, [r7, #4]
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 0203 	bic.w	r2, r3, #3
 80026d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002732:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002812:	4618      	mov	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002882:	d101      	bne.n	8002888 <LL_RCC_PLL_IsReady+0x18>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <LL_RCC_PLL_IsReady+0x1a>
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0303 	and.w	r3, r3, #3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002908:	d101      	bne.n	800290e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800292e:	d101      	bne.n	8002934 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800294c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002954:	d101      	bne.n	800295a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002978:	d101      	bne.n	800297e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800299c:	d101      	bne.n	80029a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b08d      	sub	sp, #52	; 0x34
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e386      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 808f 	beq.w	8002aee <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d0:	f7ff fe89 	bl	80026e6 <LL_RCC_GetSysClkSource>
 80029d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d6:	f7ff ff82 	bl	80028de <LL_RCC_PLL_GetMainSource>
 80029da:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_RCC_OscConfig+0x3e>
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d149      	bne.n	8002a7c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d146      	bne.n	8002a7c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ee:	f7ff fe17 	bl	8002620 <LL_RCC_MSI_IsReady>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_OscConfig+0x54>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e365      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002a08:	f7ff fe2f 	bl	800266a <LL_RCC_MSI_GetRange>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	429c      	cmp	r4, r3
 8002a10:	d914      	bls.n	8002a3c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fd44 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e354      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fe09 	bl	8002642 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe2d 	bl	8002694 <LL_RCC_MSI_SetCalibTrimming>
 8002a3a:	e013      	b.n	8002a64 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fdfe 	bl	8002642 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fe22 	bl	8002694 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fd25 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e335      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002a64:	f7fe fa14 	bl	8000e90 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a68:	4bb4      	ldr	r3, [pc, #720]	; (8002d3c <HAL_RCC_OscConfig+0x38c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fb09 	bl	8001084 <HAL_InitTick>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d039      	beq.n	8002aec <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e329      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01e      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a84:	f7ff fdae 	bl	80025e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fb4a 	bl	8001120 <HAL_GetTick>
 8002a8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a90:	f7fe fb46 	bl	8001120 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e316      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002aa2:	f7ff fdbd 	bl	8002620 <LL_RCC_MSI_IsReady>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f1      	beq.n	8002a90 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fdc6 	bl	8002642 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fdea 	bl	8002694 <LL_RCC_MSI_SetCalibTrimming>
 8002ac0:	e015      	b.n	8002aee <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ac2:	f7ff fd9e 	bl	8002602 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fb2b 	bl	8001120 <HAL_GetTick>
 8002aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ace:	f7fe fb27 	bl	8001120 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e2f7      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ae0:	f7ff fd9e 	bl	8002620 <LL_RCC_MSI_IsReady>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f1      	bne.n	8002ace <HAL_RCC_OscConfig+0x11e>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d05a      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afa:	f7ff fdf4 	bl	80026e6 <LL_RCC_GetSysClkSource>
 8002afe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b00:	f7ff feed 	bl	80028de <LL_RCC_PLL_GetMainSource>
 8002b04:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_OscConfig+0x168>
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d10d      	bne.n	8002b2e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d10a      	bne.n	8002b2e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	f7ff fc04 	bl	8002324 <LL_RCC_HSE_IsReady>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d045      	beq.n	8002bae <HAL_RCC_OscConfig+0x1fe>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d141      	bne.n	8002bae <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e2d0      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d102      	bne.n	8002b3e <HAL_RCC_OscConfig+0x18e>
 8002b38:	f7ff fbd6 	bl	80022e8 <LL_RCC_HSE_Enable>
 8002b3c:	e00d      	b.n	8002b5a <HAL_RCC_OscConfig+0x1aa>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b46:	d104      	bne.n	8002b52 <HAL_RCC_OscConfig+0x1a2>
 8002b48:	f7ff fbb0 	bl	80022ac <LL_RCC_HSE_EnableBypass>
 8002b4c:	f7ff fbcc 	bl	80022e8 <LL_RCC_HSE_Enable>
 8002b50:	e003      	b.n	8002b5a <HAL_RCC_OscConfig+0x1aa>
 8002b52:	f7ff fbd8 	bl	8002306 <LL_RCC_HSE_Disable>
 8002b56:	f7ff fbb8 	bl	80022ca <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fe fadd 	bl	8001120 <HAL_GetTick>
 8002b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fad9 	bl	8001120 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b64      	cmp	r3, #100	; 0x64
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e2a9      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b7c:	f7ff fbd2 	bl	8002324 <LL_RCC_HSE_IsReady>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f1      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1ba>
 8002b86:	e013      	b.n	8002bb0 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe faca 	bl	8001120 <HAL_GetTick>
 8002b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe fac6 	bl	8001120 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e296      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ba2:	f7ff fbbf 	bl	8002324 <LL_RCC_HSE_IsReady>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f1      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1e0>
 8002bac:	e000      	b.n	8002bb0 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d051      	beq.n	8002c60 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbc:	f7ff fd93 	bl	80026e6 <LL_RCC_GetSysClkSource>
 8002bc0:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc2:	f7ff fe8c 	bl	80028de <LL_RCC_PLL_GetMainSource>
 8002bc6:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d005      	beq.n	8002bda <HAL_RCC_OscConfig+0x22a>
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d113      	bne.n	8002bfc <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d110      	bne.n	8002bfc <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bda:	f7ff fbd3 	bl	8002384 <LL_RCC_HSI_IsReady>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x240>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e26f      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fbd7 	bl	80023a8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bfa:	e031      	b.n	8002c60 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d019      	beq.n	8002c38 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	f7ff fba0 	bl	8002348 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fa8a 	bl	8001120 <HAL_GetTick>
 8002c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fa86 	bl	8001120 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e256      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c22:	f7ff fbaf 	bl	8002384 <LL_RCC_HSI_IsReady>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f1      	beq.n	8002c10 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fbb9 	bl	80023a8 <LL_RCC_HSI_SetCalibTrimming>
 8002c36:	e013      	b.n	8002c60 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c38:	f7ff fb95 	bl	8002366 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fa70 	bl	8001120 <HAL_GetTick>
 8002c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe fa6c 	bl	8001120 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e23c      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c56:	f7ff fb95 	bl	8002384 <LL_RCC_HSI_IsReady>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f1      	bne.n	8002c44 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a2 	beq.w	8002dbe <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d075      	beq.n	8002d6e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d046      	beq.n	8002d1c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002c8e:	f7ff fc4c 	bl	800252a <LL_RCC_LSI1_IsReady>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d113      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002c98:	f7ff fc25 	bl	80024e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c9c:	f7fe fa40 	bl	8001120 <HAL_GetTick>
 8002ca0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ca4:	f7fe fa3c 	bl	8001120 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e20c      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002cb6:	f7ff fc38 	bl	800252a <LL_RCC_LSI1_IsReady>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f1      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002cc0:	f7ff fc45 	bl	800254e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fa2c 	bl	8001120 <HAL_GetTick>
 8002cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ccc:	f7fe fa28 	bl	8001120 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e1f8      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002cde:	f7ff fc58 	bl	8002592 <LL_RCC_LSI2_IsReady>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f1      	beq.n	8002ccc <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fc62 	bl	80025b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002cf2:	f7ff fc09 	bl	8002508 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fa13 	bl	8001120 <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cfe:	f7fe fa0f 	bl	8001120 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1df      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002d10:	f7ff fc0b 	bl	800252a <LL_RCC_LSI1_IsReady>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f1      	bne.n	8002cfe <HAL_RCC_OscConfig+0x34e>
 8002d1a:	e050      	b.n	8002dbe <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002d1c:	f7ff fbe3 	bl	80024e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe f9fe 	bl	8001120 <HAL_GetTick>
 8002d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d28:	f7fe f9fa 	bl	8001120 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d904      	bls.n	8002d40 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1ca      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
 8002d3a:	bf00      	nop
 8002d3c:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d40:	f7ff fbf3 	bl	800252a <LL_RCC_LSI1_IsReady>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ee      	beq.n	8002d28 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002d4a:	f7ff fc11 	bl	8002570 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d50:	f7fe f9e6 	bl	8001120 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1b6      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d62:	f7ff fc16 	bl	8002592 <LL_RCC_LSI2_IsReady>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f1      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3a0>
 8002d6c:	e027      	b.n	8002dbe <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002d6e:	f7ff fbff 	bl	8002570 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe f9d5 	bl	8001120 <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d7a:	f7fe f9d1 	bl	8001120 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1a1      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d8c:	f7ff fc01 	bl	8002592 <LL_RCC_LSI2_IsReady>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f1      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002d96:	f7ff fbb7 	bl	8002508 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe f9c1 	bl	8001120 <HAL_GetTick>
 8002d9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002da2:	f7fe f9bd 	bl	8001120 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e18d      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002db4:	f7ff fbb9 	bl	800252a <LL_RCC_LSI1_IsReady>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f1      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d05b      	beq.n	8002e82 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dca:	4bb5      	ldr	r3, [pc, #724]	; (80030a0 <HAL_RCC_OscConfig+0x6f0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d114      	bne.n	8002e00 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002dd6:	f7ff fa39 	bl	800224c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fe f9a1 	bl	8001120 <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fe f99d 	bl	8001120 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e16d      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df4:	4baa      	ldr	r3, [pc, #680]	; (80030a0 <HAL_RCC_OscConfig+0x6f0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d102      	bne.n	8002e0e <HAL_RCC_OscConfig+0x45e>
 8002e08:	f7ff fb17 	bl	800243a <LL_RCC_LSE_Enable>
 8002e0c:	e00c      	b.n	8002e28 <HAL_RCC_OscConfig+0x478>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d104      	bne.n	8002e20 <HAL_RCC_OscConfig+0x470>
 8002e16:	f7ff fb32 	bl	800247e <LL_RCC_LSE_EnableBypass>
 8002e1a:	f7ff fb0e 	bl	800243a <LL_RCC_LSE_Enable>
 8002e1e:	e003      	b.n	8002e28 <HAL_RCC_OscConfig+0x478>
 8002e20:	f7ff fb1c 	bl	800245c <LL_RCC_LSE_Disable>
 8002e24:	f7ff fb3c 	bl	80024a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d014      	beq.n	8002e5a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe f976 	bl	8001120 <HAL_GetTick>
 8002e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe f972 	bl	8001120 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e140      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e4e:	f7ff fb38 	bl	80024c2 <LL_RCC_LSE_IsReady>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <HAL_RCC_OscConfig+0x488>
 8002e58:	e013      	b.n	8002e82 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe f961 	bl	8001120 <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe f95d 	bl	8001120 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e12b      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e78:	f7ff fb23 	bl	80024c2 <LL_RCC_LSE_IsReady>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1ef      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d02c      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d014      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e96:	f7ff fa9c 	bl	80023d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fe f941 	bl	8001120 <HAL_GetTick>
 8002e9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ea2:	f7fe f93d 	bl	8001120 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e10d      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002eb4:	f7ff faaf 	bl	8002416 <LL_RCC_HSI48_IsReady>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f1      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x4f2>
 8002ebe:	e013      	b.n	8002ee8 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ec0:	f7ff fa98 	bl	80023f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe f92c 	bl	8001120 <HAL_GetTick>
 8002ec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ecc:	f7fe f928 	bl	8001120 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0f8      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002ede:	f7ff fa9a 	bl	8002416 <LL_RCC_HSI48_IsReady>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f1      	bne.n	8002ecc <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80ee 	beq.w	80030ce <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef2:	f7ff fbf8 	bl	80026e6 <LL_RCC_GetSysClkSource>
 8002ef6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f040 80af 	bne.w	8003068 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0203 	and.w	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d123      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d114      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d10d      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d106      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d05d      	beq.n	800301c <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d058      	beq.n	8003018 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0ab      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f78:	f7ff fc6b 	bl	8002852 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f7c:	f7fe f8d0 	bl	8001120 <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe f8cc 	bl	8001120 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e09c      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ef      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	4b3e      	ldr	r3, [pc, #248]	; (80030a4 <HAL_RCC_OscConfig+0x6f4>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fb6:	4311      	orrs	r1, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fbc:	0212      	lsls	r2, r2, #8
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fda:	f7ff fc2b 	bl	8002834 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fee:	f7fe f897 	bl	8001120 <HAL_GetTick>
 8002ff2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe f893 	bl	8001120 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e063      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ef      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003016:	e05a      	b.n	80030ce <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e059      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d151      	bne.n	80030ce <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800302a:	f7ff fc03 	bl	8002834 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800303e:	f7fe f86f 	bl	8001120 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe f86b 	bl	8001120 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e03b      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ef      	beq.n	8003046 <HAL_RCC_OscConfig+0x696>
 8003066:	e032      	b.n	80030ce <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d02d      	beq.n	80030ca <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	f7ff fbf0 	bl	8002852 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800307c:	f023 0303 	bic.w	r3, r3, #3
 8003080:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800308c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003094:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fe f843 	bl	8001120 <HAL_GetTick>
 800309a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309c:	e00d      	b.n	80030ba <HAL_RCC_OscConfig+0x70a>
 800309e:	bf00      	nop
 80030a0:	58000400 	.word	0x58000400
 80030a4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe f83a 	bl	8001120 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ef      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6f8>
 80030c8:	e001      	b.n	80030ce <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3734      	adds	r7, #52	; 0x34
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e12a      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b97      	ldr	r3, [pc, #604]	; (800334c <HAL_RCC_ClockConfig+0x274>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d91b      	bls.n	8003132 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b94      	ldr	r3, [pc, #592]	; (800334c <HAL_RCC_ClockConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	4992      	ldr	r1, [pc, #584]	; (800334c <HAL_RCC_ClockConfig+0x274>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310a:	f7fe f809 	bl	8001120 <HAL_GetTick>
 800310e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003110:	e008      	b.n	8003124 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003112:	f7fe f805 	bl	8001120 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e10e      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003124:	4b89      	ldr	r3, [pc, #548]	; (800334c <HAL_RCC_ClockConfig+0x274>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d1ef      	bne.n	8003112 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fadb 	bl	80026fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003148:	f7fd ffea 	bl	8001120 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003150:	f7fd ffe6 	bl	8001120 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e0ef      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003162:	f7ff fbc8 	bl	80028f6 <LL_RCC_IsActiveFlag_HPRE>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f1      	beq.n	8003150 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d016      	beq.n	80031a6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fad2 	bl	8002726 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003182:	f7fd ffcd 	bl	8001120 <HAL_GetTick>
 8003186:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800318a:	f7fd ffc9 	bl	8001120 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0d2      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800319c:	f7ff fbbd 	bl	800291a <LL_RCC_IsActiveFlag_C2HPRE>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f1      	beq.n	800318a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff facb 	bl	8002752 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031bc:	f7fd ffb0 	bl	8001120 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031c4:	f7fd ffac 	bl	8001120 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0b5      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031d6:	f7ff fbb3 	bl	8002940 <LL_RCC_IsActiveFlag_SHDHPRE>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f1      	beq.n	80031c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d016      	beq.n	800321a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fac5 	bl	8002780 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031f6:	f7fd ff93 	bl	8001120 <HAL_GetTick>
 80031fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031fe:	f7fd ff8f 	bl	8001120 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e098      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003210:	f7ff fba9 	bl	8002966 <LL_RCC_IsActiveFlag_PPRE1>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f1      	beq.n	80031fe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d017      	beq.n	8003256 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fabb 	bl	80027a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003232:	f7fd ff75 	bl	8001120 <HAL_GetTick>
 8003236:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800323a:	f7fd ff71 	bl	8001120 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e07a      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800324c:	f7ff fb9d 	bl	800298a <LL_RCC_IsActiveFlag_PPRE2>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f1      	beq.n	800323a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d043      	beq.n	80032ea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d106      	bne.n	8003278 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800326a:	f7ff f85b 	bl	8002324 <LL_RCC_HSE_IsReady>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11e      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e064      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d106      	bne.n	800328e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003280:	f7ff faf6 	bl	8002870 <LL_RCC_PLL_IsReady>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d113      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e059      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003296:	f7ff f9c3 	bl	8002620 <LL_RCC_MSI_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d108      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e04e      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80032a4:	f7ff f86e 	bl	8002384 <LL_RCC_HSI_IsReady>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e047      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fa01 	bl	80026be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fd ff30 	bl	8001120 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fd ff2c 	bl	8001120 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e033      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	f7ff fa04 	bl	80026e6 <LL_RCC_GetSysClkSource>
 80032de:	4602      	mov	r2, r0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d1ec      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <HAL_RCC_ClockConfig+0x274>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d21b      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_RCC_ClockConfig+0x274>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 0207 	bic.w	r2, r3, #7
 8003300:	4912      	ldr	r1, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x274>)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003308:	f7fd ff0a 	bl	8001120 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	e008      	b.n	8003322 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003310:	f7fd ff06 	bl	8001120 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e00f      	b.n	8003342 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_ClockConfig+0x274>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d1ef      	bne.n	8003310 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8003330:	f7fd fdae 	bl	8000e90 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003334:	f7fd ff00 	bl	8001138 <HAL_GetTickPrio>
 8003338:	4603      	mov	r3, r0
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd fea2 	bl	8001084 <HAL_InitTick>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	58004000 	.word	0x58004000

08003350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003356:	f7ff f9c6 	bl	80026e6 <LL_RCC_GetSysClkSource>
 800335a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003362:	f7ff f982 	bl	800266a <LL_RCC_MSI_GetRange>
 8003366:	4603      	mov	r3, r0
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e04a      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b04      	cmp	r3, #4
 800337c:	d102      	bne.n	8003384 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800337e:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e044      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d10a      	bne.n	80033a0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800338a:	f7fe ff7d 	bl	8002288 <LL_RCC_HSE_IsEnabledDiv2>
 800338e:	4603      	mov	r3, r0
 8003390:	2b01      	cmp	r3, #1
 8003392:	d102      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e039      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCC_GetSysClockFreq+0xd0>)
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e036      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80033a0:	f7ff fa9d 	bl	80028de <LL_RCC_PLL_GetMainSource>
 80033a4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d002      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x62>
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d003      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x68>
 80033b0:	e00d      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_GetSysClockFreq+0xcc>)
 80033b4:	60bb      	str	r3, [r7, #8]
        break;
 80033b6:	e015      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80033b8:	f7fe ff66 	bl	8002288 <LL_RCC_HSE_IsEnabledDiv2>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_RCC_GetSysClockFreq+0xcc>)
 80033c4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80033c6:	e00d      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80033c8:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033ca:	60bb      	str	r3, [r7, #8]
        break;
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80033ce:	f7ff f94c 	bl	800266a <LL_RCC_MSI_GetRange>
 80033d2:	4603      	mov	r3, r0
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e0:	60bb      	str	r3, [r7, #8]
        break;
 80033e2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80033e4:	f7ff fa56 	bl	8002894 <LL_RCC_PLL_GetN>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	fb03 f402 	mul.w	r4, r3, r2
 80033f0:	f7ff fa69 	bl	80028c6 <LL_RCC_PLL_GetDivider>
 80033f4:	4603      	mov	r3, r0
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	3301      	adds	r3, #1
 80033fa:	fbb4 f4f3 	udiv	r4, r4, r3
 80033fe:	f7ff fa56 	bl	80028ae <LL_RCC_PLL_GetR>
 8003402:	4603      	mov	r3, r0
 8003404:	0f5b      	lsrs	r3, r3, #29
 8003406:	3301      	adds	r3, #1
 8003408:	fbb4 f3f3 	udiv	r3, r4, r3
 800340c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	080053ac 	.word	0x080053ac
 800341c:	00f42400 	.word	0x00f42400
 8003420:	01e84800 	.word	0x01e84800

08003424 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b598      	push	{r3, r4, r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003428:	f7ff ff92 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 800342c:	4604      	mov	r4, r0
 800342e:	f7ff f9cf 	bl	80027d0 <LL_RCC_GetAHBPrescaler>
 8003432:	4603      	mov	r3, r0
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	4a03      	ldr	r2, [pc, #12]	; (8003448 <HAL_RCC_GetHCLKFreq+0x24>)
 800343c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003440:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd98      	pop	{r3, r4, r7, pc}
 8003448:	0800534c 	.word	0x0800534c

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b598      	push	{r3, r4, r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003450:	f7ff ffe8 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003454:	4604      	mov	r4, r0
 8003456:	f7ff f9d5 	bl	8002804 <LL_RCC_GetAPB1Prescaler>
 800345a:	4603      	mov	r3, r0
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	4a04      	ldr	r2, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd98      	pop	{r3, r4, r7, pc}
 8003474:	0800538c 	.word	0x0800538c

08003478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003478:	b598      	push	{r3, r4, r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800347c:	f7ff ffd2 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003480:	4604      	mov	r4, r0
 8003482:	f7ff f9cb 	bl	800281c <LL_RCC_GetAPB2Prescaler>
 8003486:	4603      	mov	r3, r0
 8003488:	0adb      	lsrs	r3, r3, #11
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	fa24 f303 	lsr.w	r3, r4, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd98      	pop	{r3, r4, r7, pc}
 80034a0:	0800538c 	.word	0x0800538c

080034a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2bb0      	cmp	r3, #176	; 0xb0
 80034b0:	d903      	bls.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e007      	b.n	80034ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	4a11      	ldr	r2, [pc, #68]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80034c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80034ca:	f7ff f98d 	bl	80027e8 <LL_RCC_GetAHB4Prescaler>
 80034ce:	4603      	mov	r3, r0
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	4a0d      	ldr	r2, [pc, #52]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	0c9c      	lsrs	r4, r3, #18
 80034ee:	f7fe febd 	bl	800226c <HAL_PWREx_GetVoltageRange>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4619      	mov	r1, r3
 80034f6:	4620      	mov	r0, r4
 80034f8:	f000 f80c 	bl	8003514 <RCC_SetFlashLatency>
 80034fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	bf00      	nop
 8003508:	080053ac 	.word	0x080053ac
 800350c:	0800534c 	.word	0x0800534c
 8003510:	431bde83 	.word	0x431bde83

08003514 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b093      	sub	sp, #76	; 0x4c
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <RCC_SetFlashLatency+0xf0>)
 8003520:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800352a:	4a37      	ldr	r2, [pc, #220]	; (8003608 <RCC_SetFlashLatency+0xf4>)
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	ca07      	ldmia	r2, {r0, r1, r2}
 8003532:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003536:	4b35      	ldr	r3, [pc, #212]	; (800360c <RCC_SetFlashLatency+0xf8>)
 8003538:	f107 040c 	add.w	r4, r7, #12
 800353c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800353e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003542:	2300      	movs	r3, #0
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d11c      	bne.n	8003588 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800354e:	2300      	movs	r3, #0
 8003550:	643b      	str	r3, [r7, #64]	; 0x40
 8003552:	e015      	b.n	8003580 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800355c:	4413      	add	r3, r2
 800355e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d808      	bhi.n	800357a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003570:	4413      	add	r3, r2
 8003572:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003576:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003578:	e022      	b.n	80035c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800357a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357c:	3301      	adds	r3, #1
 800357e:	643b      	str	r3, [r7, #64]	; 0x40
 8003580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003582:	2b03      	cmp	r3, #3
 8003584:	d9e6      	bls.n	8003554 <RCC_SetFlashLatency+0x40>
 8003586:	e01b      	b.n	80035c0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003588:	2300      	movs	r3, #0
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358c:	e015      	b.n	80035ba <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800358e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003596:	4413      	add	r3, r2
 8003598:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d808      	bhi.n	80035b4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80035a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80035aa:	4413      	add	r3, r2
 80035ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80035b0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80035b2:	e005      	b.n	80035c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80035b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b6:	3301      	adds	r3, #1
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d9e6      	bls.n	800358e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <RCC_SetFlashLatency+0xfc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 0207 	bic.w	r2, r3, #7
 80035c8:	4911      	ldr	r1, [pc, #68]	; (8003610 <RCC_SetFlashLatency+0xfc>)
 80035ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035d0:	f7fd fda6 	bl	8001120 <HAL_GetTick>
 80035d4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035d6:	e008      	b.n	80035ea <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035d8:	f7fd fda2 	bl	8001120 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e007      	b.n	80035fa <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <RCC_SetFlashLatency+0xfc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1ef      	bne.n	80035d8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	374c      	adds	r7, #76	; 0x4c
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}
 8003602:	bf00      	nop
 8003604:	08005310 	.word	0x08005310
 8003608:	08005320 	.word	0x08005320
 800360c:	0800532c 	.word	0x0800532c
 8003610:	58004000 	.word	0x58004000

08003614 <LL_RCC_LSE_IsEnabled>:
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <LL_RCC_LSE_IsEnabled+0x18>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <LL_RCC_LSE_IsEnabled+0x1a>
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_RCC_LSE_IsReady>:
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d101      	bne.n	8003650 <LL_RCC_LSE_IsReady+0x18>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <LL_RCC_LSE_IsReady+0x1a>
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_RCC_MSI_EnablePLLMode>:
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	6013      	str	r3, [r2, #0]
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_RCC_SetRFWKPClockSource>:
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800368e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_RCC_SetSMPSClockSource>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f023 0203 	bic.w	r2, r3, #3
 80036b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4313      	orrs	r3, r2
 80036c0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_RCC_SetSMPSPrescaler>:
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_RCC_SetUSARTClockSource>:
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80036fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_RCC_SetLPUARTClockSource>:
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_RCC_SetI2CClockSource>:
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800375a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003766:	43db      	mvns	r3, r3
 8003768:	401a      	ands	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_RCC_SetLPTIMClockSource>:
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	43db      	mvns	r3, r3
 80037a0:	401a      	ands	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_RCC_SetSAIClockSource>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80037c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_RCC_SetRNGClockSource>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_RCC_SetCLK48ClockSource>:
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800381c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_RCC_SetUSBClockSource>:
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ffe3 	bl	8003814 <LL_RCC_SetCLK48ClockSource>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <LL_RCC_SetADCClockSource>:
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800386a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_RCC_SetRTCClockSource>:
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <LL_RCC_GetRTCClockSource>:
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_RCC_ForceBackupDomainReset>:
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <LL_RCC_ReleaseBackupDomainReset>:
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003902:	bf00      	nop
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <LL_RCC_PLLSAI1_Enable>:
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800391a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800391e:	6013      	str	r3, [r2, #0]
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <LL_RCC_PLLSAI1_Disable>:
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800392e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003938:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800393c:	6013      	str	r3, [r2, #0]
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_RCC_PLLSAI1_IsReady>:
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800394c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800395a:	d101      	bne.n	8003960 <LL_RCC_PLLSAI1_IsReady+0x18>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003974:	2300      	movs	r3, #0
 8003976:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003978:	2300      	movs	r3, #0
 800397a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d033      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003990:	d00c      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d802      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x52>
 800399c:	e017      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 800399e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a2:	d017      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80039a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039a8:	d016      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80039aa:	e010      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ba:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80039bc:	e00d      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f94d 	bl	8003c62 <RCCEx_PLLSAI1_ConfigNP>
 80039c8:	4603      	mov	r3, r0
 80039ca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039cc:	e005      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	77fb      	strb	r3, [r7, #31]
        break;
 80039d2:	e002      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80039d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fee9 	bl	80037bc <LL_RCC_SetSAIClockSource>
 80039ea:	e001      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d046      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80039fc:	f7ff ff57 	bl	80038ae <LL_RCC_GetRTCClockSource>
 8003a00:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d03c      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003a0c:	f7fe fc1e 	bl	800224c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d105      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ff31 	bl	8003882 <LL_RCC_SetRTCClockSource>
 8003a20:	e02e      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003a2c:	f7ff ff4c 	bl	80038c8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003a30:	f7ff ff5b 	bl	80038ea <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003a4c:	f7ff fde2 	bl	8003614 <LL_RCC_LSE_IsEnabled>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d114      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a56:	f7fd fb63 	bl	8001120 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a5c:	e00b      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fb5f 	bl	8001120 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d902      	bls.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	77fb      	strb	r3, [r7, #31]
              break;
 8003a74:	e004      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a76:	f7ff fddf 	bl	8003638 <LL_RCC_LSE_IsReady>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d1ee      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003a80:	7ffb      	ldrb	r3, [r7, #31]
 8003a82:	77bb      	strb	r3, [r7, #30]
 8003a84:	e001      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a86:	7ffb      	ldrb	r3, [r7, #31]
 8003a88:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fe2b 	bl	80036f6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fe36 	bl	8003722 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fe5e 	bl	8003788 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fe53 	bl	8003788 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fe2b 	bl	800374e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fe20 	bl	800374e <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d022      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fe8e 	bl	8003840 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b46:	d10b      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f8e3 	bl	8003d18 <RCCEx_PLLSAI1_ConfigNQ>
 8003b52:	4603      	mov	r3, r0
 8003b54:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8003b5c:	7ffb      	ldrb	r3, [r7, #31]
 8003b5e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d008      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b7e:	d003      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff fe2b 	bl	80037e8 <LL_RCC_SetRNGClockSource>
 8003b92:	e00a      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f7ff fe22 	bl	80037e8 <LL_RCC_SetRNGClockSource>
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fe35 	bl	8003814 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d022      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fe3e 	bl	8003856 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfc:	d10b      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f8e3 	bl	8003dce <RCCEx_PLLSAI1_ConfigNR>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003c0c:	7ffb      	ldrb	r3, [r7, #31]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8003c12:	7ffb      	ldrb	r3, [r7, #31]
 8003c14:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fd27 	bl	800367a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fd46 	bl	80036ce <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fd2d 	bl	80036a6 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8003c4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003c5a:	f7ff fcff 	bl	800365c <LL_RCC_MSI_EnablePLLMode>
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c6e:	f7ff fe5c 	bl	800392a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c72:	f7fd fa55 	bl	8001120 <HAL_GetTick>
 8003c76:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c78:	e009      	b.n	8003c8e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c7a:	f7fd fa51 	bl	8001120 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d902      	bls.n	8003c8e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8c:	e004      	b.n	8003c98 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c8e:	f7ff fe5b 	bl	8003948 <LL_RCC_PLLSAI1_IsReady>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d137      	bne.n	8003d0e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003ccc:	f7ff fe1e 	bl	800390c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fd fa26 	bl	8001120 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd8:	f7fd fa22 	bl	8001120 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cea:	e004      	b.n	8003cf6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cec:	f7ff fe2c 	bl	8003948 <LL_RCC_PLLSAI1_IsReady>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d1f0      	bne.n	8003cd8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003d24:	f7ff fe01 	bl	800392a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d28:	f7fd f9fa 	bl	8001120 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d2e:	e009      	b.n	8003d44 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d30:	f7fd f9f6 	bl	8001120 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d902      	bls.n	8003d44 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	73fb      	strb	r3, [r7, #15]
      break;
 8003d42:	e004      	b.n	8003d4e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d44:	f7ff fe00 	bl	8003948 <LL_RCC_PLLSAI1_IsReady>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d137      	bne.n	8003dc4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003d82:	f7ff fdc3 	bl	800390c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d86:	f7fd f9cb 	bl	8001120 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d8c:	e009      	b.n	8003da2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8e:	f7fd f9c7 	bl	8001120 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d902      	bls.n	8003da2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	73fb      	strb	r3, [r7, #15]
        break;
 8003da0:	e004      	b.n	8003dac <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003da2:	f7ff fdd1 	bl	8003948 <LL_RCC_PLLSAI1_IsReady>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d1f0      	bne.n	8003d8e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003dda:	f7ff fda6 	bl	800392a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003dde:	f7fd f99f 	bl	8001120 <HAL_GetTick>
 8003de2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003de4:	e009      	b.n	8003dfa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003de6:	f7fd f99b 	bl	8001120 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d902      	bls.n	8003dfa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	73fb      	strb	r3, [r7, #15]
      break;
 8003df8:	e004      	b.n	8003e04 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003dfa:	f7ff fda5 	bl	8003948 <LL_RCC_PLLSAI1_IsReady>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d137      	bne.n	8003e7a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e34:	4313      	orrs	r3, r2
 8003e36:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003e38:	f7ff fd68 	bl	800390c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fd f970 	bl	8001120 <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e42:	e009      	b.n	8003e58 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e44:	f7fd f96c 	bl	8001120 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	73fb      	strb	r3, [r7, #15]
        break;
 8003e56:	e004      	b.n	8003e62 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e58:	f7ff fd76 	bl	8003948 <LL_RCC_PLLSAI1_IsReady>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d1f0      	bne.n	8003e44 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d108      	bne.n	8003e7a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e76:	4313      	orrs	r3, r2
 8003e78:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <LL_RCC_GetUSARTClockSource>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4013      	ands	r3, r2
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_RCC_GetLPUARTClockSource>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4013      	ands	r3, r2
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e042      	b.n	8003f5c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d106      	bne.n	8003eee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7fc feb7 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2224      	movs	r2, #36	; 0x24
 8003ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8c2 	bl	8004090 <UART_SetConfig>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e022      	b.n	8003f5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fac4 	bl	80044ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fb4b 	bl	80045f0 <UART_CheckIdleState>
 8003f5a:	4603      	mov	r3, r0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	f040 8083 	bne.w	8004086 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_UART_Transmit+0x28>
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e07b      	b.n	8004088 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Transmit+0x3a>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e074      	b.n	8004088 <HAL_UART_Transmit+0x124>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2221      	movs	r2, #33	; 0x21
 8003fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003fb6:	f7fd f8b3 	bl	8001120 <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d108      	bne.n	8003fe8 <HAL_UART_Transmit+0x84>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d104      	bne.n	8003fe8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e003      	b.n	8003ff0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003ff8:	e02c      	b.n	8004054 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fb3b 	bl	8004680 <UART_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e039      	b.n	8004088 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004028:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	3302      	adds	r3, #2
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e007      	b.n	8004042 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	3301      	adds	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1cc      	bne.n	8003ffa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2200      	movs	r2, #0
 8004068:	2140      	movs	r1, #64	; 0x40
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fb08 	bl	8004680 <UART_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e006      	b.n	8004088 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004094:	b088      	sub	sp, #32
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4ba4      	ldr	r3, [pc, #656]	; (8004358 <UART_SetConfig+0x2c8>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	69f9      	ldr	r1, [r7, #28]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a99      	ldr	r2, [pc, #612]	; (800435c <UART_SetConfig+0x2cc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	4313      	orrs	r3, r2
 8004102:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800410e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	69f9      	ldr	r1, [r7, #28]
 8004118:	430b      	orrs	r3, r1
 800411a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	f023 010f 	bic.w	r1, r3, #15
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a8a      	ldr	r2, [pc, #552]	; (8004360 <UART_SetConfig+0x2d0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d121      	bne.n	8004180 <UART_SetConfig+0xf0>
 800413c:	2003      	movs	r0, #3
 800413e:	f7ff fea1 	bl	8003e84 <LL_RCC_GetUSARTClockSource>
 8004142:	4603      	mov	r3, r0
 8004144:	2b03      	cmp	r3, #3
 8004146:	d817      	bhi.n	8004178 <UART_SetConfig+0xe8>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0xc0>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	0800416d 	.word	0x0800416d
 8004158:	08004167 	.word	0x08004167
 800415c:	08004173 	.word	0x08004173
 8004160:	2301      	movs	r3, #1
 8004162:	76fb      	strb	r3, [r7, #27]
 8004164:	e038      	b.n	80041d8 <UART_SetConfig+0x148>
 8004166:	2302      	movs	r3, #2
 8004168:	76fb      	strb	r3, [r7, #27]
 800416a:	e035      	b.n	80041d8 <UART_SetConfig+0x148>
 800416c:	2304      	movs	r3, #4
 800416e:	76fb      	strb	r3, [r7, #27]
 8004170:	e032      	b.n	80041d8 <UART_SetConfig+0x148>
 8004172:	2308      	movs	r3, #8
 8004174:	76fb      	strb	r3, [r7, #27]
 8004176:	e02f      	b.n	80041d8 <UART_SetConfig+0x148>
 8004178:	2310      	movs	r3, #16
 800417a:	76fb      	strb	r3, [r7, #27]
 800417c:	bf00      	nop
 800417e:	e02b      	b.n	80041d8 <UART_SetConfig+0x148>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a75      	ldr	r2, [pc, #468]	; (800435c <UART_SetConfig+0x2cc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d124      	bne.n	80041d4 <UART_SetConfig+0x144>
 800418a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800418e:	f7ff fe89 	bl	8003ea4 <LL_RCC_GetLPUARTClockSource>
 8004192:	4603      	mov	r3, r0
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004198:	d012      	beq.n	80041c0 <UART_SetConfig+0x130>
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419e:	d802      	bhi.n	80041a6 <UART_SetConfig+0x116>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <UART_SetConfig+0x124>
 80041a4:	e012      	b.n	80041cc <UART_SetConfig+0x13c>
 80041a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041aa:	d006      	beq.n	80041ba <UART_SetConfig+0x12a>
 80041ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041b0:	d009      	beq.n	80041c6 <UART_SetConfig+0x136>
 80041b2:	e00b      	b.n	80041cc <UART_SetConfig+0x13c>
 80041b4:	2300      	movs	r3, #0
 80041b6:	76fb      	strb	r3, [r7, #27]
 80041b8:	e00e      	b.n	80041d8 <UART_SetConfig+0x148>
 80041ba:	2302      	movs	r3, #2
 80041bc:	76fb      	strb	r3, [r7, #27]
 80041be:	e00b      	b.n	80041d8 <UART_SetConfig+0x148>
 80041c0:	2304      	movs	r3, #4
 80041c2:	76fb      	strb	r3, [r7, #27]
 80041c4:	e008      	b.n	80041d8 <UART_SetConfig+0x148>
 80041c6:	2308      	movs	r3, #8
 80041c8:	76fb      	strb	r3, [r7, #27]
 80041ca:	e005      	b.n	80041d8 <UART_SetConfig+0x148>
 80041cc:	2310      	movs	r3, #16
 80041ce:	76fb      	strb	r3, [r7, #27]
 80041d0:	bf00      	nop
 80041d2:	e001      	b.n	80041d8 <UART_SetConfig+0x148>
 80041d4:	2310      	movs	r3, #16
 80041d6:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5f      	ldr	r2, [pc, #380]	; (800435c <UART_SetConfig+0x2cc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	f040 808e 	bne.w	8004300 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041e4:	7efb      	ldrb	r3, [r7, #27]
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d823      	bhi.n	8004232 <UART_SetConfig+0x1a2>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <UART_SetConfig+0x160>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004215 	.word	0x08004215
 80041f4:	08004233 	.word	0x08004233
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	08004233 	.word	0x08004233
 8004200:	08004223 	.word	0x08004223
 8004204:	08004233 	.word	0x08004233
 8004208:	08004233 	.word	0x08004233
 800420c:	08004233 	.word	0x08004233
 8004210:	0800422b 	.word	0x0800422b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004214:	f7ff f91a 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8004218:	6178      	str	r0, [r7, #20]
        break;
 800421a:	e00f      	b.n	800423c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800421c:	4b51      	ldr	r3, [pc, #324]	; (8004364 <UART_SetConfig+0x2d4>)
 800421e:	617b      	str	r3, [r7, #20]
        break;
 8004220:	e00c      	b.n	800423c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004222:	f7ff f895 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8004226:	6178      	str	r0, [r7, #20]
        break;
 8004228:	e008      	b.n	800423c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422e:	617b      	str	r3, [r7, #20]
        break;
 8004230:	e004      	b.n	800423c <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	76bb      	strb	r3, [r7, #26]
        break;
 800423a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 811c 	beq.w	800447c <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	4a47      	ldr	r2, [pc, #284]	; (8004368 <UART_SetConfig+0x2d8>)
 800424a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800424e:	461a      	mov	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	fbb3 f3f2 	udiv	r3, r3, r2
 8004256:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	d305      	bcc.n	8004274 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	d902      	bls.n	800427a <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	76bb      	strb	r3, [r7, #26]
 8004278:	e100      	b.n	800447c <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	4618      	mov	r0, r3
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	4a38      	ldr	r2, [pc, #224]	; (8004368 <UART_SetConfig+0x2d8>)
 8004288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f04f 0400 	mov.w	r4, #0
 8004292:	461a      	mov	r2, r3
 8004294:	4623      	mov	r3, r4
 8004296:	f7fb ffcb 	bl	8000230 <__aeabi_uldivmod>
 800429a:	4603      	mov	r3, r0
 800429c:	460c      	mov	r4, r1
 800429e:	4619      	mov	r1, r3
 80042a0:	4622      	mov	r2, r4
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	0214      	lsls	r4, r2, #8
 80042ac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80042b0:	020b      	lsls	r3, r1, #8
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6852      	ldr	r2, [r2, #4]
 80042b6:	0852      	lsrs	r2, r2, #1
 80042b8:	4611      	mov	r1, r2
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	eb13 0b01 	adds.w	fp, r3, r1
 80042c2:	eb44 0c02 	adc.w	ip, r4, r2
 80042c6:	4658      	mov	r0, fp
 80042c8:	4661      	mov	r1, ip
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f04f 0400 	mov.w	r4, #0
 80042d2:	461a      	mov	r2, r3
 80042d4:	4623      	mov	r3, r4
 80042d6:	f7fb ffab 	bl	8000230 <__aeabi_uldivmod>
 80042da:	4603      	mov	r3, r0
 80042dc:	460c      	mov	r4, r1
 80042de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e6:	d308      	bcc.n	80042fa <UART_SetConfig+0x26a>
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ee:	d204      	bcs.n	80042fa <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	e0c0      	b.n	800447c <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	76bb      	strb	r3, [r7, #26]
 80042fe:	e0bd      	b.n	800447c <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004308:	d169      	bne.n	80043de <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800430a:	7efb      	ldrb	r3, [r7, #27]
 800430c:	3b01      	subs	r3, #1
 800430e:	2b07      	cmp	r3, #7
 8004310:	d82c      	bhi.n	800436c <UART_SetConfig+0x2dc>
 8004312:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <UART_SetConfig+0x288>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	08004339 	.word	0x08004339
 800431c:	08004341 	.word	0x08004341
 8004320:	0800436d 	.word	0x0800436d
 8004324:	08004347 	.word	0x08004347
 8004328:	0800436d 	.word	0x0800436d
 800432c:	0800436d 	.word	0x0800436d
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800434f 	.word	0x0800434f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7ff f89e 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 800433c:	6178      	str	r0, [r7, #20]
        break;
 800433e:	e01a      	b.n	8004376 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <UART_SetConfig+0x2d4>)
 8004342:	617b      	str	r3, [r7, #20]
        break;
 8004344:	e017      	b.n	8004376 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004346:	f7ff f803 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 800434a:	6178      	str	r0, [r7, #20]
        break;
 800434c:	e013      	b.n	8004376 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004352:	617b      	str	r3, [r7, #20]
        break;
 8004354:	e00f      	b.n	8004376 <UART_SetConfig+0x2e6>
 8004356:	bf00      	nop
 8004358:	cfff69f3 	.word	0xcfff69f3
 800435c:	40008000 	.word	0x40008000
 8004360:	40013800 	.word	0x40013800
 8004364:	00f42400 	.word	0x00f42400
 8004368:	080053ec 	.word	0x080053ec
      default:
        pclk = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	76bb      	strb	r3, [r7, #26]
        break;
 8004374:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d07f      	beq.n	800447c <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	4a48      	ldr	r2, [pc, #288]	; (80044a4 <UART_SetConfig+0x414>)
 8004382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004386:	461a      	mov	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fbb3 f3f2 	udiv	r3, r3, r2
 800438e:	005a      	lsls	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	441a      	add	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b0f      	cmp	r3, #15
 80043a8:	d916      	bls.n	80043d8 <UART_SetConfig+0x348>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b0:	d212      	bcs.n	80043d8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f023 030f 	bic.w	r3, r3, #15
 80043ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	89fb      	ldrh	r3, [r7, #14]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	89fa      	ldrh	r2, [r7, #14]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	e051      	b.n	800447c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	76bb      	strb	r3, [r7, #26]
 80043dc:	e04e      	b.n	800447c <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043de:	7efb      	ldrb	r3, [r7, #27]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	2b07      	cmp	r3, #7
 80043e4:	d821      	bhi.n	800442a <UART_SetConfig+0x39a>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0x35c>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	0800440d 	.word	0x0800440d
 80043f0:	08004415 	.word	0x08004415
 80043f4:	0800442b 	.word	0x0800442b
 80043f8:	0800441b 	.word	0x0800441b
 80043fc:	0800442b 	.word	0x0800442b
 8004400:	0800442b 	.word	0x0800442b
 8004404:	0800442b 	.word	0x0800442b
 8004408:	08004423 	.word	0x08004423
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800440c:	f7ff f834 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 8004410:	6178      	str	r0, [r7, #20]
        break;
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004414:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <UART_SetConfig+0x418>)
 8004416:	617b      	str	r3, [r7, #20]
        break;
 8004418:	e00c      	b.n	8004434 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441a:	f7fe ff99 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 800441e:	6178      	str	r0, [r7, #20]
        break;
 8004420:	e008      	b.n	8004434 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	617b      	str	r3, [r7, #20]
        break;
 8004428:	e004      	b.n	8004434 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	76bb      	strb	r3, [r7, #26]
        break;
 8004432:	bf00      	nop
    }

    if (pclk != 0U)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d020      	beq.n	800447c <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	4a19      	ldr	r2, [pc, #100]	; (80044a4 <UART_SetConfig+0x414>)
 8004440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004444:	461a      	mov	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	fbb3 f2f2 	udiv	r2, r3, r2
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	441a      	add	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	b29b      	uxth	r3, r3
 800445e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b0f      	cmp	r3, #15
 8004464:	d908      	bls.n	8004478 <UART_SetConfig+0x3e8>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d204      	bcs.n	8004478 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	e001      	b.n	800447c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004498:	7ebb      	ldrb	r3, [r7, #26]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80044a4:	080053ec 	.word	0x080053ec
 80044a8:	00f42400 	.word	0x00f42400

080044ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01a      	beq.n	80045c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045aa:	d10a      	bne.n	80045c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004600:	f7fc fd8e 	bl	8001120 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b08      	cmp	r3, #8
 8004612:	d10e      	bne.n	8004632 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f82c 	bl	8004680 <UART_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e022      	b.n	8004678 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d10e      	bne.n	800465e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f816 	bl	8004680 <UART_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e00c      	b.n	8004678 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004690:	e062      	b.n	8004758 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d05e      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fc fd41 	bl	8001120 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11d      	bne.n	80046ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e045      	b.n	8004778 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d02e      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004708:	d126      	bne.n	8004758 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004712:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004722:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e00f      	b.n	8004778 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	429a      	cmp	r2, r3
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	429a      	cmp	r2, r3
 8004774:	d08d      	beq.n	8004692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_UARTEx_DisableFifoMode+0x16>
 8004792:	2302      	movs	r3, #2
 8004794:	e027      	b.n	80047e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2224      	movs	r2, #36	; 0x24
 80047a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004806:	2302      	movs	r3, #2
 8004808:	e02d      	b.n	8004866 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2224      	movs	r2, #36	; 0x24
 8004816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f850 	bl	80048ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004882:	2302      	movs	r3, #2
 8004884:	e02d      	b.n	80048e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2224      	movs	r2, #36	; 0x24
 8004892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f812 	bl	80048ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	; 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80048f4:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <UARTEx_SetNbDataToProcess+0xc8>)
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004902:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <UARTEx_SetNbDataToProcess+0xcc>)
 8004904:	f107 030c 	add.w	r3, r7, #12
 8004908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800490c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004928:	e03d      	b.n	80049a6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800492a:	2308      	movs	r3, #8
 800492c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800492e:	2308      	movs	r3, #8
 8004930:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	0e5b      	lsrs	r3, r3, #25
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	0f5b      	lsrs	r3, r3, #29
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004952:	7fbb      	ldrb	r3, [r7, #30]
 8004954:	7f3a      	ldrb	r2, [r7, #28]
 8004956:	f107 0120 	add.w	r1, r7, #32
 800495a:	440a      	add	r2, r1
 800495c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	7f3a      	ldrb	r2, [r7, #28]
 8004966:	f107 0120 	add.w	r1, r7, #32
 800496a:	440a      	add	r2, r1
 800496c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004970:	fb93 f3f2 	sdiv	r3, r3, r2
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800497c:	7ffb      	ldrb	r3, [r7, #31]
 800497e:	7f7a      	ldrb	r2, [r7, #29]
 8004980:	f107 0120 	add.w	r1, r7, #32
 8004984:	440a      	add	r2, r1
 8004986:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	7f7a      	ldrb	r2, [r7, #29]
 8004990:	f107 0120 	add.w	r1, r7, #32
 8004994:	440a      	add	r2, r1
 8004996:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800499a:	fb93 f3f2 	sdiv	r3, r3, r2
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80049a6:	bf00      	nop
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	0800533c 	.word	0x0800533c
 80049b8:	08005344 	.word	0x08005344

080049bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	4313      	orrs	r3, r2
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049f6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a24:	b084      	sub	sp, #16
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	f107 0014 	add.w	r0, r7, #20
 8004a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ffb0 	bl	80049bc <USB_EnableGlobalInt>

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a68:	b004      	add	sp, #16
 8004a6a:	4770      	bx	lr

08004a6c <__errno>:
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <__errno+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000010 	.word	0x20000010

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4e0d      	ldr	r6, [pc, #52]	; (8004ab0 <__libc_init_array+0x38>)
 8004a7c:	4c0d      	ldr	r4, [pc, #52]	; (8004ab4 <__libc_init_array+0x3c>)
 8004a7e:	1ba4      	subs	r4, r4, r6
 8004a80:	10a4      	asrs	r4, r4, #2
 8004a82:	2500      	movs	r5, #0
 8004a84:	42a5      	cmp	r5, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	4e0b      	ldr	r6, [pc, #44]	; (8004ab8 <__libc_init_array+0x40>)
 8004a8a:	4c0c      	ldr	r4, [pc, #48]	; (8004abc <__libc_init_array+0x44>)
 8004a8c:	f000 fc26 	bl	80052dc <_init>
 8004a90:	1ba4      	subs	r4, r4, r6
 8004a92:	10a4      	asrs	r4, r4, #2
 8004a94:	2500      	movs	r5, #0
 8004a96:	42a5      	cmp	r5, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aa0:	4798      	blx	r3
 8004aa2:	3501      	adds	r5, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aaa:	4798      	blx	r3
 8004aac:	3501      	adds	r5, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08005440 	.word	0x08005440
 8004ab4:	08005440 	.word	0x08005440
 8004ab8:	08005440 	.word	0x08005440
 8004abc:	08005444 	.word	0x08005444

08004ac0 <memset>:
 8004ac0:	4402      	add	r2, r0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d100      	bne.n	8004aca <memset+0xa>
 8004ac8:	4770      	bx	lr
 8004aca:	f803 1b01 	strb.w	r1, [r3], #1
 8004ace:	e7f9      	b.n	8004ac4 <memset+0x4>

08004ad0 <siprintf>:
 8004ad0:	b40e      	push	{r1, r2, r3}
 8004ad2:	b500      	push	{lr}
 8004ad4:	b09c      	sub	sp, #112	; 0x70
 8004ad6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ad8:	9002      	str	r0, [sp, #8]
 8004ada:	9006      	str	r0, [sp, #24]
 8004adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ae0:	4809      	ldr	r0, [pc, #36]	; (8004b08 <siprintf+0x38>)
 8004ae2:	9107      	str	r1, [sp, #28]
 8004ae4:	9104      	str	r1, [sp, #16]
 8004ae6:	4909      	ldr	r1, [pc, #36]	; (8004b0c <siprintf+0x3c>)
 8004ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aec:	9105      	str	r1, [sp, #20]
 8004aee:	6800      	ldr	r0, [r0, #0]
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	a902      	add	r1, sp, #8
 8004af4:	f000 f866 	bl	8004bc4 <_svfiprintf_r>
 8004af8:	9b02      	ldr	r3, [sp, #8]
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	b01c      	add	sp, #112	; 0x70
 8004b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b04:	b003      	add	sp, #12
 8004b06:	4770      	bx	lr
 8004b08:	20000010 	.word	0x20000010
 8004b0c:	ffff0208 	.word	0xffff0208

08004b10 <__ssputs_r>:
 8004b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b14:	688e      	ldr	r6, [r1, #8]
 8004b16:	429e      	cmp	r6, r3
 8004b18:	4682      	mov	sl, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4690      	mov	r8, r2
 8004b1e:	4699      	mov	r9, r3
 8004b20:	d837      	bhi.n	8004b92 <__ssputs_r+0x82>
 8004b22:	898a      	ldrh	r2, [r1, #12]
 8004b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b28:	d031      	beq.n	8004b8e <__ssputs_r+0x7e>
 8004b2a:	6825      	ldr	r5, [r4, #0]
 8004b2c:	6909      	ldr	r1, [r1, #16]
 8004b2e:	1a6f      	subs	r7, r5, r1
 8004b30:	6965      	ldr	r5, [r4, #20]
 8004b32:	2302      	movs	r3, #2
 8004b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b38:	fb95 f5f3 	sdiv	r5, r5, r3
 8004b3c:	f109 0301 	add.w	r3, r9, #1
 8004b40:	443b      	add	r3, r7
 8004b42:	429d      	cmp	r5, r3
 8004b44:	bf38      	it	cc
 8004b46:	461d      	movcc	r5, r3
 8004b48:	0553      	lsls	r3, r2, #21
 8004b4a:	d530      	bpl.n	8004bae <__ssputs_r+0x9e>
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	f000 fb2b 	bl	80051a8 <_malloc_r>
 8004b52:	4606      	mov	r6, r0
 8004b54:	b950      	cbnz	r0, 8004b6c <__ssputs_r+0x5c>
 8004b56:	230c      	movs	r3, #12
 8004b58:	f8ca 3000 	str.w	r3, [sl]
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b62:	81a3      	strh	r3, [r4, #12]
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6c:	463a      	mov	r2, r7
 8004b6e:	6921      	ldr	r1, [r4, #16]
 8004b70:	f000 faa8 	bl	80050c4 <memcpy>
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7e:	81a3      	strh	r3, [r4, #12]
 8004b80:	6126      	str	r6, [r4, #16]
 8004b82:	6165      	str	r5, [r4, #20]
 8004b84:	443e      	add	r6, r7
 8004b86:	1bed      	subs	r5, r5, r7
 8004b88:	6026      	str	r6, [r4, #0]
 8004b8a:	60a5      	str	r5, [r4, #8]
 8004b8c:	464e      	mov	r6, r9
 8004b8e:	454e      	cmp	r6, r9
 8004b90:	d900      	bls.n	8004b94 <__ssputs_r+0x84>
 8004b92:	464e      	mov	r6, r9
 8004b94:	4632      	mov	r2, r6
 8004b96:	4641      	mov	r1, r8
 8004b98:	6820      	ldr	r0, [r4, #0]
 8004b9a:	f000 fa9e 	bl	80050da <memmove>
 8004b9e:	68a3      	ldr	r3, [r4, #8]
 8004ba0:	1b9b      	subs	r3, r3, r6
 8004ba2:	60a3      	str	r3, [r4, #8]
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	441e      	add	r6, r3
 8004ba8:	6026      	str	r6, [r4, #0]
 8004baa:	2000      	movs	r0, #0
 8004bac:	e7dc      	b.n	8004b68 <__ssputs_r+0x58>
 8004bae:	462a      	mov	r2, r5
 8004bb0:	f000 fb54 	bl	800525c <_realloc_r>
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d1e2      	bne.n	8004b80 <__ssputs_r+0x70>
 8004bba:	6921      	ldr	r1, [r4, #16]
 8004bbc:	4650      	mov	r0, sl
 8004bbe:	f000 faa5 	bl	800510c <_free_r>
 8004bc2:	e7c8      	b.n	8004b56 <__ssputs_r+0x46>

08004bc4 <_svfiprintf_r>:
 8004bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc8:	461d      	mov	r5, r3
 8004bca:	898b      	ldrh	r3, [r1, #12]
 8004bcc:	061f      	lsls	r7, r3, #24
 8004bce:	b09d      	sub	sp, #116	; 0x74
 8004bd0:	4680      	mov	r8, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	d50f      	bpl.n	8004bf8 <_svfiprintf_r+0x34>
 8004bd8:	690b      	ldr	r3, [r1, #16]
 8004bda:	b96b      	cbnz	r3, 8004bf8 <_svfiprintf_r+0x34>
 8004bdc:	2140      	movs	r1, #64	; 0x40
 8004bde:	f000 fae3 	bl	80051a8 <_malloc_r>
 8004be2:	6020      	str	r0, [r4, #0]
 8004be4:	6120      	str	r0, [r4, #16]
 8004be6:	b928      	cbnz	r0, 8004bf4 <_svfiprintf_r+0x30>
 8004be8:	230c      	movs	r3, #12
 8004bea:	f8c8 3000 	str.w	r3, [r8]
 8004bee:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf2:	e0c8      	b.n	8004d86 <_svfiprintf_r+0x1c2>
 8004bf4:	2340      	movs	r3, #64	; 0x40
 8004bf6:	6163      	str	r3, [r4, #20]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004bfc:	2320      	movs	r3, #32
 8004bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c02:	2330      	movs	r3, #48	; 0x30
 8004c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c08:	9503      	str	r5, [sp, #12]
 8004c0a:	f04f 0b01 	mov.w	fp, #1
 8004c0e:	4637      	mov	r7, r6
 8004c10:	463d      	mov	r5, r7
 8004c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c16:	b10b      	cbz	r3, 8004c1c <_svfiprintf_r+0x58>
 8004c18:	2b25      	cmp	r3, #37	; 0x25
 8004c1a:	d13e      	bne.n	8004c9a <_svfiprintf_r+0xd6>
 8004c1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004c20:	d00b      	beq.n	8004c3a <_svfiprintf_r+0x76>
 8004c22:	4653      	mov	r3, sl
 8004c24:	4632      	mov	r2, r6
 8004c26:	4621      	mov	r1, r4
 8004c28:	4640      	mov	r0, r8
 8004c2a:	f7ff ff71 	bl	8004b10 <__ssputs_r>
 8004c2e:	3001      	adds	r0, #1
 8004c30:	f000 80a4 	beq.w	8004d7c <_svfiprintf_r+0x1b8>
 8004c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c36:	4453      	add	r3, sl
 8004c38:	9309      	str	r3, [sp, #36]	; 0x24
 8004c3a:	783b      	ldrb	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 809d 	beq.w	8004d7c <_svfiprintf_r+0x1b8>
 8004c42:	2300      	movs	r3, #0
 8004c44:	f04f 32ff 	mov.w	r2, #4294967295
 8004c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c4c:	9304      	str	r3, [sp, #16]
 8004c4e:	9307      	str	r3, [sp, #28]
 8004c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c54:	931a      	str	r3, [sp, #104]	; 0x68
 8004c56:	462f      	mov	r7, r5
 8004c58:	2205      	movs	r2, #5
 8004c5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004c5e:	4850      	ldr	r0, [pc, #320]	; (8004da0 <_svfiprintf_r+0x1dc>)
 8004c60:	f7fb fa96 	bl	8000190 <memchr>
 8004c64:	9b04      	ldr	r3, [sp, #16]
 8004c66:	b9d0      	cbnz	r0, 8004c9e <_svfiprintf_r+0xda>
 8004c68:	06d9      	lsls	r1, r3, #27
 8004c6a:	bf44      	itt	mi
 8004c6c:	2220      	movmi	r2, #32
 8004c6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c72:	071a      	lsls	r2, r3, #28
 8004c74:	bf44      	itt	mi
 8004c76:	222b      	movmi	r2, #43	; 0x2b
 8004c78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c7c:	782a      	ldrb	r2, [r5, #0]
 8004c7e:	2a2a      	cmp	r2, #42	; 0x2a
 8004c80:	d015      	beq.n	8004cae <_svfiprintf_r+0xea>
 8004c82:	9a07      	ldr	r2, [sp, #28]
 8004c84:	462f      	mov	r7, r5
 8004c86:	2000      	movs	r0, #0
 8004c88:	250a      	movs	r5, #10
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c90:	3b30      	subs	r3, #48	; 0x30
 8004c92:	2b09      	cmp	r3, #9
 8004c94:	d94d      	bls.n	8004d32 <_svfiprintf_r+0x16e>
 8004c96:	b1b8      	cbz	r0, 8004cc8 <_svfiprintf_r+0x104>
 8004c98:	e00f      	b.n	8004cba <_svfiprintf_r+0xf6>
 8004c9a:	462f      	mov	r7, r5
 8004c9c:	e7b8      	b.n	8004c10 <_svfiprintf_r+0x4c>
 8004c9e:	4a40      	ldr	r2, [pc, #256]	; (8004da0 <_svfiprintf_r+0x1dc>)
 8004ca0:	1a80      	subs	r0, r0, r2
 8004ca2:	fa0b f000 	lsl.w	r0, fp, r0
 8004ca6:	4318      	orrs	r0, r3
 8004ca8:	9004      	str	r0, [sp, #16]
 8004caa:	463d      	mov	r5, r7
 8004cac:	e7d3      	b.n	8004c56 <_svfiprintf_r+0x92>
 8004cae:	9a03      	ldr	r2, [sp, #12]
 8004cb0:	1d11      	adds	r1, r2, #4
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	9103      	str	r1, [sp, #12]
 8004cb6:	2a00      	cmp	r2, #0
 8004cb8:	db01      	blt.n	8004cbe <_svfiprintf_r+0xfa>
 8004cba:	9207      	str	r2, [sp, #28]
 8004cbc:	e004      	b.n	8004cc8 <_svfiprintf_r+0x104>
 8004cbe:	4252      	negs	r2, r2
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	9207      	str	r2, [sp, #28]
 8004cc6:	9304      	str	r3, [sp, #16]
 8004cc8:	783b      	ldrb	r3, [r7, #0]
 8004cca:	2b2e      	cmp	r3, #46	; 0x2e
 8004ccc:	d10c      	bne.n	8004ce8 <_svfiprintf_r+0x124>
 8004cce:	787b      	ldrb	r3, [r7, #1]
 8004cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd2:	d133      	bne.n	8004d3c <_svfiprintf_r+0x178>
 8004cd4:	9b03      	ldr	r3, [sp, #12]
 8004cd6:	1d1a      	adds	r2, r3, #4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	9203      	str	r2, [sp, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bfb8      	it	lt
 8004ce0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ce4:	3702      	adds	r7, #2
 8004ce6:	9305      	str	r3, [sp, #20]
 8004ce8:	4d2e      	ldr	r5, [pc, #184]	; (8004da4 <_svfiprintf_r+0x1e0>)
 8004cea:	7839      	ldrb	r1, [r7, #0]
 8004cec:	2203      	movs	r2, #3
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f7fb fa4e 	bl	8000190 <memchr>
 8004cf4:	b138      	cbz	r0, 8004d06 <_svfiprintf_r+0x142>
 8004cf6:	2340      	movs	r3, #64	; 0x40
 8004cf8:	1b40      	subs	r0, r0, r5
 8004cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8004cfe:	9b04      	ldr	r3, [sp, #16]
 8004d00:	4303      	orrs	r3, r0
 8004d02:	3701      	adds	r7, #1
 8004d04:	9304      	str	r3, [sp, #16]
 8004d06:	7839      	ldrb	r1, [r7, #0]
 8004d08:	4827      	ldr	r0, [pc, #156]	; (8004da8 <_svfiprintf_r+0x1e4>)
 8004d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d0e:	2206      	movs	r2, #6
 8004d10:	1c7e      	adds	r6, r7, #1
 8004d12:	f7fb fa3d 	bl	8000190 <memchr>
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d038      	beq.n	8004d8c <_svfiprintf_r+0x1c8>
 8004d1a:	4b24      	ldr	r3, [pc, #144]	; (8004dac <_svfiprintf_r+0x1e8>)
 8004d1c:	bb13      	cbnz	r3, 8004d64 <_svfiprintf_r+0x1a0>
 8004d1e:	9b03      	ldr	r3, [sp, #12]
 8004d20:	3307      	adds	r3, #7
 8004d22:	f023 0307 	bic.w	r3, r3, #7
 8004d26:	3308      	adds	r3, #8
 8004d28:	9303      	str	r3, [sp, #12]
 8004d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d2c:	444b      	add	r3, r9
 8004d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d30:	e76d      	b.n	8004c0e <_svfiprintf_r+0x4a>
 8004d32:	fb05 3202 	mla	r2, r5, r2, r3
 8004d36:	2001      	movs	r0, #1
 8004d38:	460f      	mov	r7, r1
 8004d3a:	e7a6      	b.n	8004c8a <_svfiprintf_r+0xc6>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	3701      	adds	r7, #1
 8004d40:	9305      	str	r3, [sp, #20]
 8004d42:	4619      	mov	r1, r3
 8004d44:	250a      	movs	r5, #10
 8004d46:	4638      	mov	r0, r7
 8004d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d4c:	3a30      	subs	r2, #48	; 0x30
 8004d4e:	2a09      	cmp	r2, #9
 8004d50:	d903      	bls.n	8004d5a <_svfiprintf_r+0x196>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0c8      	beq.n	8004ce8 <_svfiprintf_r+0x124>
 8004d56:	9105      	str	r1, [sp, #20]
 8004d58:	e7c6      	b.n	8004ce8 <_svfiprintf_r+0x124>
 8004d5a:	fb05 2101 	mla	r1, r5, r1, r2
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4607      	mov	r7, r0
 8004d62:	e7f0      	b.n	8004d46 <_svfiprintf_r+0x182>
 8004d64:	ab03      	add	r3, sp, #12
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	4622      	mov	r2, r4
 8004d6a:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <_svfiprintf_r+0x1ec>)
 8004d6c:	a904      	add	r1, sp, #16
 8004d6e:	4640      	mov	r0, r8
 8004d70:	f3af 8000 	nop.w
 8004d74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d78:	4681      	mov	r9, r0
 8004d7a:	d1d6      	bne.n	8004d2a <_svfiprintf_r+0x166>
 8004d7c:	89a3      	ldrh	r3, [r4, #12]
 8004d7e:	065b      	lsls	r3, r3, #25
 8004d80:	f53f af35 	bmi.w	8004bee <_svfiprintf_r+0x2a>
 8004d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d86:	b01d      	add	sp, #116	; 0x74
 8004d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8c:	ab03      	add	r3, sp, #12
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	4622      	mov	r2, r4
 8004d92:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <_svfiprintf_r+0x1ec>)
 8004d94:	a904      	add	r1, sp, #16
 8004d96:	4640      	mov	r0, r8
 8004d98:	f000 f882 	bl	8004ea0 <_printf_i>
 8004d9c:	e7ea      	b.n	8004d74 <_svfiprintf_r+0x1b0>
 8004d9e:	bf00      	nop
 8004da0:	08005404 	.word	0x08005404
 8004da4:	0800540a 	.word	0x0800540a
 8004da8:	0800540e 	.word	0x0800540e
 8004dac:	00000000 	.word	0x00000000
 8004db0:	08004b11 	.word	0x08004b11

08004db4 <_printf_common>:
 8004db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	4691      	mov	r9, r2
 8004dba:	461f      	mov	r7, r3
 8004dbc:	688a      	ldr	r2, [r1, #8]
 8004dbe:	690b      	ldr	r3, [r1, #16]
 8004dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bfb8      	it	lt
 8004dc8:	4613      	movlt	r3, r2
 8004dca:	f8c9 3000 	str.w	r3, [r9]
 8004dce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	b112      	cbz	r2, 8004dde <_printf_common+0x2a>
 8004dd8:	3301      	adds	r3, #1
 8004dda:	f8c9 3000 	str.w	r3, [r9]
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	0699      	lsls	r1, r3, #26
 8004de2:	bf42      	ittt	mi
 8004de4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004de8:	3302      	addmi	r3, #2
 8004dea:	f8c9 3000 	strmi.w	r3, [r9]
 8004dee:	6825      	ldr	r5, [r4, #0]
 8004df0:	f015 0506 	ands.w	r5, r5, #6
 8004df4:	d107      	bne.n	8004e06 <_printf_common+0x52>
 8004df6:	f104 0a19 	add.w	sl, r4, #25
 8004dfa:	68e3      	ldr	r3, [r4, #12]
 8004dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	42ab      	cmp	r3, r5
 8004e04:	dc28      	bgt.n	8004e58 <_printf_common+0xa4>
 8004e06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e0a:	6822      	ldr	r2, [r4, #0]
 8004e0c:	3300      	adds	r3, #0
 8004e0e:	bf18      	it	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	0692      	lsls	r2, r2, #26
 8004e14:	d42d      	bmi.n	8004e72 <_printf_common+0xbe>
 8004e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	47c0      	blx	r8
 8004e20:	3001      	adds	r0, #1
 8004e22:	d020      	beq.n	8004e66 <_printf_common+0xb2>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	68e5      	ldr	r5, [r4, #12]
 8004e28:	f8d9 2000 	ldr.w	r2, [r9]
 8004e2c:	f003 0306 	and.w	r3, r3, #6
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	bf08      	it	eq
 8004e34:	1aad      	subeq	r5, r5, r2
 8004e36:	68a3      	ldr	r3, [r4, #8]
 8004e38:	6922      	ldr	r2, [r4, #16]
 8004e3a:	bf0c      	ite	eq
 8004e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e40:	2500      	movne	r5, #0
 8004e42:	4293      	cmp	r3, r2
 8004e44:	bfc4      	itt	gt
 8004e46:	1a9b      	subgt	r3, r3, r2
 8004e48:	18ed      	addgt	r5, r5, r3
 8004e4a:	f04f 0900 	mov.w	r9, #0
 8004e4e:	341a      	adds	r4, #26
 8004e50:	454d      	cmp	r5, r9
 8004e52:	d11a      	bne.n	8004e8a <_printf_common+0xd6>
 8004e54:	2000      	movs	r0, #0
 8004e56:	e008      	b.n	8004e6a <_printf_common+0xb6>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4652      	mov	r2, sl
 8004e5c:	4639      	mov	r1, r7
 8004e5e:	4630      	mov	r0, r6
 8004e60:	47c0      	blx	r8
 8004e62:	3001      	adds	r0, #1
 8004e64:	d103      	bne.n	8004e6e <_printf_common+0xba>
 8004e66:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6e:	3501      	adds	r5, #1
 8004e70:	e7c3      	b.n	8004dfa <_printf_common+0x46>
 8004e72:	18e1      	adds	r1, r4, r3
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	2030      	movs	r0, #48	; 0x30
 8004e78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e7c:	4422      	add	r2, r4
 8004e7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e86:	3302      	adds	r3, #2
 8004e88:	e7c5      	b.n	8004e16 <_printf_common+0x62>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	4639      	mov	r1, r7
 8004e90:	4630      	mov	r0, r6
 8004e92:	47c0      	blx	r8
 8004e94:	3001      	adds	r0, #1
 8004e96:	d0e6      	beq.n	8004e66 <_printf_common+0xb2>
 8004e98:	f109 0901 	add.w	r9, r9, #1
 8004e9c:	e7d8      	b.n	8004e50 <_printf_common+0x9c>
	...

08004ea0 <_printf_i>:
 8004ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ea4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	7e09      	ldrb	r1, [r1, #24]
 8004eac:	b085      	sub	sp, #20
 8004eae:	296e      	cmp	r1, #110	; 0x6e
 8004eb0:	4617      	mov	r7, r2
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	4698      	mov	r8, r3
 8004eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004eb8:	f000 80b3 	beq.w	8005022 <_printf_i+0x182>
 8004ebc:	d822      	bhi.n	8004f04 <_printf_i+0x64>
 8004ebe:	2963      	cmp	r1, #99	; 0x63
 8004ec0:	d036      	beq.n	8004f30 <_printf_i+0x90>
 8004ec2:	d80a      	bhi.n	8004eda <_printf_i+0x3a>
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	f000 80b9 	beq.w	800503c <_printf_i+0x19c>
 8004eca:	2958      	cmp	r1, #88	; 0x58
 8004ecc:	f000 8083 	beq.w	8004fd6 <_printf_i+0x136>
 8004ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ed4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ed8:	e032      	b.n	8004f40 <_printf_i+0xa0>
 8004eda:	2964      	cmp	r1, #100	; 0x64
 8004edc:	d001      	beq.n	8004ee2 <_printf_i+0x42>
 8004ede:	2969      	cmp	r1, #105	; 0x69
 8004ee0:	d1f6      	bne.n	8004ed0 <_printf_i+0x30>
 8004ee2:	6820      	ldr	r0, [r4, #0]
 8004ee4:	6813      	ldr	r3, [r2, #0]
 8004ee6:	0605      	lsls	r5, r0, #24
 8004ee8:	f103 0104 	add.w	r1, r3, #4
 8004eec:	d52a      	bpl.n	8004f44 <_printf_i+0xa4>
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6011      	str	r1, [r2, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	da03      	bge.n	8004efe <_printf_i+0x5e>
 8004ef6:	222d      	movs	r2, #45	; 0x2d
 8004ef8:	425b      	negs	r3, r3
 8004efa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004efe:	486f      	ldr	r0, [pc, #444]	; (80050bc <_printf_i+0x21c>)
 8004f00:	220a      	movs	r2, #10
 8004f02:	e039      	b.n	8004f78 <_printf_i+0xd8>
 8004f04:	2973      	cmp	r1, #115	; 0x73
 8004f06:	f000 809d 	beq.w	8005044 <_printf_i+0x1a4>
 8004f0a:	d808      	bhi.n	8004f1e <_printf_i+0x7e>
 8004f0c:	296f      	cmp	r1, #111	; 0x6f
 8004f0e:	d020      	beq.n	8004f52 <_printf_i+0xb2>
 8004f10:	2970      	cmp	r1, #112	; 0x70
 8004f12:	d1dd      	bne.n	8004ed0 <_printf_i+0x30>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	f043 0320 	orr.w	r3, r3, #32
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	e003      	b.n	8004f26 <_printf_i+0x86>
 8004f1e:	2975      	cmp	r1, #117	; 0x75
 8004f20:	d017      	beq.n	8004f52 <_printf_i+0xb2>
 8004f22:	2978      	cmp	r1, #120	; 0x78
 8004f24:	d1d4      	bne.n	8004ed0 <_printf_i+0x30>
 8004f26:	2378      	movs	r3, #120	; 0x78
 8004f28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f2c:	4864      	ldr	r0, [pc, #400]	; (80050c0 <_printf_i+0x220>)
 8004f2e:	e055      	b.n	8004fdc <_printf_i+0x13c>
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	1d19      	adds	r1, r3, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6011      	str	r1, [r2, #0]
 8004f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f40:	2301      	movs	r3, #1
 8004f42:	e08c      	b.n	800505e <_printf_i+0x1be>
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6011      	str	r1, [r2, #0]
 8004f48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f4c:	bf18      	it	ne
 8004f4e:	b21b      	sxthne	r3, r3
 8004f50:	e7cf      	b.n	8004ef2 <_printf_i+0x52>
 8004f52:	6813      	ldr	r3, [r2, #0]
 8004f54:	6825      	ldr	r5, [r4, #0]
 8004f56:	1d18      	adds	r0, r3, #4
 8004f58:	6010      	str	r0, [r2, #0]
 8004f5a:	0628      	lsls	r0, r5, #24
 8004f5c:	d501      	bpl.n	8004f62 <_printf_i+0xc2>
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	e002      	b.n	8004f68 <_printf_i+0xc8>
 8004f62:	0668      	lsls	r0, r5, #25
 8004f64:	d5fb      	bpl.n	8004f5e <_printf_i+0xbe>
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	4854      	ldr	r0, [pc, #336]	; (80050bc <_printf_i+0x21c>)
 8004f6a:	296f      	cmp	r1, #111	; 0x6f
 8004f6c:	bf14      	ite	ne
 8004f6e:	220a      	movne	r2, #10
 8004f70:	2208      	moveq	r2, #8
 8004f72:	2100      	movs	r1, #0
 8004f74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f78:	6865      	ldr	r5, [r4, #4]
 8004f7a:	60a5      	str	r5, [r4, #8]
 8004f7c:	2d00      	cmp	r5, #0
 8004f7e:	f2c0 8095 	blt.w	80050ac <_printf_i+0x20c>
 8004f82:	6821      	ldr	r1, [r4, #0]
 8004f84:	f021 0104 	bic.w	r1, r1, #4
 8004f88:	6021      	str	r1, [r4, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d13d      	bne.n	800500a <_printf_i+0x16a>
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	f040 808e 	bne.w	80050b0 <_printf_i+0x210>
 8004f94:	4665      	mov	r5, ip
 8004f96:	2a08      	cmp	r2, #8
 8004f98:	d10b      	bne.n	8004fb2 <_printf_i+0x112>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	07db      	lsls	r3, r3, #31
 8004f9e:	d508      	bpl.n	8004fb2 <_printf_i+0x112>
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	6862      	ldr	r2, [r4, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	bfde      	ittt	le
 8004fa8:	2330      	movle	r3, #48	; 0x30
 8004faa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fb2:	ebac 0305 	sub.w	r3, ip, r5
 8004fb6:	6123      	str	r3, [r4, #16]
 8004fb8:	f8cd 8000 	str.w	r8, [sp]
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	aa03      	add	r2, sp, #12
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	f7ff fef6 	bl	8004db4 <_printf_common>
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d14d      	bne.n	8005068 <_printf_i+0x1c8>
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	b005      	add	sp, #20
 8004fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fd6:	4839      	ldr	r0, [pc, #228]	; (80050bc <_printf_i+0x21c>)
 8004fd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004fdc:	6813      	ldr	r3, [r2, #0]
 8004fde:	6821      	ldr	r1, [r4, #0]
 8004fe0:	1d1d      	adds	r5, r3, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6015      	str	r5, [r2, #0]
 8004fe6:	060a      	lsls	r2, r1, #24
 8004fe8:	d50b      	bpl.n	8005002 <_printf_i+0x162>
 8004fea:	07ca      	lsls	r2, r1, #31
 8004fec:	bf44      	itt	mi
 8004fee:	f041 0120 	orrmi.w	r1, r1, #32
 8004ff2:	6021      	strmi	r1, [r4, #0]
 8004ff4:	b91b      	cbnz	r3, 8004ffe <_printf_i+0x15e>
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	f022 0220 	bic.w	r2, r2, #32
 8004ffc:	6022      	str	r2, [r4, #0]
 8004ffe:	2210      	movs	r2, #16
 8005000:	e7b7      	b.n	8004f72 <_printf_i+0xd2>
 8005002:	064d      	lsls	r5, r1, #25
 8005004:	bf48      	it	mi
 8005006:	b29b      	uxthmi	r3, r3
 8005008:	e7ef      	b.n	8004fea <_printf_i+0x14a>
 800500a:	4665      	mov	r5, ip
 800500c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005010:	fb02 3311 	mls	r3, r2, r1, r3
 8005014:	5cc3      	ldrb	r3, [r0, r3]
 8005016:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800501a:	460b      	mov	r3, r1
 800501c:	2900      	cmp	r1, #0
 800501e:	d1f5      	bne.n	800500c <_printf_i+0x16c>
 8005020:	e7b9      	b.n	8004f96 <_printf_i+0xf6>
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	6825      	ldr	r5, [r4, #0]
 8005026:	6961      	ldr	r1, [r4, #20]
 8005028:	1d18      	adds	r0, r3, #4
 800502a:	6010      	str	r0, [r2, #0]
 800502c:	0628      	lsls	r0, r5, #24
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	d501      	bpl.n	8005036 <_printf_i+0x196>
 8005032:	6019      	str	r1, [r3, #0]
 8005034:	e002      	b.n	800503c <_printf_i+0x19c>
 8005036:	066a      	lsls	r2, r5, #25
 8005038:	d5fb      	bpl.n	8005032 <_printf_i+0x192>
 800503a:	8019      	strh	r1, [r3, #0]
 800503c:	2300      	movs	r3, #0
 800503e:	6123      	str	r3, [r4, #16]
 8005040:	4665      	mov	r5, ip
 8005042:	e7b9      	b.n	8004fb8 <_printf_i+0x118>
 8005044:	6813      	ldr	r3, [r2, #0]
 8005046:	1d19      	adds	r1, r3, #4
 8005048:	6011      	str	r1, [r2, #0]
 800504a:	681d      	ldr	r5, [r3, #0]
 800504c:	6862      	ldr	r2, [r4, #4]
 800504e:	2100      	movs	r1, #0
 8005050:	4628      	mov	r0, r5
 8005052:	f7fb f89d 	bl	8000190 <memchr>
 8005056:	b108      	cbz	r0, 800505c <_printf_i+0x1bc>
 8005058:	1b40      	subs	r0, r0, r5
 800505a:	6060      	str	r0, [r4, #4]
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	2300      	movs	r3, #0
 8005062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005066:	e7a7      	b.n	8004fb8 <_printf_i+0x118>
 8005068:	6923      	ldr	r3, [r4, #16]
 800506a:	462a      	mov	r2, r5
 800506c:	4639      	mov	r1, r7
 800506e:	4630      	mov	r0, r6
 8005070:	47c0      	blx	r8
 8005072:	3001      	adds	r0, #1
 8005074:	d0aa      	beq.n	8004fcc <_printf_i+0x12c>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	079b      	lsls	r3, r3, #30
 800507a:	d413      	bmi.n	80050a4 <_printf_i+0x204>
 800507c:	68e0      	ldr	r0, [r4, #12]
 800507e:	9b03      	ldr	r3, [sp, #12]
 8005080:	4298      	cmp	r0, r3
 8005082:	bfb8      	it	lt
 8005084:	4618      	movlt	r0, r3
 8005086:	e7a3      	b.n	8004fd0 <_printf_i+0x130>
 8005088:	2301      	movs	r3, #1
 800508a:	464a      	mov	r2, r9
 800508c:	4639      	mov	r1, r7
 800508e:	4630      	mov	r0, r6
 8005090:	47c0      	blx	r8
 8005092:	3001      	adds	r0, #1
 8005094:	d09a      	beq.n	8004fcc <_printf_i+0x12c>
 8005096:	3501      	adds	r5, #1
 8005098:	68e3      	ldr	r3, [r4, #12]
 800509a:	9a03      	ldr	r2, [sp, #12]
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	42ab      	cmp	r3, r5
 80050a0:	dcf2      	bgt.n	8005088 <_printf_i+0x1e8>
 80050a2:	e7eb      	b.n	800507c <_printf_i+0x1dc>
 80050a4:	2500      	movs	r5, #0
 80050a6:	f104 0919 	add.w	r9, r4, #25
 80050aa:	e7f5      	b.n	8005098 <_printf_i+0x1f8>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1ac      	bne.n	800500a <_printf_i+0x16a>
 80050b0:	7803      	ldrb	r3, [r0, #0]
 80050b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ba:	e76c      	b.n	8004f96 <_printf_i+0xf6>
 80050bc:	08005415 	.word	0x08005415
 80050c0:	08005426 	.word	0x08005426

080050c4 <memcpy>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	1e43      	subs	r3, r0, #1
 80050c8:	440a      	add	r2, r1
 80050ca:	4291      	cmp	r1, r2
 80050cc:	d100      	bne.n	80050d0 <memcpy+0xc>
 80050ce:	bd10      	pop	{r4, pc}
 80050d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d8:	e7f7      	b.n	80050ca <memcpy+0x6>

080050da <memmove>:
 80050da:	4288      	cmp	r0, r1
 80050dc:	b510      	push	{r4, lr}
 80050de:	eb01 0302 	add.w	r3, r1, r2
 80050e2:	d807      	bhi.n	80050f4 <memmove+0x1a>
 80050e4:	1e42      	subs	r2, r0, #1
 80050e6:	4299      	cmp	r1, r3
 80050e8:	d00a      	beq.n	8005100 <memmove+0x26>
 80050ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80050f2:	e7f8      	b.n	80050e6 <memmove+0xc>
 80050f4:	4283      	cmp	r3, r0
 80050f6:	d9f5      	bls.n	80050e4 <memmove+0xa>
 80050f8:	1881      	adds	r1, r0, r2
 80050fa:	1ad2      	subs	r2, r2, r3
 80050fc:	42d3      	cmn	r3, r2
 80050fe:	d100      	bne.n	8005102 <memmove+0x28>
 8005100:	bd10      	pop	{r4, pc}
 8005102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005106:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800510a:	e7f7      	b.n	80050fc <memmove+0x22>

0800510c <_free_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4605      	mov	r5, r0
 8005110:	2900      	cmp	r1, #0
 8005112:	d045      	beq.n	80051a0 <_free_r+0x94>
 8005114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005118:	1f0c      	subs	r4, r1, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	bfb8      	it	lt
 800511e:	18e4      	addlt	r4, r4, r3
 8005120:	f000 f8d2 	bl	80052c8 <__malloc_lock>
 8005124:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <_free_r+0x98>)
 8005126:	6813      	ldr	r3, [r2, #0]
 8005128:	4610      	mov	r0, r2
 800512a:	b933      	cbnz	r3, 800513a <_free_r+0x2e>
 800512c:	6063      	str	r3, [r4, #4]
 800512e:	6014      	str	r4, [r2, #0]
 8005130:	4628      	mov	r0, r5
 8005132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005136:	f000 b8c8 	b.w	80052ca <__malloc_unlock>
 800513a:	42a3      	cmp	r3, r4
 800513c:	d90c      	bls.n	8005158 <_free_r+0x4c>
 800513e:	6821      	ldr	r1, [r4, #0]
 8005140:	1862      	adds	r2, r4, r1
 8005142:	4293      	cmp	r3, r2
 8005144:	bf04      	itt	eq
 8005146:	681a      	ldreq	r2, [r3, #0]
 8005148:	685b      	ldreq	r3, [r3, #4]
 800514a:	6063      	str	r3, [r4, #4]
 800514c:	bf04      	itt	eq
 800514e:	1852      	addeq	r2, r2, r1
 8005150:	6022      	streq	r2, [r4, #0]
 8005152:	6004      	str	r4, [r0, #0]
 8005154:	e7ec      	b.n	8005130 <_free_r+0x24>
 8005156:	4613      	mov	r3, r2
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	b10a      	cbz	r2, 8005160 <_free_r+0x54>
 800515c:	42a2      	cmp	r2, r4
 800515e:	d9fa      	bls.n	8005156 <_free_r+0x4a>
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	1858      	adds	r0, r3, r1
 8005164:	42a0      	cmp	r0, r4
 8005166:	d10b      	bne.n	8005180 <_free_r+0x74>
 8005168:	6820      	ldr	r0, [r4, #0]
 800516a:	4401      	add	r1, r0
 800516c:	1858      	adds	r0, r3, r1
 800516e:	4282      	cmp	r2, r0
 8005170:	6019      	str	r1, [r3, #0]
 8005172:	d1dd      	bne.n	8005130 <_free_r+0x24>
 8005174:	6810      	ldr	r0, [r2, #0]
 8005176:	6852      	ldr	r2, [r2, #4]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	4401      	add	r1, r0
 800517c:	6019      	str	r1, [r3, #0]
 800517e:	e7d7      	b.n	8005130 <_free_r+0x24>
 8005180:	d902      	bls.n	8005188 <_free_r+0x7c>
 8005182:	230c      	movs	r3, #12
 8005184:	602b      	str	r3, [r5, #0]
 8005186:	e7d3      	b.n	8005130 <_free_r+0x24>
 8005188:	6820      	ldr	r0, [r4, #0]
 800518a:	1821      	adds	r1, r4, r0
 800518c:	428a      	cmp	r2, r1
 800518e:	bf04      	itt	eq
 8005190:	6811      	ldreq	r1, [r2, #0]
 8005192:	6852      	ldreq	r2, [r2, #4]
 8005194:	6062      	str	r2, [r4, #4]
 8005196:	bf04      	itt	eq
 8005198:	1809      	addeq	r1, r1, r0
 800519a:	6021      	streq	r1, [r4, #0]
 800519c:	605c      	str	r4, [r3, #4]
 800519e:	e7c7      	b.n	8005130 <_free_r+0x24>
 80051a0:	bd38      	pop	{r3, r4, r5, pc}
 80051a2:	bf00      	nop
 80051a4:	2000009c 	.word	0x2000009c

080051a8 <_malloc_r>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	1ccd      	adds	r5, r1, #3
 80051ac:	f025 0503 	bic.w	r5, r5, #3
 80051b0:	3508      	adds	r5, #8
 80051b2:	2d0c      	cmp	r5, #12
 80051b4:	bf38      	it	cc
 80051b6:	250c      	movcc	r5, #12
 80051b8:	2d00      	cmp	r5, #0
 80051ba:	4606      	mov	r6, r0
 80051bc:	db01      	blt.n	80051c2 <_malloc_r+0x1a>
 80051be:	42a9      	cmp	r1, r5
 80051c0:	d903      	bls.n	80051ca <_malloc_r+0x22>
 80051c2:	230c      	movs	r3, #12
 80051c4:	6033      	str	r3, [r6, #0]
 80051c6:	2000      	movs	r0, #0
 80051c8:	bd70      	pop	{r4, r5, r6, pc}
 80051ca:	f000 f87d 	bl	80052c8 <__malloc_lock>
 80051ce:	4a21      	ldr	r2, [pc, #132]	; (8005254 <_malloc_r+0xac>)
 80051d0:	6814      	ldr	r4, [r2, #0]
 80051d2:	4621      	mov	r1, r4
 80051d4:	b991      	cbnz	r1, 80051fc <_malloc_r+0x54>
 80051d6:	4c20      	ldr	r4, [pc, #128]	; (8005258 <_malloc_r+0xb0>)
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	b91b      	cbnz	r3, 80051e4 <_malloc_r+0x3c>
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 f863 	bl	80052a8 <_sbrk_r>
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	4629      	mov	r1, r5
 80051e6:	4630      	mov	r0, r6
 80051e8:	f000 f85e 	bl	80052a8 <_sbrk_r>
 80051ec:	1c43      	adds	r3, r0, #1
 80051ee:	d124      	bne.n	800523a <_malloc_r+0x92>
 80051f0:	230c      	movs	r3, #12
 80051f2:	6033      	str	r3, [r6, #0]
 80051f4:	4630      	mov	r0, r6
 80051f6:	f000 f868 	bl	80052ca <__malloc_unlock>
 80051fa:	e7e4      	b.n	80051c6 <_malloc_r+0x1e>
 80051fc:	680b      	ldr	r3, [r1, #0]
 80051fe:	1b5b      	subs	r3, r3, r5
 8005200:	d418      	bmi.n	8005234 <_malloc_r+0x8c>
 8005202:	2b0b      	cmp	r3, #11
 8005204:	d90f      	bls.n	8005226 <_malloc_r+0x7e>
 8005206:	600b      	str	r3, [r1, #0]
 8005208:	50cd      	str	r5, [r1, r3]
 800520a:	18cc      	adds	r4, r1, r3
 800520c:	4630      	mov	r0, r6
 800520e:	f000 f85c 	bl	80052ca <__malloc_unlock>
 8005212:	f104 000b 	add.w	r0, r4, #11
 8005216:	1d23      	adds	r3, r4, #4
 8005218:	f020 0007 	bic.w	r0, r0, #7
 800521c:	1ac3      	subs	r3, r0, r3
 800521e:	d0d3      	beq.n	80051c8 <_malloc_r+0x20>
 8005220:	425a      	negs	r2, r3
 8005222:	50e2      	str	r2, [r4, r3]
 8005224:	e7d0      	b.n	80051c8 <_malloc_r+0x20>
 8005226:	428c      	cmp	r4, r1
 8005228:	684b      	ldr	r3, [r1, #4]
 800522a:	bf16      	itet	ne
 800522c:	6063      	strne	r3, [r4, #4]
 800522e:	6013      	streq	r3, [r2, #0]
 8005230:	460c      	movne	r4, r1
 8005232:	e7eb      	b.n	800520c <_malloc_r+0x64>
 8005234:	460c      	mov	r4, r1
 8005236:	6849      	ldr	r1, [r1, #4]
 8005238:	e7cc      	b.n	80051d4 <_malloc_r+0x2c>
 800523a:	1cc4      	adds	r4, r0, #3
 800523c:	f024 0403 	bic.w	r4, r4, #3
 8005240:	42a0      	cmp	r0, r4
 8005242:	d005      	beq.n	8005250 <_malloc_r+0xa8>
 8005244:	1a21      	subs	r1, r4, r0
 8005246:	4630      	mov	r0, r6
 8005248:	f000 f82e 	bl	80052a8 <_sbrk_r>
 800524c:	3001      	adds	r0, #1
 800524e:	d0cf      	beq.n	80051f0 <_malloc_r+0x48>
 8005250:	6025      	str	r5, [r4, #0]
 8005252:	e7db      	b.n	800520c <_malloc_r+0x64>
 8005254:	2000009c 	.word	0x2000009c
 8005258:	200000a0 	.word	0x200000a0

0800525c <_realloc_r>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	4607      	mov	r7, r0
 8005260:	4614      	mov	r4, r2
 8005262:	460e      	mov	r6, r1
 8005264:	b921      	cbnz	r1, 8005270 <_realloc_r+0x14>
 8005266:	4611      	mov	r1, r2
 8005268:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800526c:	f7ff bf9c 	b.w	80051a8 <_malloc_r>
 8005270:	b922      	cbnz	r2, 800527c <_realloc_r+0x20>
 8005272:	f7ff ff4b 	bl	800510c <_free_r>
 8005276:	4625      	mov	r5, r4
 8005278:	4628      	mov	r0, r5
 800527a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800527c:	f000 f826 	bl	80052cc <_malloc_usable_size_r>
 8005280:	42a0      	cmp	r0, r4
 8005282:	d20f      	bcs.n	80052a4 <_realloc_r+0x48>
 8005284:	4621      	mov	r1, r4
 8005286:	4638      	mov	r0, r7
 8005288:	f7ff ff8e 	bl	80051a8 <_malloc_r>
 800528c:	4605      	mov	r5, r0
 800528e:	2800      	cmp	r0, #0
 8005290:	d0f2      	beq.n	8005278 <_realloc_r+0x1c>
 8005292:	4631      	mov	r1, r6
 8005294:	4622      	mov	r2, r4
 8005296:	f7ff ff15 	bl	80050c4 <memcpy>
 800529a:	4631      	mov	r1, r6
 800529c:	4638      	mov	r0, r7
 800529e:	f7ff ff35 	bl	800510c <_free_r>
 80052a2:	e7e9      	b.n	8005278 <_realloc_r+0x1c>
 80052a4:	4635      	mov	r5, r6
 80052a6:	e7e7      	b.n	8005278 <_realloc_r+0x1c>

080052a8 <_sbrk_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4c06      	ldr	r4, [pc, #24]	; (80052c4 <_sbrk_r+0x1c>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4605      	mov	r5, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	f7fb fd60 	bl	8000d78 <_sbrk>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_sbrk_r+0x1a>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_sbrk_r+0x1a>
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	200003f4 	.word	0x200003f4

080052c8 <__malloc_lock>:
 80052c8:	4770      	bx	lr

080052ca <__malloc_unlock>:
 80052ca:	4770      	bx	lr

080052cc <_malloc_usable_size_r>:
 80052cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d0:	1f18      	subs	r0, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfbc      	itt	lt
 80052d6:	580b      	ldrlt	r3, [r1, r0]
 80052d8:	18c0      	addlt	r0, r0, r3
 80052da:	4770      	bx	lr

080052dc <_init>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr

080052e8 <_fini>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr
