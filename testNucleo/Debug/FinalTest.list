
FinalTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000773c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08007880  08007880  00017880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007c50  08007c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007c58  08007c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000004  08007c60  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  200001e0  08007e3c  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000588  08007e3c  00020588  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016863  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ce4  00000000  00000000  00036a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000018b8  00000000  00000000  00039758  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001760  00000000  00000000  0003b010  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00003e16  00000000  00000000  0003c770  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00010919  00000000  00000000  00040586  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000e6c54  00000000  00000000  00050e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00137af3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007354  00000000  00000000  00137b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08007864 	.word	0x08007864

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08007864 	.word	0x08007864

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e68:	f023 0218 	bic.w	r2, r3, #24
 8000e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <LL_LPM_EnableSleep+0x1c>)
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <LL_LPM_EnableSleep+0x1c>)
 8000ec2:	f023 0304 	bic.w	r3, r3, #4
 8000ec6:	6113      	str	r3, [r2, #16]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f000 fe15 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f8ff 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fa95 	bl	8001414 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000eea:	f000 fa1f 	bl	800132c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000eee:	f000 fa69 	bl	80013c4 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8000ef2:	f000 f9a9 	bl	8001248 <MX_I2C1_Init>
  MX_RF_Init();
 8000ef6:	f000 f9e7 	bl	80012c8 <MX_RF_Init>
  MX_RTC_Init();
 8000efa:	f000 f9ed 	bl	80012d8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  bufI2C[0] = 0xD0; // "id" register
 8000efe:	23d0      	movs	r3, #208	; 0xd0
 8000f00:	703b      	strb	r3, [r7, #0]
  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, bufI2C, 1, HAL_MAX_DELAY); //send 1 byte
 8000f02:	463a      	mov	r2, r7
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	21ec      	movs	r1, #236	; 0xec
 8000f0e:	486c      	ldr	r0, [pc, #432]	; (80010c0 <main+0x1e8>)
 8000f10:	f001 f9f4 	bl	80022fc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, BME_ADDR, bufI2C, 1, HAL_MAX_DELAY); //receive 1 byte
 8000f14:	463a      	mov	r2, r7
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	21ec      	movs	r1, #236	; 0xec
 8000f20:	4867      	ldr	r0, [pc, #412]	; (80010c0 <main+0x1e8>)
 8000f22:	f001 fadf 	bl	80024e4 <HAL_I2C_Master_Receive>
  HAL_UART_Transmit(&huart1, bufI2C, strlen((char*)bufI2C), HAL_MAX_DELAY);
 8000f26:	463b      	mov	r3, r7
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f929 	bl	8000180 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4639      	mov	r1, r7
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	4862      	ldr	r0, [pc, #392]	; (80010c4 <main+0x1ec>)
 8000f3a:	f003 fe9f 	bl	8004c7c <HAL_UART_Transmit>

  if(bufI2C[0] != 0x60){ // if the device id does not match expected
 8000f3e:	783b      	ldrb	r3, [r7, #0]
 8000f40:	2b60      	cmp	r3, #96	; 0x60
 8000f42:	d001      	beq.n	8000f48 <main+0x70>
  	  Error_Handler();
 8000f44:	f000 fb10 	bl	8001568 <Error_Handler>
  }

  bufI2C[0] = 0xF4; // "ctrl_meas" register
 8000f48:	23f4      	movs	r3, #244	; 0xf4
 8000f4a:	703b      	strb	r3, [r7, #0]
  bufI2C[1] = 0b001 << 5 | 0b11; // oversampling = 1 for temperature, normal mode
 8000f4c:	2323      	movs	r3, #35	; 0x23
 8000f4e:	707b      	strb	r3, [r7, #1]
  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, bufI2C, 2, HAL_MAX_DELAY); //send 2 bytes
 8000f50:	463a      	mov	r2, r7
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2302      	movs	r3, #2
 8000f5a:	21ec      	movs	r1, #236	; 0xec
 8000f5c:	4858      	ldr	r0, [pc, #352]	; (80010c0 <main+0x1e8>)
 8000f5e:	f001 f9cd 	bl	80022fc <HAL_I2C_Master_Transmit>

  bufI2C[0] = 0xF5; // "config" register
 8000f62:	23f5      	movs	r3, #245	; 0xf5
 8000f64:	703b      	strb	r3, [r7, #0]
  bufI2C[1] = 0b100 << 5; // 1 measure every 500ms
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	707b      	strb	r3, [r7, #1]
  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, bufI2C, 2, HAL_MAX_DELAY); //send 2 bytes
 8000f6a:	463a      	mov	r2, r7
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2302      	movs	r3, #2
 8000f74:	21ec      	movs	r1, #236	; 0xec
 8000f76:	4852      	ldr	r0, [pc, #328]	; (80010c0 <main+0x1e8>)
 8000f78:	f001 f9c0 	bl	80022fc <HAL_I2C_Master_Transmit>

  bufI2C[0] = 0x88; // "dig_Tx" registers
 8000f7c:	2388      	movs	r3, #136	; 0x88
 8000f7e:	703b      	strb	r3, [r7, #0]
  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, bufI2C, 1, HAL_MAX_DELAY); //send 1 bytes
 8000f80:	463a      	mov	r2, r7
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	21ec      	movs	r1, #236	; 0xec
 8000f8c:	484c      	ldr	r0, [pc, #304]	; (80010c0 <main+0x1e8>)
 8000f8e:	f001 f9b5 	bl	80022fc <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(&hi2c1, BME_ADDR, bufI2C, 6, HAL_MAX_DELAY); //receive 6 bytes
 8000f92:	463a      	mov	r2, r7
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	21ec      	movs	r1, #236	; 0xec
 8000f9e:	4848      	ldr	r0, [pc, #288]	; (80010c0 <main+0x1e8>)
 8000fa0:	f001 faa0 	bl	80024e4 <HAL_I2C_Master_Receive>
  dig_T1 = bufI2C[0] | (uint16_t)bufI2C[1] << 8;
 8000fa4:	783b      	ldrb	r3, [r7, #0]
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <main+0x1f0>)
 8000fb6:	801a      	strh	r2, [r3, #0]
  dig_T2 = bufI2C[2] | (uint16_t)bufI2C[3] << 8;
 8000fb8:	78bb      	ldrb	r3, [r7, #2]
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b41      	ldr	r3, [pc, #260]	; (80010cc <main+0x1f4>)
 8000fc8:	801a      	strh	r2, [r3, #0]
  dig_T3 = bufI2C[4] | (uint16_t)bufI2C[5] << 8;
 8000fca:	793b      	ldrb	r3, [r7, #4]
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	797b      	ldrb	r3, [r7, #5]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <main+0x1f8>)
 8000fda:	801a      	strh	r2, [r3, #0]

  strcpy((char*)bufUart, "INIT COMPLETED\r\n");
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4a3c      	ldr	r2, [pc, #240]	; (80010d4 <main+0x1fc>)
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	4615      	mov	r5, r2
 8000fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, bufUart, strlen((char*)bufUart), HAL_MAX_DELAY);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8c4 	bl	8000180 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f107 010c 	add.w	r1, r7, #12
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	482f      	ldr	r0, [pc, #188]	; (80010c4 <main+0x1ec>)
 8001006:	f003 fe39 	bl	8004c7c <HAL_UART_Transmit>
  while (1)
  {
	  //HAL_UART_Transmit(&huart1, "UnTourDePlus\r\n", 16, 50);
	  //HAL_UART_Transmit(&huart1, buf, 11, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  HAL_Delay(500);
 800100a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100e:	f000 fa87 	bl	8001520 <HAL_Delay>

	  bufI2C[0] = 0xFA; // temperature MSB register
 8001012:	23fa      	movs	r3, #250	; 0xfa
 8001014:	703b      	strb	r3, [r7, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, BME_ADDR, bufI2C, 1, HAL_MAX_DELAY); // send 1 byte
 8001016:	463a      	mov	r2, r7
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	21ec      	movs	r1, #236	; 0xec
 8001022:	4827      	ldr	r0, [pc, #156]	; (80010c0 <main+0x1e8>)
 8001024:	f001 f96a 	bl	80022fc <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, BME_ADDR, bufI2C, 3, HAL_MAX_DELAY); // receive 3 bytes
 8001028:	463a      	mov	r2, r7
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2303      	movs	r3, #3
 8001032:	21ec      	movs	r1, #236	; 0xec
 8001034:	4822      	ldr	r0, [pc, #136]	; (80010c0 <main+0x1e8>)
 8001036:	f001 fa55 	bl	80024e4 <HAL_I2C_Master_Receive>

	  adc_T = (int32_t)bufI2C[0] << 12 | (int32_t)bufI2C[1] << 4 | bufI2C[2] >> 4;
 800103a:	783b      	ldrb	r3, [r7, #0]
 800103c:	031a      	lsls	r2, r3, #12
 800103e:	787b      	ldrb	r3, [r7, #1]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	4313      	orrs	r3, r2
 8001044:	78ba      	ldrb	r2, [r7, #2]
 8001046:	0912      	lsrs	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	4313      	orrs	r3, r2
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
	  temperature = BME280_compensate_T(adc_T);
 800104e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001050:	f000 fa28 	bl	80014a4 <BME280_compensate_T>
 8001054:	6238      	str	r0, [r7, #32]
	  sprintf(bufUart, "%.2f\r\n", temperature/100.0);
 8001056:	6a38      	ldr	r0, [r7, #32]
 8001058:	f7ff fa3c 	bl	80004d4 <__aeabi_i2d>
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <main+0x200>)
 8001062:	f7ff fbcb 	bl	80007fc <__aeabi_ddiv>
 8001066:	4603      	mov	r3, r0
 8001068:	460c      	mov	r4, r1
 800106a:	f107 000c 	add.w	r0, r7, #12
 800106e:	461a      	mov	r2, r3
 8001070:	4623      	mov	r3, r4
 8001072:	491a      	ldr	r1, [pc, #104]	; (80010dc <main+0x204>)
 8001074:	f005 f820 	bl	80060b8 <siprintf>
	  HAL_UART_Transmit(&huart1, bufUart, strlen((char*)bufUart), HAL_MAX_DELAY);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f87f 	bl	8000180 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	f107 010c 	add.w	r1, r7, #12
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <main+0x1ec>)
 8001090:	f003 fdf4 	bl	8004c7c <HAL_UART_Transmit>


	  if(temperature < 2500) { // if T < 25°C
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800109a:	4293      	cmp	r3, r2
 800109c:	dc05      	bgt.n	80010aa <main+0x1d2>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2120      	movs	r1, #32
 80010a2:	480f      	ldr	r0, [pc, #60]	; (80010e0 <main+0x208>)
 80010a4:	f001 f844 	bl	8002130 <HAL_GPIO_WritePin>
 80010a8:	e004      	b.n	80010b4 <main+0x1dc>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2120      	movs	r1, #32
 80010ae:	480c      	ldr	r0, [pc, #48]	; (80010e0 <main+0x208>)
 80010b0:	f001 f83e 	bl	8002130 <HAL_GPIO_WritePin>
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80010b4:	2101      	movs	r1, #1
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <main+0x208>)
 80010b8:	f001 f852 	bl	8002160 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80010bc:	e7a5      	b.n	800100a <main+0x132>
 80010be:	bf00      	nop
 80010c0:	20000210 	.word	0x20000210
 80010c4:	2000025c 	.word	0x2000025c
 80010c8:	200001fc 	.word	0x200001fc
 80010cc:	200001fe 	.word	0x200001fe
 80010d0:	20000200 	.word	0x20000200
 80010d4:	08007880 	.word	0x08007880
 80010d8:	40590000 	.word	0x40590000
 80010dc:	08007894 	.word	0x08007894
 80010e0:	48000400 	.word	0x48000400

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ae      	sub	sp, #184	; 0xb8
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ee:	2248      	movs	r2, #72	; 0x48
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 fb7b 	bl	80057ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2250      	movs	r2, #80	; 0x50
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fb6b 	bl	80057ee <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001126:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	f023 0303 	bic.w	r3, r3, #3
 8001132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800113c:	f001 fe24 	bl	8002d88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fe89 	bl	8000e58 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001146:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <SystemClock_Config+0x160>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800114e:	4a3d      	ldr	r2, [pc, #244]	; (8001244 <SystemClock_Config+0x160>)
 8001150:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <SystemClock_Config+0x160>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001162:	232f      	movs	r3, #47	; 0x2f
 8001164:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001166:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800116a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001174:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001176:	2301      	movs	r3, #1
 8001178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	2340      	movs	r3, #64	; 0x40
 800117e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001188:	2360      	movs	r3, #96	; 0x60
 800118a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800118e:	2305      	movs	r3, #5
 8001190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 f9a4 	bl	80034ec <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011aa:	f000 f9dd 	bl	8001568 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80011ae:	236f      	movs	r3, #111	; 0x6f
 80011b0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011b2:	2302      	movs	r3, #2
 80011b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ce:	2101      	movs	r1, #1
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fd1f 	bl	8003c14 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80011dc:	f000 f9c4 	bl	8001568 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80011e0:	f643 1305 	movw	r3, #14597	; 0x3905
 80011e4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80011e6:	2318      	movs	r3, #24
 80011e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80011ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80011f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80011f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011fa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80011fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001200:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001206:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800120c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001216:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001218:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800121c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800121e:	2300      	movs	r3, #0
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001222:	2300      	movs	r3, #0
 8001224:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4618      	mov	r0, r3
 800122a:	f003 f93d 	bl	80044a8 <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x154>
  {
    Error_Handler();
 8001234:	f000 f998 	bl	8001568 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001238:	f003 faab 	bl	8004792 <HAL_RCCEx_EnableMSIPLLMode>
}
 800123c:	bf00      	nop
 800123e:	37b8      	adds	r7, #184	; 0xb8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58000400 	.word	0x58000400

08001248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_I2C1_Init+0x74>)
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <MX_I2C1_Init+0x78>)
 8001250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_I2C1_Init+0x74>)
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <MX_I2C1_Init+0x7c>)
 8001256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_I2C1_Init+0x74>)
 8001260:	2201      	movs	r2, #1
 8001262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_I2C1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <MX_I2C1_Init+0x74>)
 8001284:	f000 ffaa 	bl	80021dc <HAL_I2C_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800128e:	f000 f96b 	bl	8001568 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001292:	2100      	movs	r1, #0
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <MX_I2C1_Init+0x74>)
 8001296:	f001 fbfb 	bl	8002a90 <HAL_I2CEx_ConfigAnalogFilter>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012a0:	f000 f962 	bl	8001568 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012a4:	2100      	movs	r1, #0
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_I2C1_Init+0x74>)
 80012a8:	f001 fc3d 	bl	8002b26 <HAL_I2CEx_ConfigDigitalFilter>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f000 f959 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000210 	.word	0x20000210
 80012c0:	40005400 	.word	0x40005400
 80012c4:	00707cbb 	.word	0x00707cbb

080012c8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_RTC_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_RTC_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_RTC_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_RTC_Init+0x4c>)
 80012ea:	220f      	movs	r2, #15
 80012ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <MX_RTC_Init+0x4c>)
 80012f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_RTC_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_RTC_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_RTC_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_RTC_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_RTC_Init+0x4c>)
 8001310:	f003 fb56 	bl	80049c0 <HAL_RTC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800131a:	f000 f925 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200002e8 	.word	0x200002e8
 8001328:	40002800 	.word	0x40002800

0800132c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <MX_USART1_UART_Init+0x94>)
 8001334:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_USART1_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_USART1_UART_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_USART1_UART_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001376:	f003 fc31 	bl	8004bdc <HAL_UART_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001380:	f000 f8f2 	bl	8001568 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <MX_USART1_UART_Init+0x90>)
 8001388:	f004 f8bf 	bl	800550a <HAL_UARTEx_SetTxFifoThreshold>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001392:	f000 f8e9 	bl	8001568 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <MX_USART1_UART_Init+0x90>)
 800139a:	f004 f8f4 	bl	8005586 <HAL_UARTEx_SetRxFifoThreshold>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013a4:	f000 f8e0 	bl	8001568 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_USART1_UART_Init+0x90>)
 80013aa:	f004 f875 	bl	8005498 <HAL_UARTEx_DisableFifoMode>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013b4:	f000 f8d8 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000025c 	.word	0x2000025c
 80013c0:	40013800 	.word	0x40013800

080013c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_USB_PCD_Init+0x48>)
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <MX_USB_PCD_Init+0x4c>)
 80013cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_USB_PCD_Init+0x48>)
 80013d0:	2208      	movs	r2, #8
 80013d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_USB_PCD_Init+0x48>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_USB_PCD_Init+0x48>)
 80013dc:	2202      	movs	r2, #2
 80013de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <MX_USB_PCD_Init+0x48>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_USB_PCD_Init+0x48>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <MX_USB_PCD_Init+0x48>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_USB_PCD_Init+0x48>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_USB_PCD_Init+0x48>)
 80013fa:	f001 fbe0 	bl	8002bbe <HAL_PCD_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001404:	f000 f8b0 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000030c 	.word	0x2000030c
 8001410:	40006800 	.word	0x40006800

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001428:	2004      	movs	r0, #4
 800142a:	f7ff fd2b 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff fd28 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fd25 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	2008      	movs	r0, #8
 800143c:	f7ff fd22 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2123      	movs	r1, #35	; 0x23
 8001444:	4814      	ldr	r0, [pc, #80]	; (8001498 <MX_GPIO_Init+0x84>)
 8001446:	f000 fe73 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144a:	2310      	movs	r3, #16
 800144c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4810      	ldr	r0, [pc, #64]	; (800149c <MX_GPIO_Init+0x88>)
 800145c:	f000 fcf8 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001460:	2323      	movs	r3, #35	; 0x23
 8001462:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4808      	ldr	r0, [pc, #32]	; (8001498 <MX_GPIO_Init+0x84>)
 8001476:	f000 fceb 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800147a:	2303      	movs	r3, #3
 800147c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_GPIO_Init+0x8c>)
 800148c:	f000 fce0 	bl	8001e50 <HAL_GPIO_Init>

}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	48000400 	.word	0x48000400
 800149c:	48000800 	.word	0x48000800
 80014a0:	48000c00 	.word	0x48000c00

080014a4 <BME280_compensate_T>:

/* USER CODE BEGIN 4 */
// From BME280 datasheet
int32_t BME280_compensate_T(int32_t adc_T){
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T, t_fine;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2))>>11;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	10da      	asrs	r2, r3, #3
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <BME280_compensate_T+0x70>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	4a17      	ldr	r2, [pc, #92]	; (8001518 <BME280_compensate_T+0x74>)
 80014ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	12db      	asrs	r3, r3, #11
 80014c4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) -  ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	111b      	asrs	r3, r3, #4
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <BME280_compensate_T+0x70>)
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	1112      	asrs	r2, r2, #4
 80014d4:	490f      	ldr	r1, [pc, #60]	; (8001514 <BME280_compensate_T+0x70>)
 80014d6:	8809      	ldrh	r1, [r1, #0]
 80014d8:	1a52      	subs	r2, r2, r1
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	131b      	asrs	r3, r3, #12
 80014e0:	4a0e      	ldr	r2, [pc, #56]	; (800151c <BME280_compensate_T+0x78>)
 80014e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	139b      	asrs	r3, r3, #14
 80014ec:	613b      	str	r3, [r7, #16]
	t_fine = var1+var2;
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
	T = (t_fine *5 + 128) >> 8;
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3380      	adds	r3, #128	; 0x80
 8001500:	121b      	asrs	r3, r3, #8
 8001502:	60bb      	str	r3, [r7, #8]
	return T;
 8001504:	68bb      	ldr	r3, [r7, #8]
}
 8001506:	4618      	mov	r0, r3
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200001fc 	.word	0x200001fc
 8001518:	200001fe 	.word	0x200001fe
 800151c:	20000200 	.word	0x20000200

08001520 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f000 fb5e 	bl	8001be8 <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d00a      	beq.n	8001550 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800153a:	f000 fb6d 	bl	8001c18 <HAL_GetTickFreq>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4413      	add	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001548:	e002      	b.n	8001550 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800154a:	f7ff fcb5 	bl	8000eb8 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 800154e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001550:	f000 fb4a 	bl	8001be8 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d8f4      	bhi.n	800154a <HAL_Delay+0x2a>
  }
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Turn on Red LED
 800156c:	2201      	movs	r2, #1
 800156e:	2102      	movs	r1, #2
 8001570:	4801      	ldr	r0, [pc, #4]	; (8001578 <Error_Handler+0x10>)
 8001572:	f000 fddd 	bl	8002130 <HAL_GPIO_WritePin>
	while(1);
 8001576:	e7fe      	b.n	8001576 <Error_Handler+0xe>
 8001578:	48000400 	.word	0x48000400

0800157c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800158c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_AHB2_GRP1_EnableClock>:
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015f4:	68fb      	ldr	r3, [r7, #12]
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4313      	orrs	r3, r2
 8001618:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4013      	ands	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4313      	orrs	r3, r2
 800164a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001658:	68fb      	ldr	r3, [r7, #12]
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800166a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800166e:	f7ff ffaf 	bl	80015d0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	202e      	movs	r0, #46	; 0x2e
 8001678:	f000 fbb5 	bl	8001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800167c:	202e      	movs	r0, #46	; 0x2e
 800167e:	f000 fbcc 	bl	8001e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_I2C_MspInit+0x5c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d117      	bne.n	80016da <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff ff77 	bl	800159e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b6:	2312      	movs	r3, #18
 80016b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c2:	2304      	movs	r3, #4
 80016c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4619      	mov	r1, r3
 80016cc:	4806      	ldr	r0, [pc, #24]	; (80016e8 <HAL_I2C_MspInit+0x60>)
 80016ce:	f000 fbbf 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016d6:	f7ff ff94 	bl	8001602 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40005400 	.word	0x40005400
 80016e8:	48000400 	.word	0x48000400

080016ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_RTC_MspInit+0x28>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d105      	bne.n	800170a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016fe:	f7ff ff3d 	bl	800157c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001702:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001706:	f7ff ff7c 	bl	8001602 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40002800 	.word	0x40002800

08001718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_UART_MspInit+0x58>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d116      	bne.n	8001768 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800173a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800173e:	f7ff ff79 	bl	8001634 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2002      	movs	r0, #2
 8001744:	f7ff ff2b 	bl	800159e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001748:	23c0      	movs	r3, #192	; 0xc0
 800174a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001758:	2307      	movs	r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <HAL_UART_MspInit+0x5c>)
 8001764:	f000 fb74 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40013800 	.word	0x40013800
 8001774:	48000400 	.word	0x48000400

08001778 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_PCD_MspInit+0x5c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d118      	bne.n	80017cc <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2001      	movs	r0, #1
 800179c:	f7ff feff 	bl	800159e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80017b2:	230a      	movs	r3, #10
 80017b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f000 fb46 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80017c4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80017c8:	f7ff ff1b 	bl	8001602 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40006800 	.word	0x40006800

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 f9c8 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001838:	f000 fcac 	bl	8002194 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f003 ff88 	bl	8005784 <__errno>
 8001874:	4602      	mov	r2, r0
 8001876:	230c      	movs	r3, #12
 8001878:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20030000 	.word	0x20030000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000204 	.word	0x20000204
 80018a8:	20000588 	.word	0x20000588

080018ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <SystemInit+0xa0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <SystemInit+0xa0>)
 80018b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018bc:	4a23      	ldr	r2, [pc, #140]	; (800194c <SystemInit+0xa0>)
 80018be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018da:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80018de:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <SystemInit+0xa4>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fc:	f023 0305 	bic.w	r3, r3, #5
 8001900:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <SystemInit+0xa8>)
 800191e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <SystemInit+0xa8>)
 8001926:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	faf6fefb 	.word	0xfaf6fefb
 8001954:	22041000 	.word	0x22041000

08001958 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <SystemCoreClockUpdate+0x130>)
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b0c      	cmp	r3, #12
 800197e:	d867      	bhi.n	8001a50 <SystemCoreClockUpdate+0xf8>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <SystemCoreClockUpdate+0x30>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	080019bd 	.word	0x080019bd
 800198c:	08001a51 	.word	0x08001a51
 8001990:	08001a51 	.word	0x08001a51
 8001994:	08001a51 	.word	0x08001a51
 8001998:	080019c5 	.word	0x080019c5
 800199c:	08001a51 	.word	0x08001a51
 80019a0:	08001a51 	.word	0x08001a51
 80019a4:	08001a51 	.word	0x08001a51
 80019a8:	080019cd 	.word	0x080019cd
 80019ac:	08001a51 	.word	0x08001a51
 80019b0:	08001a51 	.word	0x08001a51
 80019b4:	08001a51 	.word	0x08001a51
 80019b8:	080019d5 	.word	0x080019d5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80019bc:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <SystemCoreClockUpdate+0x134>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	6013      	str	r3, [r2, #0]
      break;
 80019c2:	e049      	b.n	8001a58 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80019c4:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <SystemCoreClockUpdate+0x134>)
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <SystemCoreClockUpdate+0x138>)
 80019c8:	601a      	str	r2, [r3, #0]
      break;
 80019ca:	e045      	b.n	8001a58 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <SystemCoreClockUpdate+0x134>)
 80019ce:	4a31      	ldr	r2, [pc, #196]	; (8001a94 <SystemCoreClockUpdate+0x13c>)
 80019d0:	601a      	str	r2, [r3, #0]
      break;
 80019d2:	e041      	b.n	8001a58 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	3301      	adds	r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d105      	bne.n	8001a02 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80019f6:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <SystemCoreClockUpdate+0x138>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e00d      	b.n	8001a1e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d105      	bne.n	8001a14 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <SystemCoreClockUpdate+0x13c>)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e004      	b.n	8001a1e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0f5b      	lsrs	r3, r3, #29
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	3301      	adds	r3, #1
 8001a40:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <SystemCoreClockUpdate+0x134>)
 8001a4c:	6013      	str	r3, [r2, #0]
      break;
 8001a4e:	e003      	b.n	8001a58 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <SystemCoreClockUpdate+0x134>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6013      	str	r3, [r2, #0]
      break;
 8001a56:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <SystemCoreClockUpdate+0x140>)
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <SystemCoreClockUpdate+0x134>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <SystemCoreClockUpdate+0x134>)
 8001a78:	6013      	str	r3, [r2, #0]

}
 8001a7a:	bf00      	nop
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	08007938 	.word	0x08007938
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	01e84800 	.word	0x01e84800
 8001a98:	080078d8 	.word	0x080078d8

08001a9c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001a9c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa0:	3304      	adds	r3, #4

08001aa2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001aa6:	d3f9      	bcc.n	8001a9c <CopyDataInit>
  bx lr
 8001aa8:	4770      	bx	lr

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001aaa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001aac:	3004      	adds	r0, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001aae:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>
  bx lr
 8001ab2:	4770      	bx	lr

08001ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001ab6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ab8:	f7ff fef8 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001abc:	480b      	ldr	r0, [pc, #44]	; (8001aec <LoopForever+0x8>)
 8001abe:	490c      	ldr	r1, [pc, #48]	; (8001af0 <LoopForever+0xc>)
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <LoopForever+0x10>)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f7ff ffed 	bl	8001aa2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ac8:	480b      	ldr	r0, [pc, #44]	; (8001af8 <LoopForever+0x14>)
 8001aca:	490c      	ldr	r1, [pc, #48]	; (8001afc <LoopForever+0x18>)
 8001acc:	2300      	movs	r3, #0
 8001ace:	f7ff ffee 	bl	8001aae <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001ad2:	480b      	ldr	r0, [pc, #44]	; (8001b00 <LoopForever+0x1c>)
 8001ad4:	490b      	ldr	r1, [pc, #44]	; (8001b04 <LoopForever+0x20>)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f7ff ffe9 	bl	8001aae <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001adc:	f003 fe58 	bl	8005790 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001ae0:	f7ff f9fa 	bl	8000ed8 <main>

08001ae4 <LoopForever>:

LoopForever:
  b LoopForever
 8001ae4:	e7fe      	b.n	8001ae4 <LoopForever>
 8001ae6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001ae8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001aec:	20000004 	.word	0x20000004
 8001af0:	200001e0 	.word	0x200001e0
 8001af4:	08007c60 	.word	0x08007c60
  INIT_BSS _sbss, _ebss
 8001af8:	200001e0 	.word	0x200001e0
 8001afc:	20000588 	.word	0x20000588
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b00:	20030000 	.word	0x20030000
 8001b04:	20030000 	.word	0x20030000

08001b08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_Init+0x3c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_Init+0x3c>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b22:	2003      	movs	r0, #3
 8001b24:	f000 f954 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f000 f80f 	bl	8001b4c <HAL_InitTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	e001      	b.n	8001b3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b3a:	f7ff fd94 	bl	8001666 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	58004000 	.word	0x58004000

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_InitTick+0x6c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d024      	beq.n	8001baa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b60:	f002 f9fe 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_InitTick+0x6c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b70:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f95c 	bl	8001e36 <HAL_SYSTICK_Config>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10f      	bne.n	8001ba4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	d809      	bhi.n	8001b9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b92:	f000 f928 	bl	8001de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_InitTick+0x70>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	e007      	b.n	8001bae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e004      	b.n	8001bae <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e001      	b.n	8001bae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	2000000c 	.word	0x2000000c
 8001be4:	20000580 	.word	0x20000580

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000580 	.word	0x20000580

08001c00 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_GetTickPrio+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000008 	.word	0x20000008

08001c18 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTickFreq+0x14>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000000c 	.word	0x2000000c

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff29 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df4:	f7ff ff40 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	6978      	ldr	r0, [r7, #20]
 8001e00:	f7ff ff90 	bl	8001d24 <NVIC_EncodePriority>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff5f 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff33 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffa4 	bl	8001d8c <SysTick_Config>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e14c      	b.n	80020fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 813e 	beq.w	80020f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d00b      	beq.n	8001e98 <HAL_GPIO_Init+0x48>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d007      	beq.n	8001e98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e8c:	2b11      	cmp	r3, #17
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b12      	cmp	r3, #18
 8001e96:	d130      	bne.n	8001efa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ece:	2201      	movs	r2, #1
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	f003 0201 	and.w	r2, r3, #1
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0xea>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d123      	bne.n	8001f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0203 	and.w	r2, r3, #3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8098 	beq.w	80020f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc4:	4a54      	ldr	r2, [pc, #336]	; (8002118 <HAL_GPIO_Init+0x2c8>)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	3302      	adds	r3, #2
 8001fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fee:	d019      	beq.n	8002024 <HAL_GPIO_Init+0x1d4>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a4a      	ldr	r2, [pc, #296]	; (800211c <HAL_GPIO_Init+0x2cc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_GPIO_Init+0x1d0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a49      	ldr	r2, [pc, #292]	; (8002120 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1cc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a48      	ldr	r2, [pc, #288]	; (8002124 <HAL_GPIO_Init+0x2d4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1c8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a47      	ldr	r2, [pc, #284]	; (8002128 <HAL_GPIO_Init+0x2d8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1c4>
 8002010:	2304      	movs	r3, #4
 8002012:	e008      	b.n	8002026 <HAL_GPIO_Init+0x1d6>
 8002014:	2307      	movs	r3, #7
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x1d6>
 8002018:	2303      	movs	r3, #3
 800201a:	e004      	b.n	8002026 <HAL_GPIO_Init+0x1d6>
 800201c:	2302      	movs	r3, #2
 800201e:	e002      	b.n	8002026 <HAL_GPIO_Init+0x1d6>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_GPIO_Init+0x1d6>
 8002024:	2300      	movs	r3, #0
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	f002 0203 	and.w	r2, r2, #3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4093      	lsls	r3, r2
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002036:	4938      	ldr	r1, [pc, #224]	; (8002118 <HAL_GPIO_Init+0x2c8>)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002044:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_GPIO_Init+0x2dc>)
 8002046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800206a:	4a30      	ldr	r2, [pc, #192]	; (800212c <HAL_GPIO_Init+0x2dc>)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_GPIO_Init+0x2dc>)
 8002074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002098:	4a24      	ldr	r2, [pc, #144]	; (800212c <HAL_GPIO_Init+0x2dc>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ee:	4a0f      	ldr	r2, [pc, #60]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	f47f aeab 	bne.w	8001e60 <HAL_GPIO_Init+0x10>
  }
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	48000400 	.word	0x48000400
 8002120:	48000800 	.word	0x48000800
 8002124:	48000c00 	.word	0x48000c00
 8002128:	48001000 	.word	0x48001000
 800212c:	58000800 	.word	0x58000800

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800214c:	e002      	b.n	8002154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4013      	ands	r3, r2
 8002178:	041a      	lsls	r2, r3, #16
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43d9      	mvns	r1, r3
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	400b      	ands	r3, r1
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_HSEM_IRQHandler+0x30>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_HSEM_IRQHandler+0x30>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	4906      	ldr	r1, [pc, #24]	; (80021c4 <HAL_HSEM_IRQHandler+0x30>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <HAL_HSEM_IRQHandler+0x30>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f807 	bl	80021c8 <HAL_HSEM_FreeCallback>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	58001500 	.word	0x58001500

080021c8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e081      	b.n	80022f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff fa40 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	; 0x24
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800222c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	e006      	b.n	8002264 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002262:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d104      	bne.n	8002276 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002274:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002288:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002298:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	ea42 0103 	orr.w	r1, r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69d9      	ldr	r1, [r3, #28]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	461a      	mov	r2, r3
 8002308:	460b      	mov	r3, r1
 800230a:	817b      	strh	r3, [r7, #10]
 800230c:	4613      	mov	r3, r2
 800230e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b20      	cmp	r3, #32
 800231a:	f040 80da 	bne.w	80024d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_I2C_Master_Transmit+0x30>
 8002328:	2302      	movs	r3, #2
 800232a:	e0d3      	b.n	80024d4 <HAL_I2C_Master_Transmit+0x1d8>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002334:	f7ff fc58 	bl	8001be8 <HAL_GetTick>
 8002338:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2319      	movs	r3, #25
 8002340:	2201      	movs	r2, #1
 8002342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f9e6 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0be      	b.n	80024d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2221      	movs	r2, #33	; 0x21
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2210      	movs	r2, #16
 8002362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	893a      	ldrh	r2, [r7, #8]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2bff      	cmp	r3, #255	; 0xff
 8002386:	d90e      	bls.n	80023a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	22ff      	movs	r2, #255	; 0xff
 800238c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002392:	b2da      	uxtb	r2, r3
 8002394:	8979      	ldrh	r1, [r7, #10]
 8002396:	4b51      	ldr	r3, [pc, #324]	; (80024dc <HAL_I2C_Master_Transmit+0x1e0>)
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fb48 	bl	8002a34 <I2C_TransferConfig>
 80023a4:	e06c      	b.n	8002480 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	8979      	ldrh	r1, [r7, #10]
 80023b8:	4b48      	ldr	r3, [pc, #288]	; (80024dc <HAL_I2C_Master_Transmit+0x1e0>)
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fb37 	bl	8002a34 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80023c6:	e05b      	b.n	8002480 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	6a39      	ldr	r1, [r7, #32]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f9e3 	bl	8002798 <I2C_WaitOnTXISFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e07b      	b.n	80024d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d034      	beq.n	8002480 <HAL_I2C_Master_Transmit+0x184>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	2b00      	cmp	r3, #0
 800241c:	d130      	bne.n	8002480 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	2200      	movs	r2, #0
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f975 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e04d      	b.n	80024d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	2bff      	cmp	r3, #255	; 0xff
 8002440:	d90e      	bls.n	8002460 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	22ff      	movs	r2, #255	; 0xff
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	b2da      	uxtb	r2, r3
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	2300      	movs	r3, #0
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 faeb 	bl	8002a34 <I2C_TransferConfig>
 800245e:	e00f      	b.n	8002480 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	b2da      	uxtb	r2, r3
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	2300      	movs	r3, #0
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fada 	bl	8002a34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d19e      	bne.n	80023c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	6a39      	ldr	r1, [r7, #32]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f9c2 	bl	8002818 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e01a      	b.n	80024d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2220      	movs	r2, #32
 80024a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80024b2:	400b      	ands	r3, r1
 80024b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	80002000 	.word	0x80002000
 80024e0:	fe00e800 	.word	0xfe00e800

080024e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	817b      	strh	r3, [r7, #10]
 80024f4:	4613      	mov	r3, r2
 80024f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b20      	cmp	r3, #32
 8002502:	f040 80db 	bne.w	80026bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_I2C_Master_Receive+0x30>
 8002510:	2302      	movs	r3, #2
 8002512:	e0d4      	b.n	80026be <HAL_I2C_Master_Receive+0x1da>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800251c:	f7ff fb64 	bl	8001be8 <HAL_GetTick>
 8002520:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2319      	movs	r3, #25
 8002528:	2201      	movs	r2, #1
 800252a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f8f2 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0bf      	b.n	80026be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2222      	movs	r2, #34	; 0x22
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2210      	movs	r2, #16
 800254a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	893a      	ldrh	r2, [r7, #8]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	2bff      	cmp	r3, #255	; 0xff
 800256e:	d90e      	bls.n	800258e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	22ff      	movs	r2, #255	; 0xff
 8002574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	b2da      	uxtb	r2, r3
 800257c:	8979      	ldrh	r1, [r7, #10]
 800257e:	4b52      	ldr	r3, [pc, #328]	; (80026c8 <HAL_I2C_Master_Receive+0x1e4>)
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fa54 	bl	8002a34 <I2C_TransferConfig>
 800258c:	e06d      	b.n	800266a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	b2da      	uxtb	r2, r3
 800259e:	8979      	ldrh	r1, [r7, #10]
 80025a0:	4b49      	ldr	r3, [pc, #292]	; (80026c8 <HAL_I2C_Master_Receive+0x1e4>)
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fa43 	bl	8002a34 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80025ae:	e05c      	b.n	800266a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	6a39      	ldr	r1, [r7, #32]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f96b 	bl	8002890 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e07c      	b.n	80026be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d034      	beq.n	800266a <HAL_I2C_Master_Receive+0x186>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	d130      	bne.n	800266a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2200      	movs	r2, #0
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f880 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e04d      	b.n	80026be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	2bff      	cmp	r3, #255	; 0xff
 800262a:	d90e      	bls.n	800264a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	b2da      	uxtb	r2, r3
 8002638:	8979      	ldrh	r1, [r7, #10]
 800263a:	2300      	movs	r3, #0
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f9f6 	bl	8002a34 <I2C_TransferConfig>
 8002648:	e00f      	b.n	800266a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	b2da      	uxtb	r2, r3
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	2300      	movs	r3, #0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f9e5 	bl	8002a34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d19d      	bne.n	80025b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	6a39      	ldr	r1, [r7, #32]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f8cd 	bl	8002818 <I2C_WaitOnSTOPFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e01a      	b.n	80026be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2220      	movs	r2, #32
 800268e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_I2C_Master_Receive+0x1e8>)
 800269c:	400b      	ands	r3, r1
 800269e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e000      	b.n	80026be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	80002400 	.word	0x80002400
 80026cc:	fe00e800 	.word	0xfe00e800

080026d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d103      	bne.n	80026ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2200      	movs	r2, #0
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d007      	beq.n	800270c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	619a      	str	r2, [r3, #24]
  }
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002728:	e022      	b.n	8002770 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d01e      	beq.n	8002770 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7ff fa59 	bl	8001be8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d113      	bne.n	8002770 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e00f      	b.n	8002790 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4013      	ands	r3, r2
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	429a      	cmp	r2, r3
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	429a      	cmp	r2, r3
 800278c:	d0cd      	beq.n	800272a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027a4:	e02c      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f8dc 	bl	8002968 <I2C_IsAcknowledgeFailed>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e02a      	b.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d01e      	beq.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7ff fa11 	bl	8001be8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d113      	bne.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	d1cb      	bne.n	80027a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002824:	e028      	b.n	8002878 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f89c 	bl	8002968 <I2C_IsAcknowledgeFailed>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e026      	b.n	8002888 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283a:	f7ff f9d5 	bl	8001be8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d113      	bne.n	8002878 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e007      	b.n	8002888 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b20      	cmp	r3, #32
 8002884:	d1cf      	bne.n	8002826 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800289c:	e055      	b.n	800294a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f860 	bl	8002968 <I2C_IsAcknowledgeFailed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e053      	b.n	800295a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d129      	bne.n	8002914 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d105      	bne.n	80028da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e03f      	b.n	800295a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2220      	movs	r2, #32
 80028e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80028ee:	400b      	ands	r3, r1
 80028f0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e022      	b.n	800295a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002914:	f7ff f968 	bl	8001be8 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10f      	bne.n	800294a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f043 0220 	orr.w	r2, r3, #32
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e007      	b.n	800295a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d1a2      	bne.n	800289e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	fe00e800 	.word	0xfe00e800

08002968 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b10      	cmp	r3, #16
 8002980:	d151      	bne.n	8002a26 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002982:	e022      	b.n	80029ca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d01e      	beq.n	80029ca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298c:	f7ff f92c 	bl	8001be8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <I2C_IsAcknowledgeFailed+0x3a>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d113      	bne.n	80029ca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e02e      	b.n	8002a28 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d1d5      	bne.n	8002984 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2210      	movs	r2, #16
 80029de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2220      	movs	r2, #32
 80029e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff fe71 	bl	80026d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <I2C_IsAcknowledgeFailed+0xc8>)
 80029fa:	400b      	ands	r3, r1
 80029fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	fe00e800 	.word	0xfe00e800

08002a34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	817b      	strh	r3, [r7, #10]
 8002a42:	4613      	mov	r3, r2
 8002a44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	0d5b      	lsrs	r3, r3, #21
 8002a50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <I2C_TransferConfig+0x58>)
 8002a56:	430b      	orrs	r3, r1
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	ea02 0103 	and.w	r1, r2, r3
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a64:	7a7b      	ldrb	r3, [r7, #9]
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	03ff63ff 	.word	0x03ff63ff

08002a90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d138      	bne.n	8002b18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e032      	b.n	8002b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	; 0x24
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6819      	ldr	r1, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e000      	b.n	8002b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
  }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d139      	bne.n	8002bb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e033      	b.n	8002bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2224      	movs	r2, #36	; 0x24
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc0:	b08b      	sub	sp, #44	; 0x2c
 8002bc2:	af06      	add	r7, sp, #24
 8002bc4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0ad      	b.n	8002d2c <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe fdc7 	bl	8001778 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2203      	movs	r2, #3
 8002bee:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 fd85 	bl	8005706 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e035      	b.n	8002c6e <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	015b      	lsls	r3, r3, #5
 8002c08:	4413      	add	r3, r2
 8002c0a:	3329      	adds	r3, #41	; 0x29
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	015b      	lsls	r3, r3, #5
 8002c16:	4413      	add	r3, r2
 8002c18:	3328      	adds	r3, #40	; 0x28
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	b291      	uxth	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	015b      	lsls	r3, r3, #5
 8002c28:	4413      	add	r3, r2
 8002c2a:	3336      	adds	r3, #54	; 0x36
 8002c2c:	460a      	mov	r2, r1
 8002c2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	015b      	lsls	r3, r3, #5
 8002c36:	4413      	add	r3, r2
 8002c38:	332b      	adds	r3, #43	; 0x2b
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	015b      	lsls	r3, r3, #5
 8002c44:	4413      	add	r3, r2
 8002c46:	3338      	adds	r3, #56	; 0x38
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	015b      	lsls	r3, r3, #5
 8002c52:	4413      	add	r3, r2
 8002c54:	333c      	adds	r3, #60	; 0x3c
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	015b      	lsls	r3, r3, #5
 8002c62:	4413      	add	r3, r2
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3c4      	bcc.n	8002c02 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e031      	b.n	8002ce2 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	015b      	lsls	r3, r3, #5
 8002c84:	4413      	add	r3, r2
 8002c86:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	015b      	lsls	r3, r3, #5
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	015b      	lsls	r3, r3, #5
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	015b      	lsls	r3, r3, #5
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	015b      	lsls	r3, r3, #5
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	330a      	adds	r3, #10
 8002cd4:	015b      	lsls	r3, r3, #5
 8002cd6:	4413      	add	r3, r2
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	7bfa      	ldrb	r2, [r7, #15]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3c8      	bcc.n	8002c7e <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	687e      	ldr	r6, [r7, #4]
 8002cf4:	466d      	mov	r5, sp
 8002cf6:	f106 0410 	add.w	r4, r6, #16
 8002cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	1d33      	adds	r3, r6, #4
 8002d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d06:	6838      	ldr	r0, [r7, #0]
 8002d08:	f002 fd18 	bl	800573c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d102      	bne.n	8002d2a <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f805 	bl	8002d34 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	6013      	str	r3, [r2, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	58000400 	.word	0x58000400

08002da8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	58000400 	.word	0x58000400

08002dc4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd6:	d101      	bne.n	8002ddc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_HSE_EnableBypass>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_RCC_HSE_DisableBypass>:
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_HSE_Enable>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_RCC_HSE_Disable>:
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_RCC_HSE_IsReady>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e72:	d101      	bne.n	8002e78 <LL_RCC_HSE_IsReady+0x18>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <LL_RCC_HSE_IsReady+0x1a>
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_HSI_Enable>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_RCC_HSI_Disable>:
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_HSI_IsReady>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed2:	d101      	bne.n	8002ed8 <LL_RCC_HSI_IsReady+0x18>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <LL_RCC_HSI_IsReady+0x1a>
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_RCC_HSI48_Enable>:
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_RCC_HSI48_Disable>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_HSI48_IsReady>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d101      	bne.n	8002f6a <LL_RCC_HSI48_IsReady+0x18>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_RCC_HSI48_IsReady+0x1a>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_RCC_LSE_Enable>:
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_RCC_LSE_Disable>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_LSE_EnableBypass>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fca:	f043 0304 	orr.w	r3, r3, #4
 8002fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_RCC_LSE_DisableBypass>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_RCC_LSE_IsReady>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b02      	cmp	r3, #2
 8003010:	d101      	bne.n	8003016 <LL_RCC_LSE_IsReady+0x18>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <LL_RCC_LSE_IsReady+0x1a>
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_RCC_LSI1_Enable>:
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_RCC_LSI1_Disable>:
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <LL_RCC_LSI1_IsReady>:
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d101      	bne.n	800307e <LL_RCC_LSI1_IsReady+0x18>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <LL_RCC_LSI1_IsReady+0x1a>
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_RCC_LSI2_Enable>:
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_RCC_LSI2_Disable>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_RCC_LSI2_IsReady>:
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d101      	bne.n	80030e6 <LL_RCC_LSI2_IsReady+0x18>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <LL_RCC_LSI2_IsReady+0x1a>
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_RCC_LSI2_SetTrimming>:
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003102:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_RCC_MSI_Enable>:
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_RCC_MSI_Disable>:
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	6013      	str	r3, [r2, #0]
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_RCC_MSI_IsReady>:
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d101      	bne.n	8003172 <LL_RCC_MSI_IsReady+0x16>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <LL_RCC_MSI_IsReady+0x18>
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <LL_RCC_MSI_SetRange>:
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_RCC_MSI_GetRange>:
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2bb0      	cmp	r3, #176	; 0xb0
 80031bc:	d901      	bls.n	80031c2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80031be:	23b0      	movs	r3, #176	; 0xb0
 80031c0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80031c2:	687b      	ldr	r3, [r7, #4]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_RCC_SetSysClkSource>:
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 0203 	bic.w	r2, r3, #3
 800320c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_RCC_GetSysClkSource>:
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 030c 	and.w	r3, r3, #12
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_RCC_SetAHBPrescaler>:
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003272:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_RCC_SetAHB4Prescaler>:
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800329e:	f023 020f 	bic.w	r2, r3, #15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_RCC_SetAPB1Prescaler>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80032c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_RCC_SetAPB2Prescaler>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_RCC_GetAHBPrescaler>:
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_RCC_GetAHB4Prescaler>:
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_RCC_GetAPB1Prescaler>:
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_RCC_GetAPB2Prescaler>:
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800337e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800339c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a0:	6013      	str	r3, [r2, #0]
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033be:	d101      	bne.n	80033c4 <LL_RCC_PLL_IsReady+0x18>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <LL_RCC_PLL_IsReady+0x1a>
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80033d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	0a1b      	lsrs	r3, r3, #8
 80033dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800341a:	b480      	push	{r7}
 800341c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800341e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0303 	and.w	r3, r3, #3
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d101      	bne.n	800344a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800345a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800346a:	d101      	bne.n	8003470 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003484:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d101      	bne.n	8003496 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80034a2:	b480      	push	{r7}
 80034a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034b4:	d101      	bne.n	80034ba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034d8:	d101      	bne.n	80034de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b08d      	sub	sp, #52	; 0x34
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e386      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 808f 	beq.w	800362a <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800350c:	f7ff fe89 	bl	8003222 <LL_RCC_GetSysClkSource>
 8003510:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003512:	f7ff ff82 	bl	800341a <LL_RCC_PLL_GetMainSource>
 8003516:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_RCC_OscConfig+0x3e>
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	2b0c      	cmp	r3, #12
 8003522:	d149      	bne.n	80035b8 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	2b01      	cmp	r3, #1
 8003528:	d146      	bne.n	80035b8 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800352a:	f7ff fe17 	bl	800315c <LL_RCC_MSI_IsReady>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_OscConfig+0x54>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e365      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003544:	f7ff fe2f 	bl	80031a6 <LL_RCC_MSI_GetRange>
 8003548:	4603      	mov	r3, r0
 800354a:	429c      	cmp	r4, r3
 800354c:	d914      	bls.n	8003578 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fd44 	bl	8003fe0 <RCC_SetFlashLatencyFromMSIRange>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e354      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fe09 	bl	800317e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fe2d 	bl	80031d0 <LL_RCC_MSI_SetCalibTrimming>
 8003576:	e013      	b.n	80035a0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fdfe 	bl	800317e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fe22 	bl	80031d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fd25 	bl	8003fe0 <RCC_SetFlashLatencyFromMSIRange>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e335      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80035a0:	f7fe f9da 	bl	8001958 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035a4:	4bb4      	ldr	r3, [pc, #720]	; (8003878 <HAL_RCC_OscConfig+0x38c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe facf 	bl	8001b4c <HAL_InitTick>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d039      	beq.n	8003628 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e329      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01e      	beq.n	80035fe <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035c0:	f7ff fdae 	bl	8003120 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035c4:	f7fe fb10 	bl	8001be8 <HAL_GetTick>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035cc:	f7fe fb0c 	bl	8001be8 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e316      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 80035de:	f7ff fdbd 	bl	800315c <LL_RCC_MSI_IsReady>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f1      	beq.n	80035cc <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fdc6 	bl	800317e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fdea 	bl	80031d0 <LL_RCC_MSI_SetCalibTrimming>
 80035fc:	e015      	b.n	800362a <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035fe:	f7ff fd9e 	bl	800313e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003602:	f7fe faf1 	bl	8001be8 <HAL_GetTick>
 8003606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800360a:	f7fe faed 	bl	8001be8 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e2f7      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 800361c:	f7ff fd9e 	bl	800315c <LL_RCC_MSI_IsReady>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f1      	bne.n	800360a <HAL_RCC_OscConfig+0x11e>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d05a      	beq.n	80036ec <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003636:	f7ff fdf4 	bl	8003222 <LL_RCC_GetSysClkSource>
 800363a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800363c:	f7ff feed 	bl	800341a <LL_RCC_PLL_GetMainSource>
 8003640:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x168>
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d10d      	bne.n	800366a <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d10a      	bne.n	800366a <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	f7ff fc04 	bl	8002e60 <LL_RCC_HSE_IsReady>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d045      	beq.n	80036ea <HAL_RCC_OscConfig+0x1fe>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d141      	bne.n	80036ea <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e2d0      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003672:	d102      	bne.n	800367a <HAL_RCC_OscConfig+0x18e>
 8003674:	f7ff fbd6 	bl	8002e24 <LL_RCC_HSE_Enable>
 8003678:	e00d      	b.n	8003696 <HAL_RCC_OscConfig+0x1aa>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003682:	d104      	bne.n	800368e <HAL_RCC_OscConfig+0x1a2>
 8003684:	f7ff fbb0 	bl	8002de8 <LL_RCC_HSE_EnableBypass>
 8003688:	f7ff fbcc 	bl	8002e24 <LL_RCC_HSE_Enable>
 800368c:	e003      	b.n	8003696 <HAL_RCC_OscConfig+0x1aa>
 800368e:	f7ff fbd8 	bl	8002e42 <LL_RCC_HSE_Disable>
 8003692:	f7ff fbb8 	bl	8002e06 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fe faa3 	bl	8001be8 <HAL_GetTick>
 80036a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a6:	f7fe fa9f 	bl	8001be8 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b64      	cmp	r3, #100	; 0x64
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e2a9      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 80036b8:	f7ff fbd2 	bl	8002e60 <LL_RCC_HSE_IsReady>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f1      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1ba>
 80036c2:	e013      	b.n	80036ec <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe fa90 	bl	8001be8 <HAL_GetTick>
 80036c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fe fa8c 	bl	8001be8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e296      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 80036de:	f7ff fbbf 	bl	8002e60 <LL_RCC_HSE_IsReady>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f1      	bne.n	80036cc <HAL_RCC_OscConfig+0x1e0>
 80036e8:	e000      	b.n	80036ec <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d051      	beq.n	800379c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f8:	f7ff fd93 	bl	8003222 <LL_RCC_GetSysClkSource>
 80036fc:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036fe:	f7ff fe8c 	bl	800341a <LL_RCC_PLL_GetMainSource>
 8003702:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b04      	cmp	r3, #4
 8003708:	d005      	beq.n	8003716 <HAL_RCC_OscConfig+0x22a>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	d113      	bne.n	8003738 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d110      	bne.n	8003738 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003716:	f7ff fbd3 	bl	8002ec0 <LL_RCC_HSI_IsReady>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_OscConfig+0x240>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e26f      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fbd7 	bl	8002ee4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003736:	e031      	b.n	800379c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d019      	beq.n	8003774 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003740:	f7ff fba0 	bl	8002e84 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fa50 	bl	8001be8 <HAL_GetTick>
 8003748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374c:	f7fe fa4c 	bl	8001be8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e256      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 800375e:	f7ff fbaf 	bl	8002ec0 <LL_RCC_HSI_IsReady>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f1      	beq.n	800374c <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fbb9 	bl	8002ee4 <LL_RCC_HSI_SetCalibTrimming>
 8003772:	e013      	b.n	800379c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003774:	f7ff fb95 	bl	8002ea2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe fa36 	bl	8001be8 <HAL_GetTick>
 800377c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003780:	f7fe fa32 	bl	8001be8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e23c      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003792:	f7ff fb95 	bl	8002ec0 <LL_RCC_HSI_IsReady>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f1      	bne.n	8003780 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a2 	beq.w	80038fa <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d075      	beq.n	80038aa <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d046      	beq.n	8003858 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80037ca:	f7ff fc4c 	bl	8003066 <LL_RCC_LSI1_IsReady>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d113      	bne.n	80037fc <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80037d4:	f7ff fc25 	bl	8003022 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037d8:	f7fe fa06 	bl	8001be8 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037e0:	f7fe fa02 	bl	8001be8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e20c      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80037f2:	f7ff fc38 	bl	8003066 <LL_RCC_LSI1_IsReady>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f1      	beq.n	80037e0 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80037fc:	f7ff fc45 	bl	800308a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe f9f2 	bl	8001be8 <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003808:	f7fe f9ee 	bl	8001be8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b03      	cmp	r3, #3
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1f8      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800381a:	f7ff fc58 	bl	80030ce <LL_RCC_LSI2_IsReady>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f1      	beq.n	8003808 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fc62 	bl	80030f2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800382e:	f7ff fc09 	bl	8003044 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fe f9d9 	bl	8001be8 <HAL_GetTick>
 8003836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800383a:	f7fe f9d5 	bl	8001be8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e1df      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800384c:	f7ff fc0b 	bl	8003066 <LL_RCC_LSI1_IsReady>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f1      	bne.n	800383a <HAL_RCC_OscConfig+0x34e>
 8003856:	e050      	b.n	80038fa <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003858:	f7ff fbe3 	bl	8003022 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe f9c4 	bl	8001be8 <HAL_GetTick>
 8003860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003864:	f7fe f9c0 	bl	8001be8 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d904      	bls.n	800387c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e1ca      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
 8003876:	bf00      	nop
 8003878:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 800387c:	f7ff fbf3 	bl	8003066 <LL_RCC_LSI1_IsReady>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0ee      	beq.n	8003864 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003886:	f7ff fc11 	bl	80030ac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800388c:	f7fe f9ac 	bl	8001be8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b03      	cmp	r3, #3
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e1b6      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800389e:	f7ff fc16 	bl	80030ce <LL_RCC_LSI2_IsReady>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f1      	bne.n	800388c <HAL_RCC_OscConfig+0x3a0>
 80038a8:	e027      	b.n	80038fa <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80038aa:	f7ff fbff 	bl	80030ac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ae:	f7fe f99b 	bl	8001be8 <HAL_GetTick>
 80038b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80038b6:	f7fe f997 	bl	8001be8 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e1a1      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80038c8:	f7ff fc01 	bl	80030ce <LL_RCC_LSI2_IsReady>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f1      	bne.n	80038b6 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80038d2:	f7ff fbb7 	bl	8003044 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fe f987 	bl	8001be8 <HAL_GetTick>
 80038da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80038de:	f7fe f983 	bl	8001be8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e18d      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80038f0:	f7ff fbb9 	bl	8003066 <LL_RCC_LSI1_IsReady>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f1      	bne.n	80038de <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d05b      	beq.n	80039be <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003906:	4bb5      	ldr	r3, [pc, #724]	; (8003bdc <HAL_RCC_OscConfig+0x6f0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d114      	bne.n	800393c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003912:	f7ff fa39 	bl	8002d88 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003916:	f7fe f967 	bl	8001be8 <HAL_GetTick>
 800391a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391e:	f7fe f963 	bl	8001be8 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e16d      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003930:	4baa      	ldr	r3, [pc, #680]	; (8003bdc <HAL_RCC_OscConfig+0x6f0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d102      	bne.n	800394a <HAL_RCC_OscConfig+0x45e>
 8003944:	f7ff fb17 	bl	8002f76 <LL_RCC_LSE_Enable>
 8003948:	e00c      	b.n	8003964 <HAL_RCC_OscConfig+0x478>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b05      	cmp	r3, #5
 8003950:	d104      	bne.n	800395c <HAL_RCC_OscConfig+0x470>
 8003952:	f7ff fb32 	bl	8002fba <LL_RCC_LSE_EnableBypass>
 8003956:	f7ff fb0e 	bl	8002f76 <LL_RCC_LSE_Enable>
 800395a:	e003      	b.n	8003964 <HAL_RCC_OscConfig+0x478>
 800395c:	f7ff fb1c 	bl	8002f98 <LL_RCC_LSE_Disable>
 8003960:	f7ff fb3c 	bl	8002fdc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d014      	beq.n	8003996 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fe f93c 	bl	8001be8 <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fe f938 	bl	8001be8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e140      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 800398a:	f7ff fb38 	bl	8002ffe <LL_RCC_LSE_IsReady>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <HAL_RCC_OscConfig+0x488>
 8003994:	e013      	b.n	80039be <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003996:	f7fe f927 	bl	8001be8 <HAL_GetTick>
 800399a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fe f923 	bl	8001be8 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e12b      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80039b4:	f7ff fb23 	bl	8002ffe <LL_RCC_LSE_IsReady>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1ef      	bne.n	800399e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02c      	beq.n	8003a24 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d014      	beq.n	80039fc <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039d2:	f7ff fa9c 	bl	8002f0e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fe f907 	bl	8001be8 <HAL_GetTick>
 80039da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039de:	f7fe f903 	bl	8001be8 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e10d      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80039f0:	f7ff faaf 	bl	8002f52 <LL_RCC_HSI48_IsReady>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f1      	beq.n	80039de <HAL_RCC_OscConfig+0x4f2>
 80039fa:	e013      	b.n	8003a24 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039fc:	f7ff fa98 	bl	8002f30 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fe f8f2 	bl	8001be8 <HAL_GetTick>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a08:	f7fe f8ee 	bl	8001be8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0f8      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003a1a:	f7ff fa9a 	bl	8002f52 <LL_RCC_HSI48_IsReady>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f1      	bne.n	8003a08 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80ee 	beq.w	8003c0a <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a2e:	f7ff fbf8 	bl	8003222 <LL_RCC_GetSysClkSource>
 8003a32:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	f040 80af 	bne.w	8003ba4 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0203 	and.w	r2, r3, #3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d123      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d11c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d114      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d10d      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d05d      	beq.n	8003b58 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d058      	beq.n	8003b54 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0ab      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ab4:	f7ff fc6b 	bl	800338e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab8:	f7fe f896 	bl	8001be8 <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe f892 	bl	8001be8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e09c      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ef      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <HAL_RCC_OscConfig+0x6f4>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003af2:	4311      	orrs	r1, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003af8:	0212      	lsls	r2, r2, #8
 8003afa:	4311      	orrs	r1, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b00:	4311      	orrs	r1, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b06:	4311      	orrs	r1, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b16:	f7ff fc2b 	bl	8003370 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b2a:	f7fe f85d 	bl	8001be8 <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fe f859 	bl	8001be8 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e063      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ef      	beq.n	8003b32 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b52:	e05a      	b.n	8003c0a <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e059      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d151      	bne.n	8003c0a <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b66:	f7ff fc03 	bl	8003370 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b7a:	f7fe f835 	bl	8001be8 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fe f831 	bl	8001be8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e03b      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ef      	beq.n	8003b82 <HAL_RCC_OscConfig+0x696>
 8003ba2:	e032      	b.n	8003c0a <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d02d      	beq.n	8003c06 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003baa:	f7ff fbf0 	bl	800338e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb8:	f023 0303 	bic.w	r3, r3, #3
 8003bbc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd2:	f7fe f809 	bl	8001be8 <HAL_GetTick>
 8003bd6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd8:	e00d      	b.n	8003bf6 <HAL_RCC_OscConfig+0x70a>
 8003bda:	bf00      	nop
 8003bdc:	58000400 	.word	0x58000400
 8003be0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fe f800 	bl	8001be8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ef      	bne.n	8003be4 <HAL_RCC_OscConfig+0x6f8>
 8003c04:	e001      	b.n	8003c0a <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3734      	adds	r7, #52	; 0x34
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd90      	pop	{r4, r7, pc}

08003c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e12a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c28:	4b97      	ldr	r3, [pc, #604]	; (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d91b      	bls.n	8003c6e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b94      	ldr	r3, [pc, #592]	; (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 0207 	bic.w	r2, r3, #7
 8003c3e:	4992      	ldr	r1, [pc, #584]	; (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c46:	f7fd ffcf 	bl	8001be8 <HAL_GetTick>
 8003c4a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c4e:	f7fd ffcb 	bl	8001be8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e10e      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c60:	4b89      	ldr	r3, [pc, #548]	; (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d1ef      	bne.n	8003c4e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fadb 	bl	800323a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c84:	f7fd ffb0 	bl	8001be8 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c8c:	f7fd ffac 	bl	8001be8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0ef      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003c9e:	f7ff fbc8 	bl	8003432 <LL_RCC_IsActiveFlag_HPRE>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f1      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d016      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fad2 	bl	8003262 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003cbe:	f7fd ff93 	bl	8001be8 <HAL_GetTick>
 8003cc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003cc6:	f7fd ff8f 	bl	8001be8 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0d2      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003cd8:	f7ff fbbd 	bl	8003456 <LL_RCC_IsActiveFlag_C2HPRE>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f1      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff facb 	bl	800328e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003cf8:	f7fd ff76 	bl	8001be8 <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d00:	f7fd ff72 	bl	8001be8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0b5      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d12:	f7ff fbb3 	bl	800347c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f1      	beq.n	8003d00 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d016      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fac5 	bl	80032bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d32:	f7fd ff59 	bl	8001be8 <HAL_GetTick>
 8003d36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d3a:	f7fd ff55 	bl	8001be8 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e098      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d4c:	f7ff fba9 	bl	80034a2 <LL_RCC_IsActiveFlag_PPRE1>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f1      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d017      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fabb 	bl	80032e4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d6e:	f7fd ff3b 	bl	8001be8 <HAL_GetTick>
 8003d72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d76:	f7fd ff37 	bl	8001be8 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e07a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003d88:	f7ff fb9d 	bl	80034c6 <LL_RCC_IsActiveFlag_PPRE2>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f1      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d043      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d106      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003da6:	f7ff f85b 	bl	8002e60 <LL_RCC_HSE_IsReady>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11e      	bne.n	8003dee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e064      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003dbc:	f7ff faf6 	bl	80033ac <LL_RCC_PLL_IsReady>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d113      	bne.n	8003dee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e059      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003dd2:	f7ff f9c3 	bl	800315c <LL_RCC_MSI_IsReady>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d108      	bne.n	8003dee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e04e      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003de0:	f7ff f86e 	bl	8002ec0 <LL_RCC_HSI_IsReady>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e047      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fa01 	bl	80031fa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df8:	f7fd fef6 	bl	8001be8 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e00:	f7fd fef2 	bl	8001be8 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e033      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	f7ff fa04 	bl	8003222 <LL_RCC_GetSysClkSource>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d1ec      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d21b      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 0207 	bic.w	r2, r3, #7
 8003e3c:	4912      	ldr	r1, [pc, #72]	; (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fd fed0 	bl	8001be8 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e4c:	f7fd fecc 	bl	8001be8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e00f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1ef      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8003e6c:	f7fd fd74 	bl	8001958 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003e70:	f7fd fec6 	bl	8001c00 <HAL_GetTickPrio>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fd fe68 	bl	8001b4c <HAL_InitTick>
 8003e7c:	4603      	mov	r3, r0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	58004000 	.word	0x58004000

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e92:	f7ff f9c6 	bl	8003222 <LL_RCC_GetSysClkSource>
 8003e96:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003e9e:	f7ff f982 	bl	80031a6 <LL_RCC_MSI_GetRange>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	4a2a      	ldr	r2, [pc, #168]	; (8003f54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	e04a      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d102      	bne.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eba:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e044      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d10a      	bne.n	8003edc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ec6:	f7fe ff7d 	bl	8002dc4 <LL_RCC_HSE_IsEnabledDiv2>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003ed0:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e039      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003ed6:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	e036      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003edc:	f7ff fa9d 	bl	800341a <LL_RCC_PLL_GetMainSource>
 8003ee0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d002      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x62>
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d003      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x68>
 8003eec:	e00d      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003eee:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ef0:	60bb      	str	r3, [r7, #8]
        break;
 8003ef2:	e015      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ef4:	f7fe ff66 	bl	8002dc4 <LL_RCC_HSE_IsEnabledDiv2>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003efe:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f00:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003f02:	e00d      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8003f04:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f06:	60bb      	str	r3, [r7, #8]
        break;
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003f0a:	f7ff f94c 	bl	80031a6 <LL_RCC_MSI_GetRange>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1c:	60bb      	str	r3, [r7, #8]
        break;
 8003f1e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003f20:	f7ff fa56 	bl	80033d0 <LL_RCC_PLL_GetN>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	fb03 f402 	mul.w	r4, r3, r2
 8003f2c:	f7ff fa69 	bl	8003402 <LL_RCC_PLL_GetDivider>
 8003f30:	4603      	mov	r3, r0
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	3301      	adds	r3, #1
 8003f36:	fbb4 f4f3 	udiv	r4, r4, r3
 8003f3a:	f7ff fa56 	bl	80033ea <LL_RCC_PLL_GetR>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	0f5b      	lsrs	r3, r3, #29
 8003f42:	3301      	adds	r3, #1
 8003f44:	fbb4 f3f3 	udiv	r3, r4, r3
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}
 8003f54:	08007938 	.word	0x08007938
 8003f58:	00f42400 	.word	0x00f42400
 8003f5c:	01e84800 	.word	0x01e84800

08003f60 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f60:	b598      	push	{r3, r4, r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003f64:	f7ff ff92 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003f68:	4604      	mov	r4, r0
 8003f6a:	f7ff f9cf 	bl	800330c <LL_RCC_GetAHBPrescaler>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	4a03      	ldr	r2, [pc, #12]	; (8003f84 <HAL_RCC_GetHCLKFreq+0x24>)
 8003f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd98      	pop	{r3, r4, r7, pc}
 8003f84:	080078d8 	.word	0x080078d8

08003f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f88:	b598      	push	{r3, r4, r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f8c:	f7ff ffe8 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003f90:	4604      	mov	r4, r0
 8003f92:	f7ff f9d5 	bl	8003340 <LL_RCC_GetAPB1Prescaler>
 8003f96:	4603      	mov	r3, r0
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd98      	pop	{r3, r4, r7, pc}
 8003fb0:	08007918 	.word	0x08007918

08003fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb4:	b598      	push	{r3, r4, r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003fb8:	f7ff ffd2 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	f7ff f9cb 	bl	8003358 <LL_RCC_GetAPB2Prescaler>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	0adb      	lsrs	r3, r3, #11
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd98      	pop	{r3, r4, r7, pc}
 8003fdc:	08007918 	.word	0x08007918

08003fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2bb0      	cmp	r3, #176	; 0xb0
 8003fec:	d903      	bls.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e007      	b.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	4a11      	ldr	r2, [pc, #68]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004004:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004006:	f7ff f98d 	bl	8003324 <LL_RCC_GetAHB4Prescaler>
 800400a:	4603      	mov	r3, r0
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	4a0d      	ldr	r2, [pc, #52]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	0c9c      	lsrs	r4, r3, #18
 800402a:	f7fe febd 	bl	8002da8 <HAL_PWREx_GetVoltageRange>
 800402e:	4603      	mov	r3, r0
 8004030:	4619      	mov	r1, r3
 8004032:	4620      	mov	r0, r4
 8004034:	f000 f80c 	bl	8004050 <RCC_SetFlashLatency>
 8004038:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	bd90      	pop	{r4, r7, pc}
 8004042:	bf00      	nop
 8004044:	08007938 	.word	0x08007938
 8004048:	080078d8 	.word	0x080078d8
 800404c:	431bde83 	.word	0x431bde83

08004050 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b093      	sub	sp, #76	; 0x4c
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800405a:	4b39      	ldr	r3, [pc, #228]	; (8004140 <RCC_SetFlashLatency+0xf0>)
 800405c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004066:	4a37      	ldr	r2, [pc, #220]	; (8004144 <RCC_SetFlashLatency+0xf4>)
 8004068:	f107 031c 	add.w	r3, r7, #28
 800406c:	ca07      	ldmia	r2, {r0, r1, r2}
 800406e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004072:	4b35      	ldr	r3, [pc, #212]	; (8004148 <RCC_SetFlashLatency+0xf8>)
 8004074:	f107 040c 	add.w	r4, r7, #12
 8004078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800407a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800407e:	2300      	movs	r3, #0
 8004080:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004088:	d11c      	bne.n	80040c4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800408a:	2300      	movs	r3, #0
 800408c:	643b      	str	r3, [r7, #64]	; 0x40
 800408e:	e015      	b.n	80040bc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004098:	4413      	add	r3, r2
 800409a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d808      	bhi.n	80040b6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80040a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040ac:	4413      	add	r3, r2
 80040ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80040b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80040b4:	e022      	b.n	80040fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80040b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b8:	3301      	adds	r3, #1
 80040ba:	643b      	str	r3, [r7, #64]	; 0x40
 80040bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d9e6      	bls.n	8004090 <RCC_SetFlashLatency+0x40>
 80040c2:	e01b      	b.n	80040fc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c8:	e015      	b.n	80040f6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040d2:	4413      	add	r3, r2
 80040d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d808      	bhi.n	80040f0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80040de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040e6:	4413      	add	r3, r2
 80040e8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80040ec:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80040ee:	e005      	b.n	80040fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80040f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f2:	3301      	adds	r3, #1
 80040f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d9e6      	bls.n	80040ca <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80040fc:	4b13      	ldr	r3, [pc, #76]	; (800414c <RCC_SetFlashLatency+0xfc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 0207 	bic.w	r2, r3, #7
 8004104:	4911      	ldr	r1, [pc, #68]	; (800414c <RCC_SetFlashLatency+0xfc>)
 8004106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800410c:	f7fd fd6c 	bl	8001be8 <HAL_GetTick>
 8004110:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004112:	e008      	b.n	8004126 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004114:	f7fd fd68 	bl	8001be8 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e007      	b.n	8004136 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <RCC_SetFlashLatency+0xfc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004130:	429a      	cmp	r2, r3
 8004132:	d1ef      	bne.n	8004114 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	374c      	adds	r7, #76	; 0x4c
 800413a:	46bd      	mov	sp, r7
 800413c:	bd90      	pop	{r4, r7, pc}
 800413e:	bf00      	nop
 8004140:	0800789c 	.word	0x0800789c
 8004144:	080078ac 	.word	0x080078ac
 8004148:	080078b8 	.word	0x080078b8
 800414c:	58004000 	.word	0x58004000

08004150 <LL_RCC_LSE_IsEnabled>:
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <LL_RCC_LSE_IsEnabled+0x18>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <LL_RCC_LSE_IsEnabled+0x1a>
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_RCC_LSE_IsReady>:
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b02      	cmp	r3, #2
 8004186:	d101      	bne.n	800418c <LL_RCC_LSE_IsReady+0x18>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_RCC_LSE_IsReady+0x1a>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_MSI_EnablePLLMode>:
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a6:	f043 0304 	orr.w	r3, r3, #4
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_SetRFWKPClockSource>:
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_RCC_SetSMPSClockSource>:
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80041ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	f023 0203 	bic.w	r2, r3, #3
 80041f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <LL_RCC_SetSMPSPrescaler>:
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800421c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4313      	orrs	r3, r2
 8004224:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <LL_RCC_SetUSARTClockSource>:
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <LL_RCC_SetLPUARTClockSource>:
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <LL_RCC_SetI2CClockSource>:
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004296:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80042a2:	43db      	mvns	r3, r3
 80042a4:	401a      	ands	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80042ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_RCC_SetLPTIMClockSource>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	43db      	mvns	r3, r3
 80042dc:	401a      	ands	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_RCC_SetSAIClockSource>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800430c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_RCC_SetRNGClockSource>:
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_RCC_SetCLK48ClockSource>:
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_RCC_SetUSBClockSource>:
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ffe3 	bl	8004350 <LL_RCC_SetCLK48ClockSource>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <LL_RCC_SetADCClockSource>:
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <LL_RCC_SetRTCClockSource>:
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <LL_RCC_GetRTCClockSource>:
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_RCC_ForceBackupDomainReset>:
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004426:	b480      	push	{r7}
 8004428:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800442a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_RCC_PLLSAI1_Enable>:
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004456:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <LL_RCC_PLLSAI1_Disable>:
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004474:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004478:	6013      	str	r3, [r2, #0]
}
 800447a:	bf00      	nop
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <LL_RCC_PLLSAI1_IsReady>:
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004496:	d101      	bne.n	800449c <LL_RCC_PLLSAI1_IsReady+0x18>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80044b4:	2300      	movs	r3, #0
 80044b6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d033      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044cc:	d00c      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80044ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d2:	d802      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044d8:	e017      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80044da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044de:	d017      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80044e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044e4:	d016      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80044e6:	e010      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80044f8:	e00d      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f94d 	bl	800479e <RCCEx_PLLSAI1_ConfigNP>
 8004504:	4603      	mov	r3, r0
 8004506:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004508:	e005      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	77fb      	strb	r3, [r7, #31]
        break;
 800450e:	e002      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004510:	bf00      	nop
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004516:	7ffb      	ldrb	r3, [r7, #31]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d105      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fee9 	bl	80042f8 <LL_RCC_SetSAIClockSource>
 8004526:	e001      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	7ffb      	ldrb	r3, [r7, #31]
 800452a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004534:	2b00      	cmp	r3, #0
 8004536:	d046      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004538:	f7ff ff57 	bl	80043ea <LL_RCC_GetRTCClockSource>
 800453c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	429a      	cmp	r2, r3
 8004546:	d03c      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004548:	f7fe fc1e 	bl	8002d88 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff31 	bl	80043be <LL_RCC_SetRTCClockSource>
 800455c:	e02e      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800455e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004568:	f7ff ff4c 	bl	8004404 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800456c:	f7ff ff5b 	bl	8004426 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800457e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004588:	f7ff fde2 	bl	8004150 <LL_RCC_LSE_IsEnabled>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d114      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004592:	f7fd fb29 	bl	8001be8 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004598:	e00b      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fd fb25 	bl	8001be8 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d902      	bls.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	77fb      	strb	r3, [r7, #31]
              break;
 80045b0:	e004      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80045b2:	f7ff fddf 	bl	8004174 <LL_RCC_LSE_IsReady>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d1ee      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80045bc:	7ffb      	ldrb	r3, [r7, #31]
 80045be:	77bb      	strb	r3, [r7, #30]
 80045c0:	e001      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c2:	7ffb      	ldrb	r3, [r7, #31]
 80045c4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fe2b 	bl	8004232 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d004      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fe36 	bl	800425e <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fe5e 	bl	80042c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fe53 	bl	80042c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fe2b 	bl	800428a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fe20 	bl	800428a <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d022      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fe8e 	bl	800437c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004668:	d107      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004678:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004682:	d10b      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f8e3 	bl	8004854 <RCCEx_PLLSAI1_ConfigNQ>
 800468e:	4603      	mov	r3, r0
 8004690:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004692:	7ffb      	ldrb	r3, [r7, #31]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8004698:	7ffb      	ldrb	r3, [r7, #31]
 800469a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d02b      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b0:	d008      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ba:	d003      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fe2b 	bl	8004324 <LL_RCC_SetRNGClockSource>
 80046ce:	e00a      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	2000      	movs	r0, #0
 80046dc:	f7ff fe22 	bl	8004324 <LL_RCC_SetRNGClockSource>
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff fe35 	bl	8004350 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80046ee:	d107      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d022      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fe3e 	bl	8004392 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800471e:	d107      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004738:	d10b      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3304      	adds	r3, #4
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f8e3 	bl	800490a <RCCEx_PLLSAI1_ConfigNR>
 8004744:	4603      	mov	r3, r0
 8004746:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004748:	7ffb      	ldrb	r3, [r7, #31]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800474e:	7ffb      	ldrb	r3, [r7, #31]
 8004750:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fd27 	bl	80041b6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fd46 	bl	800420a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fd2d 	bl	80041e2 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8004788:	7fbb      	ldrb	r3, [r7, #30]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004796:	f7ff fcff 	bl	8004198 <LL_RCC_MSI_EnablePLLMode>
}
 800479a:	bf00      	nop
 800479c:	bd80      	pop	{r7, pc}

0800479e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80047aa:	f7ff fe5c 	bl	8004466 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047ae:	f7fd fa1b 	bl	8001be8 <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80047b4:	e009      	b.n	80047ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047b6:	f7fd fa17 	bl	8001be8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d902      	bls.n	80047ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	73fb      	strb	r3, [r7, #15]
      break;
 80047c8:	e004      	b.n	80047d4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80047ca:	f7ff fe5b 	bl	8004484 <LL_RCC_PLLSAI1_IsReady>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d137      	bne.n	800484a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80047da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ee:	4313      	orrs	r3, r2
 80047f0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80047f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004804:	4313      	orrs	r3, r2
 8004806:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004808:	f7ff fe1e 	bl	8004448 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480c:	f7fd f9ec 	bl	8001be8 <HAL_GetTick>
 8004810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004812:	e009      	b.n	8004828 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004814:	f7fd f9e8 	bl	8001be8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d902      	bls.n	8004828 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	73fb      	strb	r3, [r7, #15]
        break;
 8004826:	e004      	b.n	8004832 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004828:	f7ff fe2c 	bl	8004484 <LL_RCC_PLLSAI1_IsReady>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d1f0      	bne.n	8004814 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d108      	bne.n	800484a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004846:	4313      	orrs	r3, r2
 8004848:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004860:	f7ff fe01 	bl	8004466 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004864:	f7fd f9c0 	bl	8001be8 <HAL_GetTick>
 8004868:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800486a:	e009      	b.n	8004880 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800486c:	f7fd f9bc 	bl	8001be8 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d902      	bls.n	8004880 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	73fb      	strb	r3, [r7, #15]
      break;
 800487e:	e004      	b.n	800488a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004880:	f7ff fe00 	bl	8004484 <LL_RCC_PLLSAI1_IsReady>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d137      	bne.n	8004900 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a4:	4313      	orrs	r3, r2
 80048a6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80048a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ba:	4313      	orrs	r3, r2
 80048bc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80048be:	f7ff fdc3 	bl	8004448 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c2:	f7fd f991 	bl	8001be8 <HAL_GetTick>
 80048c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80048c8:	e009      	b.n	80048de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ca:	f7fd f98d 	bl	8001be8 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d902      	bls.n	80048de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	73fb      	strb	r3, [r7, #15]
        break;
 80048dc:	e004      	b.n	80048e8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80048de:	f7ff fdd1 	bl	8004484 <LL_RCC_PLLSAI1_IsReady>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d1f0      	bne.n	80048ca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d108      	bne.n	8004900 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048fc:	4313      	orrs	r3, r2
 80048fe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004916:	f7ff fda6 	bl	8004466 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800491a:	f7fd f965 	bl	8001be8 <HAL_GetTick>
 800491e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004920:	e009      	b.n	8004936 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004922:	f7fd f961 	bl	8001be8 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d902      	bls.n	8004936 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	73fb      	strb	r3, [r7, #15]
      break;
 8004934:	e004      	b.n	8004940 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004936:	f7ff fda5 	bl	8004484 <LL_RCC_PLLSAI1_IsReady>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f0      	bne.n	8004922 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d137      	bne.n	80049b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800495a:	4313      	orrs	r3, r2
 800495c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800495e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004970:	4313      	orrs	r3, r2
 8004972:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004974:	f7ff fd68 	bl	8004448 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004978:	f7fd f936 	bl	8001be8 <HAL_GetTick>
 800497c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800497e:	e009      	b.n	8004994 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004980:	f7fd f932 	bl	8001be8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d902      	bls.n	8004994 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	73fb      	strb	r3, [r7, #15]
        break;
 8004992:	e004      	b.n	800499e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004994:	f7ff fd76 	bl	8004484 <LL_RCC_PLLSAI1_IsReady>
 8004998:	4603      	mov	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d1f0      	bne.n	8004980 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80049a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b2:	4313      	orrs	r3, r2
 80049b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e090      	b.n	8004af4 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fc fe80 	bl	80016ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	22ca      	movs	r2, #202	; 0xca
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2253      	movs	r2, #83	; 0x53
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f89f 	bl	8004b48 <RTC_EnterInitMode>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d009      	beq.n	8004a24 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	22ff      	movs	r2, #255	; 0xff
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e067      	b.n	8004af4 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a36:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6899      	ldr	r1, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6919      	ldr	r1, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	041a      	lsls	r2, r3, #16
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a82:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0203 	bic.w	r2, r2, #3
 8004a92:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d113      	bne.n	8004ae2 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f81e 	bl	8004afc <HAL_RTC_WaitForSynchro>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	22ff      	movs	r2, #255	; 0xff
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e008      	b.n	8004af4 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	22ff      	movs	r2, #255	; 0xff
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
  }
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b12:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004b14:	f7fd f868 	bl	8001be8 <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b1a:	e009      	b.n	8004b30 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b1c:	f7fd f864 	bl	8001be8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b2a:	d901      	bls.n	8004b30 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e007      	b.n	8004b40 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0ee      	beq.n	8004b1c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d119      	bne.n	8004b92 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f04f 32ff 	mov.w	r2, #4294967295
 8004b66:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004b68:	f7fd f83e 	bl	8001be8 <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b6e:	e009      	b.n	8004b84 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b70:	f7fd f83a 	bl	8001be8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b7e:	d901      	bls.n	8004b84 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e007      	b.n	8004b94 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0ee      	beq.n	8004b70 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <LL_RCC_GetUSARTClockSource>:
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4013      	ands	r3, r2
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <LL_RCC_GetLPUARTClockSource>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4013      	ands	r3, r2
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e042      	b.n	8004c74 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7fc fd89 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2224      	movs	r2, #36	; 0x24
 8004c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8c2 	bl	8004da8 <UART_SetConfig>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e022      	b.n	8004c74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fac4 	bl	80051c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fb4b 	bl	8005308 <UART_CheckIdleState>
 8004c72:	4603      	mov	r3, r0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	f040 8083 	bne.w	8004d9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Transmit+0x28>
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e07b      	b.n	8004da0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Transmit+0x3a>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e074      	b.n	8004da0 <HAL_UART_Transmit+0x124>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2221      	movs	r2, #33	; 0x21
 8004cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004cce:	f7fc ff8b 	bl	8001be8 <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cec:	d108      	bne.n	8004d00 <HAL_UART_Transmit+0x84>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e003      	b.n	8004d08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004d10:	e02c      	b.n	8004d6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fb3b 	bl	8005398 <UART_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e039      	b.n	8004da0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10b      	bne.n	8004d4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	3302      	adds	r3, #2
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	e007      	b.n	8004d5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	781a      	ldrb	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	3301      	adds	r3, #1
 8004d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1cc      	bne.n	8004d12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2140      	movs	r1, #64	; 0x40
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fb08 	bl	8005398 <UART_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e006      	b.n	8004da0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004dac:	b088      	sub	sp, #32
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4ba4      	ldr	r3, [pc, #656]	; (8005070 <UART_SetConfig+0x2c8>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	69f9      	ldr	r1, [r7, #28]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a99      	ldr	r2, [pc, #612]	; (8005074 <UART_SetConfig+0x2cc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	69f9      	ldr	r1, [r7, #28]
 8004e30:	430b      	orrs	r3, r1
 8004e32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	f023 010f 	bic.w	r1, r3, #15
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a8a      	ldr	r2, [pc, #552]	; (8005078 <UART_SetConfig+0x2d0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d121      	bne.n	8004e98 <UART_SetConfig+0xf0>
 8004e54:	2003      	movs	r0, #3
 8004e56:	f7ff fea1 	bl	8004b9c <LL_RCC_GetUSARTClockSource>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d817      	bhi.n	8004e90 <UART_SetConfig+0xe8>
 8004e60:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <UART_SetConfig+0xc0>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004e85 	.word	0x08004e85
 8004e70:	08004e7f 	.word	0x08004e7f
 8004e74:	08004e8b 	.word	0x08004e8b
 8004e78:	2301      	movs	r3, #1
 8004e7a:	76fb      	strb	r3, [r7, #27]
 8004e7c:	e038      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	76fb      	strb	r3, [r7, #27]
 8004e82:	e035      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004e84:	2304      	movs	r3, #4
 8004e86:	76fb      	strb	r3, [r7, #27]
 8004e88:	e032      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	76fb      	strb	r3, [r7, #27]
 8004e8e:	e02f      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004e90:	2310      	movs	r3, #16
 8004e92:	76fb      	strb	r3, [r7, #27]
 8004e94:	bf00      	nop
 8004e96:	e02b      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a75      	ldr	r2, [pc, #468]	; (8005074 <UART_SetConfig+0x2cc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d124      	bne.n	8004eec <UART_SetConfig+0x144>
 8004ea2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004ea6:	f7ff fe89 	bl	8004bbc <LL_RCC_GetLPUARTClockSource>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb0:	d012      	beq.n	8004ed8 <UART_SetConfig+0x130>
 8004eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb6:	d802      	bhi.n	8004ebe <UART_SetConfig+0x116>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <UART_SetConfig+0x124>
 8004ebc:	e012      	b.n	8004ee4 <UART_SetConfig+0x13c>
 8004ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec2:	d006      	beq.n	8004ed2 <UART_SetConfig+0x12a>
 8004ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec8:	d009      	beq.n	8004ede <UART_SetConfig+0x136>
 8004eca:	e00b      	b.n	8004ee4 <UART_SetConfig+0x13c>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	76fb      	strb	r3, [r7, #27]
 8004ed0:	e00e      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	76fb      	strb	r3, [r7, #27]
 8004ed6:	e00b      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	76fb      	strb	r3, [r7, #27]
 8004edc:	e008      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	76fb      	strb	r3, [r7, #27]
 8004ee2:	e005      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	76fb      	strb	r3, [r7, #27]
 8004ee8:	bf00      	nop
 8004eea:	e001      	b.n	8004ef0 <UART_SetConfig+0x148>
 8004eec:	2310      	movs	r3, #16
 8004eee:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a5f      	ldr	r2, [pc, #380]	; (8005074 <UART_SetConfig+0x2cc>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	f040 808e 	bne.w	8005018 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004efc:	7efb      	ldrb	r3, [r7, #27]
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d823      	bhi.n	8004f4a <UART_SetConfig+0x1a2>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x160>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f4b 	.word	0x08004f4b
 8004f18:	08004f3b 	.word	0x08004f3b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f4b 	.word	0x08004f4b
 8004f24:	08004f4b 	.word	0x08004f4b
 8004f28:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f2c:	f7ff f82c 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 8004f30:	6178      	str	r0, [r7, #20]
        break;
 8004f32:	e00f      	b.n	8004f54 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b51      	ldr	r3, [pc, #324]	; (800507c <UART_SetConfig+0x2d4>)
 8004f36:	617b      	str	r3, [r7, #20]
        break;
 8004f38:	e00c      	b.n	8004f54 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fe ffa7 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8004f3e:	6178      	str	r0, [r7, #20]
        break;
 8004f40:	e008      	b.n	8004f54 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f46:	617b      	str	r3, [r7, #20]
        break;
 8004f48:	e004      	b.n	8004f54 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	76bb      	strb	r3, [r7, #26]
        break;
 8004f52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 811c 	beq.w	8005194 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	4a47      	ldr	r2, [pc, #284]	; (8005080 <UART_SetConfig+0x2d8>)
 8004f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f66:	461a      	mov	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4413      	add	r3, r2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d305      	bcc.n	8004f8c <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d902      	bls.n	8004f92 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	76bb      	strb	r3, [r7, #26]
 8004f90:	e100      	b.n	8005194 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f04f 0100 	mov.w	r1, #0
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	4a38      	ldr	r2, [pc, #224]	; (8005080 <UART_SetConfig+0x2d8>)
 8004fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f04f 0400 	mov.w	r4, #0
 8004faa:	461a      	mov	r2, r3
 8004fac:	4623      	mov	r3, r4
 8004fae:	f7fb fdd3 	bl	8000b58 <__aeabi_uldivmod>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4622      	mov	r2, r4
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	f04f 0400 	mov.w	r4, #0
 8004fc2:	0214      	lsls	r4, r2, #8
 8004fc4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004fc8:	020b      	lsls	r3, r1, #8
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6852      	ldr	r2, [r2, #4]
 8004fce:	0852      	lsrs	r2, r2, #1
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	eb13 0b01 	adds.w	fp, r3, r1
 8004fda:	eb44 0c02 	adc.w	ip, r4, r2
 8004fde:	4658      	mov	r0, fp
 8004fe0:	4661      	mov	r1, ip
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	461a      	mov	r2, r3
 8004fec:	4623      	mov	r3, r4
 8004fee:	f7fb fdb3 	bl	8000b58 <__aeabi_uldivmod>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ffe:	d308      	bcc.n	8005012 <UART_SetConfig+0x26a>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005006:	d204      	bcs.n	8005012 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	e0c0      	b.n	8005194 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	76bb      	strb	r3, [r7, #26]
 8005016:	e0bd      	b.n	8005194 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005020:	d169      	bne.n	80050f6 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005022:	7efb      	ldrb	r3, [r7, #27]
 8005024:	3b01      	subs	r3, #1
 8005026:	2b07      	cmp	r3, #7
 8005028:	d82c      	bhi.n	8005084 <UART_SetConfig+0x2dc>
 800502a:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <UART_SetConfig+0x288>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005051 	.word	0x08005051
 8005034:	08005059 	.word	0x08005059
 8005038:	08005085 	.word	0x08005085
 800503c:	0800505f 	.word	0x0800505f
 8005040:	08005085 	.word	0x08005085
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
 800504c:	08005067 	.word	0x08005067
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005050:	f7fe ffb0 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 8005054:	6178      	str	r0, [r7, #20]
        break;
 8005056:	e01a      	b.n	800508e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005058:	4b08      	ldr	r3, [pc, #32]	; (800507c <UART_SetConfig+0x2d4>)
 800505a:	617b      	str	r3, [r7, #20]
        break;
 800505c:	e017      	b.n	800508e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505e:	f7fe ff15 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8005062:	6178      	str	r0, [r7, #20]
        break;
 8005064:	e013      	b.n	800508e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506a:	617b      	str	r3, [r7, #20]
        break;
 800506c:	e00f      	b.n	800508e <UART_SetConfig+0x2e6>
 800506e:	bf00      	nop
 8005070:	cfff69f3 	.word	0xcfff69f3
 8005074:	40008000 	.word	0x40008000
 8005078:	40013800 	.word	0x40013800
 800507c:	00f42400 	.word	0x00f42400
 8005080:	08007978 	.word	0x08007978
      default:
        pclk = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	76bb      	strb	r3, [r7, #26]
        break;
 800508c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d07f      	beq.n	8005194 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	4a48      	ldr	r2, [pc, #288]	; (80051bc <UART_SetConfig+0x414>)
 800509a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509e:	461a      	mov	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a6:	005a      	lsls	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	441a      	add	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	d916      	bls.n	80050f0 <UART_SetConfig+0x348>
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d212      	bcs.n	80050f0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f023 030f 	bic.w	r3, r3, #15
 80050d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	b29a      	uxth	r2, r3
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	89fa      	ldrh	r2, [r7, #14]
 80050ec:	60da      	str	r2, [r3, #12]
 80050ee:	e051      	b.n	8005194 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	76bb      	strb	r3, [r7, #26]
 80050f4:	e04e      	b.n	8005194 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050f6:	7efb      	ldrb	r3, [r7, #27]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	2b07      	cmp	r3, #7
 80050fc:	d821      	bhi.n	8005142 <UART_SetConfig+0x39a>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0x35c>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	08005125 	.word	0x08005125
 8005108:	0800512d 	.word	0x0800512d
 800510c:	08005143 	.word	0x08005143
 8005110:	08005133 	.word	0x08005133
 8005114:	08005143 	.word	0x08005143
 8005118:	08005143 	.word	0x08005143
 800511c:	08005143 	.word	0x08005143
 8005120:	0800513b 	.word	0x0800513b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005124:	f7fe ff46 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 8005128:	6178      	str	r0, [r7, #20]
        break;
 800512a:	e00f      	b.n	800514c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800512c:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <UART_SetConfig+0x418>)
 800512e:	617b      	str	r3, [r7, #20]
        break;
 8005130:	e00c      	b.n	800514c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005132:	f7fe feab 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8005136:	6178      	str	r0, [r7, #20]
        break;
 8005138:	e008      	b.n	800514c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800513a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513e:	617b      	str	r3, [r7, #20]
        break;
 8005140:	e004      	b.n	800514c <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	76bb      	strb	r3, [r7, #26]
        break;
 800514a:	bf00      	nop
    }

    if (pclk != 0U)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d020      	beq.n	8005194 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	4a19      	ldr	r2, [pc, #100]	; (80051bc <UART_SetConfig+0x414>)
 8005158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800515c:	461a      	mov	r2, r3
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	fbb3 f2f2 	udiv	r2, r3, r2
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	441a      	add	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	b29b      	uxth	r3, r3
 8005176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b0f      	cmp	r3, #15
 800517c:	d908      	bls.n	8005190 <UART_SetConfig+0x3e8>
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005184:	d204      	bcs.n	8005190 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	60da      	str	r2, [r3, #12]
 800518e:	e001      	b.n	8005194 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80051b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80051bc:	08007978 	.word	0x08007978
 80051c0:	00f42400 	.word	0x00f42400

080051c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01a      	beq.n	80052da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c2:	d10a      	bne.n	80052da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af02      	add	r7, sp, #8
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005318:	f7fc fc66 	bl	8001be8 <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b08      	cmp	r3, #8
 800532a:	d10e      	bne.n	800534a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800532c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f82c 	bl	8005398 <UART_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e022      	b.n	8005390 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b04      	cmp	r3, #4
 8005356:	d10e      	bne.n	8005376 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f816 	bl	8005398 <UART_WaitOnFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e00c      	b.n	8005390 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a8:	e062      	b.n	8005470 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d05e      	beq.n	8005470 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b2:	f7fc fc19 	bl	8001be8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d302      	bcc.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11d      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e045      	b.n	8005490 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d02e      	beq.n	8005470 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005420:	d126      	bne.n	8005470 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800542a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800543a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e00f      	b.n	8005490 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4013      	ands	r3, r2
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	429a      	cmp	r2, r3
 800548c:	d08d      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_UARTEx_DisableFifoMode+0x16>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e027      	b.n	80054fe <HAL_UARTEx_DisableFifoMode+0x66>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2224      	movs	r2, #36	; 0x24
 80054ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800551e:	2302      	movs	r3, #2
 8005520:	e02d      	b.n	800557e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2224      	movs	r2, #36	; 0x24
 800552e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f850 	bl	8005604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800559a:	2302      	movs	r3, #2
 800559c:	e02d      	b.n	80055fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2224      	movs	r2, #36	; 0x24
 80055aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f812 	bl	8005604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005604:	b480      	push	{r7}
 8005606:	b089      	sub	sp, #36	; 0x24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800560c:	4a2f      	ldr	r2, [pc, #188]	; (80056cc <UARTEx_SetNbDataToProcess+0xc8>)
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005616:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800561a:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <UARTEx_SetNbDataToProcess+0xcc>)
 800561c:	f107 030c 	add.w	r3, r7, #12
 8005620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005624:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800562c:	2b00      	cmp	r3, #0
 800562e:	d108      	bne.n	8005642 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005640:	e03d      	b.n	80056be <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005642:	2308      	movs	r3, #8
 8005644:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005646:	2308      	movs	r3, #8
 8005648:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	0e5b      	lsrs	r3, r3, #25
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	0f5b      	lsrs	r3, r3, #29
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800566a:	7fbb      	ldrb	r3, [r7, #30]
 800566c:	7f3a      	ldrb	r2, [r7, #28]
 800566e:	f107 0120 	add.w	r1, r7, #32
 8005672:	440a      	add	r2, r1
 8005674:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	7f3a      	ldrb	r2, [r7, #28]
 800567e:	f107 0120 	add.w	r1, r7, #32
 8005682:	440a      	add	r2, r1
 8005684:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005688:	fb93 f3f2 	sdiv	r3, r3, r2
 800568c:	b29a      	uxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005694:	7ffb      	ldrb	r3, [r7, #31]
 8005696:	7f7a      	ldrb	r2, [r7, #29]
 8005698:	f107 0120 	add.w	r1, r7, #32
 800569c:	440a      	add	r2, r1
 800569e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	7f7a      	ldrb	r2, [r7, #29]
 80056a8:	f107 0120 	add.w	r1, r7, #32
 80056ac:	440a      	add	r2, r1
 80056ae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056be:	bf00      	nop
 80056c0:	3724      	adds	r7, #36	; 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	080078c8 	.word	0x080078c8
 80056d0:	080078d0 	.word	0x080078d0

080056d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056dc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80056e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	4313      	orrs	r3, r2
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800570e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005712:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	b29b      	uxth	r3, r3
 8005720:	43db      	mvns	r3, r3
 8005722:	b29b      	uxth	r3, r3
 8005724:	4013      	ands	r3, r2
 8005726:	b29a      	uxth	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800573c:	b084      	sub	sp, #16
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	f107 0014 	add.w	r0, r7, #20
 800574a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff ffb0 	bl	80056d4 <USB_EnableGlobalInt>

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005780:	b004      	add	sp, #16
 8005782:	4770      	bx	lr

08005784 <__errno>:
 8005784:	4b01      	ldr	r3, [pc, #4]	; (800578c <__errno+0x8>)
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000010 	.word	0x20000010

08005790 <__libc_init_array>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4e0d      	ldr	r6, [pc, #52]	; (80057c8 <__libc_init_array+0x38>)
 8005794:	4c0d      	ldr	r4, [pc, #52]	; (80057cc <__libc_init_array+0x3c>)
 8005796:	1ba4      	subs	r4, r4, r6
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	2500      	movs	r5, #0
 800579c:	42a5      	cmp	r5, r4
 800579e:	d109      	bne.n	80057b4 <__libc_init_array+0x24>
 80057a0:	4e0b      	ldr	r6, [pc, #44]	; (80057d0 <__libc_init_array+0x40>)
 80057a2:	4c0c      	ldr	r4, [pc, #48]	; (80057d4 <__libc_init_array+0x44>)
 80057a4:	f002 f85e 	bl	8007864 <_init>
 80057a8:	1ba4      	subs	r4, r4, r6
 80057aa:	10a4      	asrs	r4, r4, #2
 80057ac:	2500      	movs	r5, #0
 80057ae:	42a5      	cmp	r5, r4
 80057b0:	d105      	bne.n	80057be <__libc_init_array+0x2e>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057b8:	4798      	blx	r3
 80057ba:	3501      	adds	r5, #1
 80057bc:	e7ee      	b.n	800579c <__libc_init_array+0xc>
 80057be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057c2:	4798      	blx	r3
 80057c4:	3501      	adds	r5, #1
 80057c6:	e7f2      	b.n	80057ae <__libc_init_array+0x1e>
 80057c8:	08007c58 	.word	0x08007c58
 80057cc:	08007c58 	.word	0x08007c58
 80057d0:	08007c58 	.word	0x08007c58
 80057d4:	08007c5c 	.word	0x08007c5c

080057d8 <memcpy>:
 80057d8:	b510      	push	{r4, lr}
 80057da:	1e43      	subs	r3, r0, #1
 80057dc:	440a      	add	r2, r1
 80057de:	4291      	cmp	r1, r2
 80057e0:	d100      	bne.n	80057e4 <memcpy+0xc>
 80057e2:	bd10      	pop	{r4, pc}
 80057e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ec:	e7f7      	b.n	80057de <memcpy+0x6>

080057ee <memset>:
 80057ee:	4402      	add	r2, r0
 80057f0:	4603      	mov	r3, r0
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d100      	bne.n	80057f8 <memset+0xa>
 80057f6:	4770      	bx	lr
 80057f8:	f803 1b01 	strb.w	r1, [r3], #1
 80057fc:	e7f9      	b.n	80057f2 <memset+0x4>

080057fe <__cvt>:
 80057fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005802:	ec55 4b10 	vmov	r4, r5, d0
 8005806:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005808:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800580c:	2d00      	cmp	r5, #0
 800580e:	460e      	mov	r6, r1
 8005810:	4691      	mov	r9, r2
 8005812:	4619      	mov	r1, r3
 8005814:	bfb8      	it	lt
 8005816:	4622      	movlt	r2, r4
 8005818:	462b      	mov	r3, r5
 800581a:	f027 0720 	bic.w	r7, r7, #32
 800581e:	bfbb      	ittet	lt
 8005820:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005824:	461d      	movlt	r5, r3
 8005826:	2300      	movge	r3, #0
 8005828:	232d      	movlt	r3, #45	; 0x2d
 800582a:	bfb8      	it	lt
 800582c:	4614      	movlt	r4, r2
 800582e:	2f46      	cmp	r7, #70	; 0x46
 8005830:	700b      	strb	r3, [r1, #0]
 8005832:	d004      	beq.n	800583e <__cvt+0x40>
 8005834:	2f45      	cmp	r7, #69	; 0x45
 8005836:	d100      	bne.n	800583a <__cvt+0x3c>
 8005838:	3601      	adds	r6, #1
 800583a:	2102      	movs	r1, #2
 800583c:	e000      	b.n	8005840 <__cvt+0x42>
 800583e:	2103      	movs	r1, #3
 8005840:	ab03      	add	r3, sp, #12
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	ab02      	add	r3, sp, #8
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	4632      	mov	r2, r6
 800584a:	4653      	mov	r3, sl
 800584c:	ec45 4b10 	vmov	d0, r4, r5
 8005850:	f000 fcde 	bl	8006210 <_dtoa_r>
 8005854:	2f47      	cmp	r7, #71	; 0x47
 8005856:	4680      	mov	r8, r0
 8005858:	d102      	bne.n	8005860 <__cvt+0x62>
 800585a:	f019 0f01 	tst.w	r9, #1
 800585e:	d026      	beq.n	80058ae <__cvt+0xb0>
 8005860:	2f46      	cmp	r7, #70	; 0x46
 8005862:	eb08 0906 	add.w	r9, r8, r6
 8005866:	d111      	bne.n	800588c <__cvt+0x8e>
 8005868:	f898 3000 	ldrb.w	r3, [r8]
 800586c:	2b30      	cmp	r3, #48	; 0x30
 800586e:	d10a      	bne.n	8005886 <__cvt+0x88>
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	4620      	mov	r0, r4
 8005876:	4629      	mov	r1, r5
 8005878:	f7fb f8fe 	bl	8000a78 <__aeabi_dcmpeq>
 800587c:	b918      	cbnz	r0, 8005886 <__cvt+0x88>
 800587e:	f1c6 0601 	rsb	r6, r6, #1
 8005882:	f8ca 6000 	str.w	r6, [sl]
 8005886:	f8da 3000 	ldr.w	r3, [sl]
 800588a:	4499      	add	r9, r3
 800588c:	2200      	movs	r2, #0
 800588e:	2300      	movs	r3, #0
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	f7fb f8f0 	bl	8000a78 <__aeabi_dcmpeq>
 8005898:	b938      	cbnz	r0, 80058aa <__cvt+0xac>
 800589a:	2230      	movs	r2, #48	; 0x30
 800589c:	9b03      	ldr	r3, [sp, #12]
 800589e:	454b      	cmp	r3, r9
 80058a0:	d205      	bcs.n	80058ae <__cvt+0xb0>
 80058a2:	1c59      	adds	r1, r3, #1
 80058a4:	9103      	str	r1, [sp, #12]
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e7f8      	b.n	800589c <__cvt+0x9e>
 80058aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80058ae:	9b03      	ldr	r3, [sp, #12]
 80058b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058b2:	eba3 0308 	sub.w	r3, r3, r8
 80058b6:	4640      	mov	r0, r8
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	b004      	add	sp, #16
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080058c0 <__exponent>:
 80058c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058c2:	2900      	cmp	r1, #0
 80058c4:	4604      	mov	r4, r0
 80058c6:	bfba      	itte	lt
 80058c8:	4249      	neglt	r1, r1
 80058ca:	232d      	movlt	r3, #45	; 0x2d
 80058cc:	232b      	movge	r3, #43	; 0x2b
 80058ce:	2909      	cmp	r1, #9
 80058d0:	f804 2b02 	strb.w	r2, [r4], #2
 80058d4:	7043      	strb	r3, [r0, #1]
 80058d6:	dd20      	ble.n	800591a <__exponent+0x5a>
 80058d8:	f10d 0307 	add.w	r3, sp, #7
 80058dc:	461f      	mov	r7, r3
 80058de:	260a      	movs	r6, #10
 80058e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80058e4:	fb06 1115 	mls	r1, r6, r5, r1
 80058e8:	3130      	adds	r1, #48	; 0x30
 80058ea:	2d09      	cmp	r5, #9
 80058ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058f0:	f103 32ff 	add.w	r2, r3, #4294967295
 80058f4:	4629      	mov	r1, r5
 80058f6:	dc09      	bgt.n	800590c <__exponent+0x4c>
 80058f8:	3130      	adds	r1, #48	; 0x30
 80058fa:	3b02      	subs	r3, #2
 80058fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005900:	42bb      	cmp	r3, r7
 8005902:	4622      	mov	r2, r4
 8005904:	d304      	bcc.n	8005910 <__exponent+0x50>
 8005906:	1a10      	subs	r0, r2, r0
 8005908:	b003      	add	sp, #12
 800590a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800590c:	4613      	mov	r3, r2
 800590e:	e7e7      	b.n	80058e0 <__exponent+0x20>
 8005910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005914:	f804 2b01 	strb.w	r2, [r4], #1
 8005918:	e7f2      	b.n	8005900 <__exponent+0x40>
 800591a:	2330      	movs	r3, #48	; 0x30
 800591c:	4419      	add	r1, r3
 800591e:	7083      	strb	r3, [r0, #2]
 8005920:	1d02      	adds	r2, r0, #4
 8005922:	70c1      	strb	r1, [r0, #3]
 8005924:	e7ef      	b.n	8005906 <__exponent+0x46>
	...

08005928 <_printf_float>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	b08d      	sub	sp, #52	; 0x34
 800592e:	460c      	mov	r4, r1
 8005930:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005934:	4616      	mov	r6, r2
 8005936:	461f      	mov	r7, r3
 8005938:	4605      	mov	r5, r0
 800593a:	f001 fa21 	bl	8006d80 <_localeconv_r>
 800593e:	6803      	ldr	r3, [r0, #0]
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	4618      	mov	r0, r3
 8005944:	f7fa fc1c 	bl	8000180 <strlen>
 8005948:	2300      	movs	r3, #0
 800594a:	930a      	str	r3, [sp, #40]	; 0x28
 800594c:	f8d8 3000 	ldr.w	r3, [r8]
 8005950:	9005      	str	r0, [sp, #20]
 8005952:	3307      	adds	r3, #7
 8005954:	f023 0307 	bic.w	r3, r3, #7
 8005958:	f103 0208 	add.w	r2, r3, #8
 800595c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005960:	f8d4 b000 	ldr.w	fp, [r4]
 8005964:	f8c8 2000 	str.w	r2, [r8]
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005970:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005974:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005978:	9307      	str	r3, [sp, #28]
 800597a:	f8cd 8018 	str.w	r8, [sp, #24]
 800597e:	f04f 32ff 	mov.w	r2, #4294967295
 8005982:	4ba7      	ldr	r3, [pc, #668]	; (8005c20 <_printf_float+0x2f8>)
 8005984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005988:	f7fb f8a8 	bl	8000adc <__aeabi_dcmpun>
 800598c:	bb70      	cbnz	r0, 80059ec <_printf_float+0xc4>
 800598e:	f04f 32ff 	mov.w	r2, #4294967295
 8005992:	4ba3      	ldr	r3, [pc, #652]	; (8005c20 <_printf_float+0x2f8>)
 8005994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005998:	f7fb f882 	bl	8000aa0 <__aeabi_dcmple>
 800599c:	bb30      	cbnz	r0, 80059ec <_printf_float+0xc4>
 800599e:	2200      	movs	r2, #0
 80059a0:	2300      	movs	r3, #0
 80059a2:	4640      	mov	r0, r8
 80059a4:	4649      	mov	r1, r9
 80059a6:	f7fb f871 	bl	8000a8c <__aeabi_dcmplt>
 80059aa:	b110      	cbz	r0, 80059b2 <_printf_float+0x8a>
 80059ac:	232d      	movs	r3, #45	; 0x2d
 80059ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b2:	4a9c      	ldr	r2, [pc, #624]	; (8005c24 <_printf_float+0x2fc>)
 80059b4:	4b9c      	ldr	r3, [pc, #624]	; (8005c28 <_printf_float+0x300>)
 80059b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80059ba:	bf8c      	ite	hi
 80059bc:	4690      	movhi	r8, r2
 80059be:	4698      	movls	r8, r3
 80059c0:	2303      	movs	r3, #3
 80059c2:	f02b 0204 	bic.w	r2, fp, #4
 80059c6:	6123      	str	r3, [r4, #16]
 80059c8:	6022      	str	r2, [r4, #0]
 80059ca:	f04f 0900 	mov.w	r9, #0
 80059ce:	9700      	str	r7, [sp, #0]
 80059d0:	4633      	mov	r3, r6
 80059d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80059d4:	4621      	mov	r1, r4
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 f9e6 	bl	8005da8 <_printf_common>
 80059dc:	3001      	adds	r0, #1
 80059de:	f040 808d 	bne.w	8005afc <_printf_float+0x1d4>
 80059e2:	f04f 30ff 	mov.w	r0, #4294967295
 80059e6:	b00d      	add	sp, #52	; 0x34
 80059e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ec:	4642      	mov	r2, r8
 80059ee:	464b      	mov	r3, r9
 80059f0:	4640      	mov	r0, r8
 80059f2:	4649      	mov	r1, r9
 80059f4:	f7fb f872 	bl	8000adc <__aeabi_dcmpun>
 80059f8:	b110      	cbz	r0, 8005a00 <_printf_float+0xd8>
 80059fa:	4a8c      	ldr	r2, [pc, #560]	; (8005c2c <_printf_float+0x304>)
 80059fc:	4b8c      	ldr	r3, [pc, #560]	; (8005c30 <_printf_float+0x308>)
 80059fe:	e7da      	b.n	80059b6 <_printf_float+0x8e>
 8005a00:	6861      	ldr	r1, [r4, #4]
 8005a02:	1c4b      	adds	r3, r1, #1
 8005a04:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005a08:	a80a      	add	r0, sp, #40	; 0x28
 8005a0a:	d13e      	bne.n	8005a8a <_printf_float+0x162>
 8005a0c:	2306      	movs	r3, #6
 8005a0e:	6063      	str	r3, [r4, #4]
 8005a10:	2300      	movs	r3, #0
 8005a12:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005a16:	ab09      	add	r3, sp, #36	; 0x24
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	ec49 8b10 	vmov	d0, r8, r9
 8005a1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a22:	6022      	str	r2, [r4, #0]
 8005a24:	f8cd a004 	str.w	sl, [sp, #4]
 8005a28:	6861      	ldr	r1, [r4, #4]
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f7ff fee7 	bl	80057fe <__cvt>
 8005a30:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005a34:	2b47      	cmp	r3, #71	; 0x47
 8005a36:	4680      	mov	r8, r0
 8005a38:	d109      	bne.n	8005a4e <_printf_float+0x126>
 8005a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3c:	1cd8      	adds	r0, r3, #3
 8005a3e:	db02      	blt.n	8005a46 <_printf_float+0x11e>
 8005a40:	6862      	ldr	r2, [r4, #4]
 8005a42:	4293      	cmp	r3, r2
 8005a44:	dd47      	ble.n	8005ad6 <_printf_float+0x1ae>
 8005a46:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a4a:	fa5f fa8a 	uxtb.w	sl, sl
 8005a4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a54:	d824      	bhi.n	8005aa0 <_printf_float+0x178>
 8005a56:	3901      	subs	r1, #1
 8005a58:	4652      	mov	r2, sl
 8005a5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a5e:	9109      	str	r1, [sp, #36]	; 0x24
 8005a60:	f7ff ff2e 	bl	80058c0 <__exponent>
 8005a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a66:	1813      	adds	r3, r2, r0
 8005a68:	2a01      	cmp	r2, #1
 8005a6a:	4681      	mov	r9, r0
 8005a6c:	6123      	str	r3, [r4, #16]
 8005a6e:	dc02      	bgt.n	8005a76 <_printf_float+0x14e>
 8005a70:	6822      	ldr	r2, [r4, #0]
 8005a72:	07d1      	lsls	r1, r2, #31
 8005a74:	d501      	bpl.n	8005a7a <_printf_float+0x152>
 8005a76:	3301      	adds	r3, #1
 8005a78:	6123      	str	r3, [r4, #16]
 8005a7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0a5      	beq.n	80059ce <_printf_float+0xa6>
 8005a82:	232d      	movs	r3, #45	; 0x2d
 8005a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a88:	e7a1      	b.n	80059ce <_printf_float+0xa6>
 8005a8a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005a8e:	f000 8177 	beq.w	8005d80 <_printf_float+0x458>
 8005a92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005a96:	d1bb      	bne.n	8005a10 <_printf_float+0xe8>
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	d1b9      	bne.n	8005a10 <_printf_float+0xe8>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e7b6      	b.n	8005a0e <_printf_float+0xe6>
 8005aa0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005aa4:	d119      	bne.n	8005ada <_printf_float+0x1b2>
 8005aa6:	2900      	cmp	r1, #0
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	dd0c      	ble.n	8005ac6 <_printf_float+0x19e>
 8005aac:	6121      	str	r1, [r4, #16]
 8005aae:	b913      	cbnz	r3, 8005ab6 <_printf_float+0x18e>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	07d2      	lsls	r2, r2, #31
 8005ab4:	d502      	bpl.n	8005abc <_printf_float+0x194>
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	440b      	add	r3, r1
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abe:	65a3      	str	r3, [r4, #88]	; 0x58
 8005ac0:	f04f 0900 	mov.w	r9, #0
 8005ac4:	e7d9      	b.n	8005a7a <_printf_float+0x152>
 8005ac6:	b913      	cbnz	r3, 8005ace <_printf_float+0x1a6>
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	07d0      	lsls	r0, r2, #31
 8005acc:	d501      	bpl.n	8005ad2 <_printf_float+0x1aa>
 8005ace:	3302      	adds	r3, #2
 8005ad0:	e7f3      	b.n	8005aba <_printf_float+0x192>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e7f1      	b.n	8005aba <_printf_float+0x192>
 8005ad6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005ada:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	db05      	blt.n	8005aee <_printf_float+0x1c6>
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	07d1      	lsls	r1, r2, #31
 8005ae8:	d5e8      	bpl.n	8005abc <_printf_float+0x194>
 8005aea:	3301      	adds	r3, #1
 8005aec:	e7e5      	b.n	8005aba <_printf_float+0x192>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfd4      	ite	le
 8005af2:	f1c3 0302 	rsble	r3, r3, #2
 8005af6:	2301      	movgt	r3, #1
 8005af8:	4413      	add	r3, r2
 8005afa:	e7de      	b.n	8005aba <_printf_float+0x192>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	055a      	lsls	r2, r3, #21
 8005b00:	d407      	bmi.n	8005b12 <_printf_float+0x1ea>
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	4642      	mov	r2, r8
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d12b      	bne.n	8005b68 <_printf_float+0x240>
 8005b10:	e767      	b.n	80059e2 <_printf_float+0xba>
 8005b12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005b16:	f240 80dc 	bls.w	8005cd2 <_printf_float+0x3aa>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b22:	f7fa ffa9 	bl	8000a78 <__aeabi_dcmpeq>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d033      	beq.n	8005b92 <_printf_float+0x26a>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4a41      	ldr	r2, [pc, #260]	; (8005c34 <_printf_float+0x30c>)
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f af54 	beq.w	80059e2 <_printf_float+0xba>
 8005b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	db02      	blt.n	8005b48 <_printf_float+0x220>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	07d8      	lsls	r0, r3, #31
 8005b46:	d50f      	bpl.n	8005b68 <_printf_float+0x240>
 8005b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	f43f af45 	beq.w	80059e2 <_printf_float+0xba>
 8005b58:	f04f 0800 	mov.w	r8, #0
 8005b5c:	f104 091a 	add.w	r9, r4, #26
 8005b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b62:	3b01      	subs	r3, #1
 8005b64:	4543      	cmp	r3, r8
 8005b66:	dc09      	bgt.n	8005b7c <_printf_float+0x254>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	079b      	lsls	r3, r3, #30
 8005b6c:	f100 8103 	bmi.w	8005d76 <_printf_float+0x44e>
 8005b70:	68e0      	ldr	r0, [r4, #12]
 8005b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b74:	4298      	cmp	r0, r3
 8005b76:	bfb8      	it	lt
 8005b78:	4618      	movlt	r0, r3
 8005b7a:	e734      	b.n	80059e6 <_printf_float+0xbe>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	464a      	mov	r2, r9
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b8      	blx	r7
 8005b86:	3001      	adds	r0, #1
 8005b88:	f43f af2b 	beq.w	80059e2 <_printf_float+0xba>
 8005b8c:	f108 0801 	add.w	r8, r8, #1
 8005b90:	e7e6      	b.n	8005b60 <_printf_float+0x238>
 8005b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	dc2b      	bgt.n	8005bf0 <_printf_float+0x2c8>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	4a26      	ldr	r2, [pc, #152]	; (8005c34 <_printf_float+0x30c>)
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f43f af1d 	beq.w	80059e2 <_printf_float+0xba>
 8005ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005baa:	b923      	cbnz	r3, 8005bb6 <_printf_float+0x28e>
 8005bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bae:	b913      	cbnz	r3, 8005bb6 <_printf_float+0x28e>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	07d9      	lsls	r1, r3, #31
 8005bb4:	d5d8      	bpl.n	8005b68 <_printf_float+0x240>
 8005bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b8      	blx	r7
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	f43f af0e 	beq.w	80059e2 <_printf_float+0xba>
 8005bc6:	f04f 0900 	mov.w	r9, #0
 8005bca:	f104 0a1a 	add.w	sl, r4, #26
 8005bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd0:	425b      	negs	r3, r3
 8005bd2:	454b      	cmp	r3, r9
 8005bd4:	dc01      	bgt.n	8005bda <_printf_float+0x2b2>
 8005bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd8:	e794      	b.n	8005b04 <_printf_float+0x1dc>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4652      	mov	r2, sl
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f aefc 	beq.w	80059e2 <_printf_float+0xba>
 8005bea:	f109 0901 	add.w	r9, r9, #1
 8005bee:	e7ee      	b.n	8005bce <_printf_float+0x2a6>
 8005bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	bfa8      	it	ge
 8005bf8:	461a      	movge	r2, r3
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	4691      	mov	r9, r2
 8005bfe:	dd07      	ble.n	8005c10 <_printf_float+0x2e8>
 8005c00:	4613      	mov	r3, r2
 8005c02:	4631      	mov	r1, r6
 8005c04:	4642      	mov	r2, r8
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f aee9 	beq.w	80059e2 <_printf_float+0xba>
 8005c10:	f104 031a 	add.w	r3, r4, #26
 8005c14:	f04f 0b00 	mov.w	fp, #0
 8005c18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c1c:	9306      	str	r3, [sp, #24]
 8005c1e:	e015      	b.n	8005c4c <_printf_float+0x324>
 8005c20:	7fefffff 	.word	0x7fefffff
 8005c24:	08007994 	.word	0x08007994
 8005c28:	08007990 	.word	0x08007990
 8005c2c:	0800799c 	.word	0x0800799c
 8005c30:	08007998 	.word	0x08007998
 8005c34:	080079a0 	.word	0x080079a0
 8005c38:	2301      	movs	r3, #1
 8005c3a:	9a06      	ldr	r2, [sp, #24]
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f aecd 	beq.w	80059e2 <_printf_float+0xba>
 8005c48:	f10b 0b01 	add.w	fp, fp, #1
 8005c4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c50:	ebaa 0309 	sub.w	r3, sl, r9
 8005c54:	455b      	cmp	r3, fp
 8005c56:	dcef      	bgt.n	8005c38 <_printf_float+0x310>
 8005c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	44d0      	add	r8, sl
 8005c60:	db15      	blt.n	8005c8e <_printf_float+0x366>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	07da      	lsls	r2, r3, #31
 8005c66:	d412      	bmi.n	8005c8e <_printf_float+0x366>
 8005c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c6c:	eba3 020a 	sub.w	r2, r3, sl
 8005c70:	eba3 0a01 	sub.w	sl, r3, r1
 8005c74:	4592      	cmp	sl, r2
 8005c76:	bfa8      	it	ge
 8005c78:	4692      	movge	sl, r2
 8005c7a:	f1ba 0f00 	cmp.w	sl, #0
 8005c7e:	dc0e      	bgt.n	8005c9e <_printf_float+0x376>
 8005c80:	f04f 0800 	mov.w	r8, #0
 8005c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c88:	f104 091a 	add.w	r9, r4, #26
 8005c8c:	e019      	b.n	8005cc2 <_printf_float+0x39a>
 8005c8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d1e5      	bne.n	8005c68 <_printf_float+0x340>
 8005c9c:	e6a1      	b.n	80059e2 <_printf_float+0xba>
 8005c9e:	4653      	mov	r3, sl
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d1e9      	bne.n	8005c80 <_printf_float+0x358>
 8005cac:	e699      	b.n	80059e2 <_printf_float+0xba>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	464a      	mov	r2, r9
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f ae92 	beq.w	80059e2 <_printf_float+0xba>
 8005cbe:	f108 0801 	add.w	r8, r8, #1
 8005cc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	eba3 030a 	sub.w	r3, r3, sl
 8005ccc:	4543      	cmp	r3, r8
 8005cce:	dcee      	bgt.n	8005cae <_printf_float+0x386>
 8005cd0:	e74a      	b.n	8005b68 <_printf_float+0x240>
 8005cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cd4:	2a01      	cmp	r2, #1
 8005cd6:	dc01      	bgt.n	8005cdc <_printf_float+0x3b4>
 8005cd8:	07db      	lsls	r3, r3, #31
 8005cda:	d53a      	bpl.n	8005d52 <_printf_float+0x42a>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4642      	mov	r2, r8
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f ae7b 	beq.w	80059e2 <_printf_float+0xba>
 8005cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f108 0801 	add.w	r8, r8, #1
 8005cfc:	f43f ae71 	beq.w	80059e2 <_printf_float+0xba>
 8005d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d02:	2200      	movs	r2, #0
 8005d04:	f103 3aff 	add.w	sl, r3, #4294967295
 8005d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f7fa feb3 	bl	8000a78 <__aeabi_dcmpeq>
 8005d12:	b9c8      	cbnz	r0, 8005d48 <_printf_float+0x420>
 8005d14:	4653      	mov	r3, sl
 8005d16:	4642      	mov	r2, r8
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	47b8      	blx	r7
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d10e      	bne.n	8005d40 <_printf_float+0x418>
 8005d22:	e65e      	b.n	80059e2 <_printf_float+0xba>
 8005d24:	2301      	movs	r3, #1
 8005d26:	4652      	mov	r2, sl
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	f43f ae57 	beq.w	80059e2 <_printf_float+0xba>
 8005d34:	f108 0801 	add.w	r8, r8, #1
 8005d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	4543      	cmp	r3, r8
 8005d3e:	dcf1      	bgt.n	8005d24 <_printf_float+0x3fc>
 8005d40:	464b      	mov	r3, r9
 8005d42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d46:	e6de      	b.n	8005b06 <_printf_float+0x1de>
 8005d48:	f04f 0800 	mov.w	r8, #0
 8005d4c:	f104 0a1a 	add.w	sl, r4, #26
 8005d50:	e7f2      	b.n	8005d38 <_printf_float+0x410>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e7df      	b.n	8005d16 <_printf_float+0x3ee>
 8005d56:	2301      	movs	r3, #1
 8005d58:	464a      	mov	r2, r9
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	47b8      	blx	r7
 8005d60:	3001      	adds	r0, #1
 8005d62:	f43f ae3e 	beq.w	80059e2 <_printf_float+0xba>
 8005d66:	f108 0801 	add.w	r8, r8, #1
 8005d6a:	68e3      	ldr	r3, [r4, #12]
 8005d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	4543      	cmp	r3, r8
 8005d72:	dcf0      	bgt.n	8005d56 <_printf_float+0x42e>
 8005d74:	e6fc      	b.n	8005b70 <_printf_float+0x248>
 8005d76:	f04f 0800 	mov.w	r8, #0
 8005d7a:	f104 0919 	add.w	r9, r4, #25
 8005d7e:	e7f4      	b.n	8005d6a <_printf_float+0x442>
 8005d80:	2900      	cmp	r1, #0
 8005d82:	f43f ae8b 	beq.w	8005a9c <_printf_float+0x174>
 8005d86:	2300      	movs	r3, #0
 8005d88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005d8c:	ab09      	add	r3, sp, #36	; 0x24
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	ec49 8b10 	vmov	d0, r8, r9
 8005d94:	6022      	str	r2, [r4, #0]
 8005d96:	f8cd a004 	str.w	sl, [sp, #4]
 8005d9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f7ff fd2d 	bl	80057fe <__cvt>
 8005da4:	4680      	mov	r8, r0
 8005da6:	e648      	b.n	8005a3a <_printf_float+0x112>

08005da8 <_printf_common>:
 8005da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dac:	4691      	mov	r9, r2
 8005dae:	461f      	mov	r7, r3
 8005db0:	688a      	ldr	r2, [r1, #8]
 8005db2:	690b      	ldr	r3, [r1, #16]
 8005db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	bfb8      	it	lt
 8005dbc:	4613      	movlt	r3, r2
 8005dbe:	f8c9 3000 	str.w	r3, [r9]
 8005dc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	460c      	mov	r4, r1
 8005dca:	b112      	cbz	r2, 8005dd2 <_printf_common+0x2a>
 8005dcc:	3301      	adds	r3, #1
 8005dce:	f8c9 3000 	str.w	r3, [r9]
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	0699      	lsls	r1, r3, #26
 8005dd6:	bf42      	ittt	mi
 8005dd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ddc:	3302      	addmi	r3, #2
 8005dde:	f8c9 3000 	strmi.w	r3, [r9]
 8005de2:	6825      	ldr	r5, [r4, #0]
 8005de4:	f015 0506 	ands.w	r5, r5, #6
 8005de8:	d107      	bne.n	8005dfa <_printf_common+0x52>
 8005dea:	f104 0a19 	add.w	sl, r4, #25
 8005dee:	68e3      	ldr	r3, [r4, #12]
 8005df0:	f8d9 2000 	ldr.w	r2, [r9]
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	42ab      	cmp	r3, r5
 8005df8:	dc28      	bgt.n	8005e4c <_printf_common+0xa4>
 8005dfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	3300      	adds	r3, #0
 8005e02:	bf18      	it	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	0692      	lsls	r2, r2, #26
 8005e08:	d42d      	bmi.n	8005e66 <_printf_common+0xbe>
 8005e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e0e:	4639      	mov	r1, r7
 8005e10:	4630      	mov	r0, r6
 8005e12:	47c0      	blx	r8
 8005e14:	3001      	adds	r0, #1
 8005e16:	d020      	beq.n	8005e5a <_printf_common+0xb2>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	68e5      	ldr	r5, [r4, #12]
 8005e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8005e20:	f003 0306 	and.w	r3, r3, #6
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	bf08      	it	eq
 8005e28:	1aad      	subeq	r5, r5, r2
 8005e2a:	68a3      	ldr	r3, [r4, #8]
 8005e2c:	6922      	ldr	r2, [r4, #16]
 8005e2e:	bf0c      	ite	eq
 8005e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e34:	2500      	movne	r5, #0
 8005e36:	4293      	cmp	r3, r2
 8005e38:	bfc4      	itt	gt
 8005e3a:	1a9b      	subgt	r3, r3, r2
 8005e3c:	18ed      	addgt	r5, r5, r3
 8005e3e:	f04f 0900 	mov.w	r9, #0
 8005e42:	341a      	adds	r4, #26
 8005e44:	454d      	cmp	r5, r9
 8005e46:	d11a      	bne.n	8005e7e <_printf_common+0xd6>
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e008      	b.n	8005e5e <_printf_common+0xb6>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4652      	mov	r2, sl
 8005e50:	4639      	mov	r1, r7
 8005e52:	4630      	mov	r0, r6
 8005e54:	47c0      	blx	r8
 8005e56:	3001      	adds	r0, #1
 8005e58:	d103      	bne.n	8005e62 <_printf_common+0xba>
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e62:	3501      	adds	r5, #1
 8005e64:	e7c3      	b.n	8005dee <_printf_common+0x46>
 8005e66:	18e1      	adds	r1, r4, r3
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	2030      	movs	r0, #48	; 0x30
 8005e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e70:	4422      	add	r2, r4
 8005e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	e7c5      	b.n	8005e0a <_printf_common+0x62>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4622      	mov	r2, r4
 8005e82:	4639      	mov	r1, r7
 8005e84:	4630      	mov	r0, r6
 8005e86:	47c0      	blx	r8
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d0e6      	beq.n	8005e5a <_printf_common+0xb2>
 8005e8c:	f109 0901 	add.w	r9, r9, #1
 8005e90:	e7d8      	b.n	8005e44 <_printf_common+0x9c>
	...

08005e94 <_printf_i>:
 8005e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	7e09      	ldrb	r1, [r1, #24]
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	296e      	cmp	r1, #110	; 0x6e
 8005ea4:	4617      	mov	r7, r2
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	4698      	mov	r8, r3
 8005eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005eac:	f000 80b3 	beq.w	8006016 <_printf_i+0x182>
 8005eb0:	d822      	bhi.n	8005ef8 <_printf_i+0x64>
 8005eb2:	2963      	cmp	r1, #99	; 0x63
 8005eb4:	d036      	beq.n	8005f24 <_printf_i+0x90>
 8005eb6:	d80a      	bhi.n	8005ece <_printf_i+0x3a>
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	f000 80b9 	beq.w	8006030 <_printf_i+0x19c>
 8005ebe:	2958      	cmp	r1, #88	; 0x58
 8005ec0:	f000 8083 	beq.w	8005fca <_printf_i+0x136>
 8005ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ec8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ecc:	e032      	b.n	8005f34 <_printf_i+0xa0>
 8005ece:	2964      	cmp	r1, #100	; 0x64
 8005ed0:	d001      	beq.n	8005ed6 <_printf_i+0x42>
 8005ed2:	2969      	cmp	r1, #105	; 0x69
 8005ed4:	d1f6      	bne.n	8005ec4 <_printf_i+0x30>
 8005ed6:	6820      	ldr	r0, [r4, #0]
 8005ed8:	6813      	ldr	r3, [r2, #0]
 8005eda:	0605      	lsls	r5, r0, #24
 8005edc:	f103 0104 	add.w	r1, r3, #4
 8005ee0:	d52a      	bpl.n	8005f38 <_printf_i+0xa4>
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6011      	str	r1, [r2, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da03      	bge.n	8005ef2 <_printf_i+0x5e>
 8005eea:	222d      	movs	r2, #45	; 0x2d
 8005eec:	425b      	negs	r3, r3
 8005eee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ef2:	486f      	ldr	r0, [pc, #444]	; (80060b0 <_printf_i+0x21c>)
 8005ef4:	220a      	movs	r2, #10
 8005ef6:	e039      	b.n	8005f6c <_printf_i+0xd8>
 8005ef8:	2973      	cmp	r1, #115	; 0x73
 8005efa:	f000 809d 	beq.w	8006038 <_printf_i+0x1a4>
 8005efe:	d808      	bhi.n	8005f12 <_printf_i+0x7e>
 8005f00:	296f      	cmp	r1, #111	; 0x6f
 8005f02:	d020      	beq.n	8005f46 <_printf_i+0xb2>
 8005f04:	2970      	cmp	r1, #112	; 0x70
 8005f06:	d1dd      	bne.n	8005ec4 <_printf_i+0x30>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	f043 0320 	orr.w	r3, r3, #32
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	e003      	b.n	8005f1a <_printf_i+0x86>
 8005f12:	2975      	cmp	r1, #117	; 0x75
 8005f14:	d017      	beq.n	8005f46 <_printf_i+0xb2>
 8005f16:	2978      	cmp	r1, #120	; 0x78
 8005f18:	d1d4      	bne.n	8005ec4 <_printf_i+0x30>
 8005f1a:	2378      	movs	r3, #120	; 0x78
 8005f1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f20:	4864      	ldr	r0, [pc, #400]	; (80060b4 <_printf_i+0x220>)
 8005f22:	e055      	b.n	8005fd0 <_printf_i+0x13c>
 8005f24:	6813      	ldr	r3, [r2, #0]
 8005f26:	1d19      	adds	r1, r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6011      	str	r1, [r2, #0]
 8005f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f34:	2301      	movs	r3, #1
 8005f36:	e08c      	b.n	8006052 <_printf_i+0x1be>
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6011      	str	r1, [r2, #0]
 8005f3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f40:	bf18      	it	ne
 8005f42:	b21b      	sxthne	r3, r3
 8005f44:	e7cf      	b.n	8005ee6 <_printf_i+0x52>
 8005f46:	6813      	ldr	r3, [r2, #0]
 8005f48:	6825      	ldr	r5, [r4, #0]
 8005f4a:	1d18      	adds	r0, r3, #4
 8005f4c:	6010      	str	r0, [r2, #0]
 8005f4e:	0628      	lsls	r0, r5, #24
 8005f50:	d501      	bpl.n	8005f56 <_printf_i+0xc2>
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	e002      	b.n	8005f5c <_printf_i+0xc8>
 8005f56:	0668      	lsls	r0, r5, #25
 8005f58:	d5fb      	bpl.n	8005f52 <_printf_i+0xbe>
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	4854      	ldr	r0, [pc, #336]	; (80060b0 <_printf_i+0x21c>)
 8005f5e:	296f      	cmp	r1, #111	; 0x6f
 8005f60:	bf14      	ite	ne
 8005f62:	220a      	movne	r2, #10
 8005f64:	2208      	moveq	r2, #8
 8005f66:	2100      	movs	r1, #0
 8005f68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f6c:	6865      	ldr	r5, [r4, #4]
 8005f6e:	60a5      	str	r5, [r4, #8]
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	f2c0 8095 	blt.w	80060a0 <_printf_i+0x20c>
 8005f76:	6821      	ldr	r1, [r4, #0]
 8005f78:	f021 0104 	bic.w	r1, r1, #4
 8005f7c:	6021      	str	r1, [r4, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d13d      	bne.n	8005ffe <_printf_i+0x16a>
 8005f82:	2d00      	cmp	r5, #0
 8005f84:	f040 808e 	bne.w	80060a4 <_printf_i+0x210>
 8005f88:	4665      	mov	r5, ip
 8005f8a:	2a08      	cmp	r2, #8
 8005f8c:	d10b      	bne.n	8005fa6 <_printf_i+0x112>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	07db      	lsls	r3, r3, #31
 8005f92:	d508      	bpl.n	8005fa6 <_printf_i+0x112>
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	6862      	ldr	r2, [r4, #4]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	bfde      	ittt	le
 8005f9c:	2330      	movle	r3, #48	; 0x30
 8005f9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fa6:	ebac 0305 	sub.w	r3, ip, r5
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	f8cd 8000 	str.w	r8, [sp]
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	aa03      	add	r2, sp, #12
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff fef6 	bl	8005da8 <_printf_common>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d14d      	bne.n	800605c <_printf_i+0x1c8>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	b005      	add	sp, #20
 8005fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fca:	4839      	ldr	r0, [pc, #228]	; (80060b0 <_printf_i+0x21c>)
 8005fcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005fd0:	6813      	ldr	r3, [r2, #0]
 8005fd2:	6821      	ldr	r1, [r4, #0]
 8005fd4:	1d1d      	adds	r5, r3, #4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6015      	str	r5, [r2, #0]
 8005fda:	060a      	lsls	r2, r1, #24
 8005fdc:	d50b      	bpl.n	8005ff6 <_printf_i+0x162>
 8005fde:	07ca      	lsls	r2, r1, #31
 8005fe0:	bf44      	itt	mi
 8005fe2:	f041 0120 	orrmi.w	r1, r1, #32
 8005fe6:	6021      	strmi	r1, [r4, #0]
 8005fe8:	b91b      	cbnz	r3, 8005ff2 <_printf_i+0x15e>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	f022 0220 	bic.w	r2, r2, #32
 8005ff0:	6022      	str	r2, [r4, #0]
 8005ff2:	2210      	movs	r2, #16
 8005ff4:	e7b7      	b.n	8005f66 <_printf_i+0xd2>
 8005ff6:	064d      	lsls	r5, r1, #25
 8005ff8:	bf48      	it	mi
 8005ffa:	b29b      	uxthmi	r3, r3
 8005ffc:	e7ef      	b.n	8005fde <_printf_i+0x14a>
 8005ffe:	4665      	mov	r5, ip
 8006000:	fbb3 f1f2 	udiv	r1, r3, r2
 8006004:	fb02 3311 	mls	r3, r2, r1, r3
 8006008:	5cc3      	ldrb	r3, [r0, r3]
 800600a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800600e:	460b      	mov	r3, r1
 8006010:	2900      	cmp	r1, #0
 8006012:	d1f5      	bne.n	8006000 <_printf_i+0x16c>
 8006014:	e7b9      	b.n	8005f8a <_printf_i+0xf6>
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	6825      	ldr	r5, [r4, #0]
 800601a:	6961      	ldr	r1, [r4, #20]
 800601c:	1d18      	adds	r0, r3, #4
 800601e:	6010      	str	r0, [r2, #0]
 8006020:	0628      	lsls	r0, r5, #24
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	d501      	bpl.n	800602a <_printf_i+0x196>
 8006026:	6019      	str	r1, [r3, #0]
 8006028:	e002      	b.n	8006030 <_printf_i+0x19c>
 800602a:	066a      	lsls	r2, r5, #25
 800602c:	d5fb      	bpl.n	8006026 <_printf_i+0x192>
 800602e:	8019      	strh	r1, [r3, #0]
 8006030:	2300      	movs	r3, #0
 8006032:	6123      	str	r3, [r4, #16]
 8006034:	4665      	mov	r5, ip
 8006036:	e7b9      	b.n	8005fac <_printf_i+0x118>
 8006038:	6813      	ldr	r3, [r2, #0]
 800603a:	1d19      	adds	r1, r3, #4
 800603c:	6011      	str	r1, [r2, #0]
 800603e:	681d      	ldr	r5, [r3, #0]
 8006040:	6862      	ldr	r2, [r4, #4]
 8006042:	2100      	movs	r1, #0
 8006044:	4628      	mov	r0, r5
 8006046:	f7fa f8a3 	bl	8000190 <memchr>
 800604a:	b108      	cbz	r0, 8006050 <_printf_i+0x1bc>
 800604c:	1b40      	subs	r0, r0, r5
 800604e:	6060      	str	r0, [r4, #4]
 8006050:	6863      	ldr	r3, [r4, #4]
 8006052:	6123      	str	r3, [r4, #16]
 8006054:	2300      	movs	r3, #0
 8006056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800605a:	e7a7      	b.n	8005fac <_printf_i+0x118>
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	462a      	mov	r2, r5
 8006060:	4639      	mov	r1, r7
 8006062:	4630      	mov	r0, r6
 8006064:	47c0      	blx	r8
 8006066:	3001      	adds	r0, #1
 8006068:	d0aa      	beq.n	8005fc0 <_printf_i+0x12c>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	079b      	lsls	r3, r3, #30
 800606e:	d413      	bmi.n	8006098 <_printf_i+0x204>
 8006070:	68e0      	ldr	r0, [r4, #12]
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	4298      	cmp	r0, r3
 8006076:	bfb8      	it	lt
 8006078:	4618      	movlt	r0, r3
 800607a:	e7a3      	b.n	8005fc4 <_printf_i+0x130>
 800607c:	2301      	movs	r3, #1
 800607e:	464a      	mov	r2, r9
 8006080:	4639      	mov	r1, r7
 8006082:	4630      	mov	r0, r6
 8006084:	47c0      	blx	r8
 8006086:	3001      	adds	r0, #1
 8006088:	d09a      	beq.n	8005fc0 <_printf_i+0x12c>
 800608a:	3501      	adds	r5, #1
 800608c:	68e3      	ldr	r3, [r4, #12]
 800608e:	9a03      	ldr	r2, [sp, #12]
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	42ab      	cmp	r3, r5
 8006094:	dcf2      	bgt.n	800607c <_printf_i+0x1e8>
 8006096:	e7eb      	b.n	8006070 <_printf_i+0x1dc>
 8006098:	2500      	movs	r5, #0
 800609a:	f104 0919 	add.w	r9, r4, #25
 800609e:	e7f5      	b.n	800608c <_printf_i+0x1f8>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1ac      	bne.n	8005ffe <_printf_i+0x16a>
 80060a4:	7803      	ldrb	r3, [r0, #0]
 80060a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ae:	e76c      	b.n	8005f8a <_printf_i+0xf6>
 80060b0:	080079a2 	.word	0x080079a2
 80060b4:	080079b3 	.word	0x080079b3

080060b8 <siprintf>:
 80060b8:	b40e      	push	{r1, r2, r3}
 80060ba:	b500      	push	{lr}
 80060bc:	b09c      	sub	sp, #112	; 0x70
 80060be:	ab1d      	add	r3, sp, #116	; 0x74
 80060c0:	9002      	str	r0, [sp, #8]
 80060c2:	9006      	str	r0, [sp, #24]
 80060c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060c8:	4809      	ldr	r0, [pc, #36]	; (80060f0 <siprintf+0x38>)
 80060ca:	9107      	str	r1, [sp, #28]
 80060cc:	9104      	str	r1, [sp, #16]
 80060ce:	4909      	ldr	r1, [pc, #36]	; (80060f4 <siprintf+0x3c>)
 80060d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d4:	9105      	str	r1, [sp, #20]
 80060d6:	6800      	ldr	r0, [r0, #0]
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	a902      	add	r1, sp, #8
 80060dc:	f001 fa52 	bl	8007584 <_svfiprintf_r>
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	b01c      	add	sp, #112	; 0x70
 80060e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060ec:	b003      	add	sp, #12
 80060ee:	4770      	bx	lr
 80060f0:	20000010 	.word	0x20000010
 80060f4:	ffff0208 	.word	0xffff0208

080060f8 <quorem>:
 80060f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	6903      	ldr	r3, [r0, #16]
 80060fe:	690c      	ldr	r4, [r1, #16]
 8006100:	42a3      	cmp	r3, r4
 8006102:	4680      	mov	r8, r0
 8006104:	f2c0 8082 	blt.w	800620c <quorem+0x114>
 8006108:	3c01      	subs	r4, #1
 800610a:	f101 0714 	add.w	r7, r1, #20
 800610e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006112:	f100 0614 	add.w	r6, r0, #20
 8006116:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800611a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800611e:	eb06 030c 	add.w	r3, r6, ip
 8006122:	3501      	adds	r5, #1
 8006124:	eb07 090c 	add.w	r9, r7, ip
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	fbb0 f5f5 	udiv	r5, r0, r5
 800612e:	b395      	cbz	r5, 8006196 <quorem+0x9e>
 8006130:	f04f 0a00 	mov.w	sl, #0
 8006134:	4638      	mov	r0, r7
 8006136:	46b6      	mov	lr, r6
 8006138:	46d3      	mov	fp, sl
 800613a:	f850 2b04 	ldr.w	r2, [r0], #4
 800613e:	b293      	uxth	r3, r2
 8006140:	fb05 a303 	mla	r3, r5, r3, sl
 8006144:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006148:	b29b      	uxth	r3, r3
 800614a:	ebab 0303 	sub.w	r3, fp, r3
 800614e:	0c12      	lsrs	r2, r2, #16
 8006150:	f8de b000 	ldr.w	fp, [lr]
 8006154:	fb05 a202 	mla	r2, r5, r2, sl
 8006158:	fa13 f38b 	uxtah	r3, r3, fp
 800615c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006160:	fa1f fb82 	uxth.w	fp, r2
 8006164:	f8de 2000 	ldr.w	r2, [lr]
 8006168:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800616c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006170:	b29b      	uxth	r3, r3
 8006172:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006176:	4581      	cmp	r9, r0
 8006178:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800617c:	f84e 3b04 	str.w	r3, [lr], #4
 8006180:	d2db      	bcs.n	800613a <quorem+0x42>
 8006182:	f856 300c 	ldr.w	r3, [r6, ip]
 8006186:	b933      	cbnz	r3, 8006196 <quorem+0x9e>
 8006188:	9b01      	ldr	r3, [sp, #4]
 800618a:	3b04      	subs	r3, #4
 800618c:	429e      	cmp	r6, r3
 800618e:	461a      	mov	r2, r3
 8006190:	d330      	bcc.n	80061f4 <quorem+0xfc>
 8006192:	f8c8 4010 	str.w	r4, [r8, #16]
 8006196:	4640      	mov	r0, r8
 8006198:	f001 f81e 	bl	80071d8 <__mcmp>
 800619c:	2800      	cmp	r0, #0
 800619e:	db25      	blt.n	80061ec <quorem+0xf4>
 80061a0:	3501      	adds	r5, #1
 80061a2:	4630      	mov	r0, r6
 80061a4:	f04f 0c00 	mov.w	ip, #0
 80061a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80061ac:	f8d0 e000 	ldr.w	lr, [r0]
 80061b0:	b293      	uxth	r3, r2
 80061b2:	ebac 0303 	sub.w	r3, ip, r3
 80061b6:	0c12      	lsrs	r2, r2, #16
 80061b8:	fa13 f38e 	uxtah	r3, r3, lr
 80061bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ca:	45b9      	cmp	r9, r7
 80061cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061d0:	f840 3b04 	str.w	r3, [r0], #4
 80061d4:	d2e8      	bcs.n	80061a8 <quorem+0xb0>
 80061d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80061da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80061de:	b92a      	cbnz	r2, 80061ec <quorem+0xf4>
 80061e0:	3b04      	subs	r3, #4
 80061e2:	429e      	cmp	r6, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	d30b      	bcc.n	8006200 <quorem+0x108>
 80061e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80061ec:	4628      	mov	r0, r5
 80061ee:	b003      	add	sp, #12
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	6812      	ldr	r2, [r2, #0]
 80061f6:	3b04      	subs	r3, #4
 80061f8:	2a00      	cmp	r2, #0
 80061fa:	d1ca      	bne.n	8006192 <quorem+0x9a>
 80061fc:	3c01      	subs	r4, #1
 80061fe:	e7c5      	b.n	800618c <quorem+0x94>
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	3b04      	subs	r3, #4
 8006204:	2a00      	cmp	r2, #0
 8006206:	d1ef      	bne.n	80061e8 <quorem+0xf0>
 8006208:	3c01      	subs	r4, #1
 800620a:	e7ea      	b.n	80061e2 <quorem+0xea>
 800620c:	2000      	movs	r0, #0
 800620e:	e7ee      	b.n	80061ee <quorem+0xf6>

08006210 <_dtoa_r>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	ec57 6b10 	vmov	r6, r7, d0
 8006218:	b097      	sub	sp, #92	; 0x5c
 800621a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800621c:	9106      	str	r1, [sp, #24]
 800621e:	4604      	mov	r4, r0
 8006220:	920b      	str	r2, [sp, #44]	; 0x2c
 8006222:	9312      	str	r3, [sp, #72]	; 0x48
 8006224:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006228:	e9cd 6700 	strd	r6, r7, [sp]
 800622c:	b93d      	cbnz	r5, 800623e <_dtoa_r+0x2e>
 800622e:	2010      	movs	r0, #16
 8006230:	f000 fdb4 	bl	8006d9c <malloc>
 8006234:	6260      	str	r0, [r4, #36]	; 0x24
 8006236:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800623a:	6005      	str	r5, [r0, #0]
 800623c:	60c5      	str	r5, [r0, #12]
 800623e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	b151      	cbz	r1, 800625a <_dtoa_r+0x4a>
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	604a      	str	r2, [r1, #4]
 8006248:	2301      	movs	r3, #1
 800624a:	4093      	lsls	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
 800624e:	4620      	mov	r0, r4
 8006250:	f000 fde0 	bl	8006e14 <_Bfree>
 8006254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	1e3b      	subs	r3, r7, #0
 800625c:	bfbb      	ittet	lt
 800625e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006262:	9301      	strlt	r3, [sp, #4]
 8006264:	2300      	movge	r3, #0
 8006266:	2201      	movlt	r2, #1
 8006268:	bfac      	ite	ge
 800626a:	f8c8 3000 	strge.w	r3, [r8]
 800626e:	f8c8 2000 	strlt.w	r2, [r8]
 8006272:	4baf      	ldr	r3, [pc, #700]	; (8006530 <_dtoa_r+0x320>)
 8006274:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006278:	ea33 0308 	bics.w	r3, r3, r8
 800627c:	d114      	bne.n	80062a8 <_dtoa_r+0x98>
 800627e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006280:	f242 730f 	movw	r3, #9999	; 0x270f
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	b923      	cbnz	r3, 8006294 <_dtoa_r+0x84>
 800628a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800628e:	2800      	cmp	r0, #0
 8006290:	f000 8542 	beq.w	8006d18 <_dtoa_r+0xb08>
 8006294:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006296:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006544 <_dtoa_r+0x334>
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8544 	beq.w	8006d28 <_dtoa_r+0xb18>
 80062a0:	f10b 0303 	add.w	r3, fp, #3
 80062a4:	f000 bd3e 	b.w	8006d24 <_dtoa_r+0xb14>
 80062a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80062ac:	2200      	movs	r2, #0
 80062ae:	2300      	movs	r3, #0
 80062b0:	4630      	mov	r0, r6
 80062b2:	4639      	mov	r1, r7
 80062b4:	f7fa fbe0 	bl	8000a78 <__aeabi_dcmpeq>
 80062b8:	4681      	mov	r9, r0
 80062ba:	b168      	cbz	r0, 80062d8 <_dtoa_r+0xc8>
 80062bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062be:	2301      	movs	r3, #1
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8524 	beq.w	8006d12 <_dtoa_r+0xb02>
 80062ca:	4b9a      	ldr	r3, [pc, #616]	; (8006534 <_dtoa_r+0x324>)
 80062cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	f000 bd28 	b.w	8006d28 <_dtoa_r+0xb18>
 80062d8:	aa14      	add	r2, sp, #80	; 0x50
 80062da:	a915      	add	r1, sp, #84	; 0x54
 80062dc:	ec47 6b10 	vmov	d0, r6, r7
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 fff0 	bl	80072c6 <__d2b>
 80062e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80062ea:	9004      	str	r0, [sp, #16]
 80062ec:	2d00      	cmp	r5, #0
 80062ee:	d07c      	beq.n	80063ea <_dtoa_r+0x1da>
 80062f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80062f8:	46b2      	mov	sl, r6
 80062fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80062fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006302:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006306:	2200      	movs	r2, #0
 8006308:	4b8b      	ldr	r3, [pc, #556]	; (8006538 <_dtoa_r+0x328>)
 800630a:	4650      	mov	r0, sl
 800630c:	4659      	mov	r1, fp
 800630e:	f7f9 ff93 	bl	8000238 <__aeabi_dsub>
 8006312:	a381      	add	r3, pc, #516	; (adr r3, 8006518 <_dtoa_r+0x308>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f7fa f946 	bl	80005a8 <__aeabi_dmul>
 800631c:	a380      	add	r3, pc, #512	; (adr r3, 8006520 <_dtoa_r+0x310>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7f9 ff8b 	bl	800023c <__adddf3>
 8006326:	4606      	mov	r6, r0
 8006328:	4628      	mov	r0, r5
 800632a:	460f      	mov	r7, r1
 800632c:	f7fa f8d2 	bl	80004d4 <__aeabi_i2d>
 8006330:	a37d      	add	r3, pc, #500	; (adr r3, 8006528 <_dtoa_r+0x318>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f7fa f937 	bl	80005a8 <__aeabi_dmul>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7f9 ff7b 	bl	800023c <__adddf3>
 8006346:	4606      	mov	r6, r0
 8006348:	460f      	mov	r7, r1
 800634a:	f7fa fbdd 	bl	8000b08 <__aeabi_d2iz>
 800634e:	2200      	movs	r2, #0
 8006350:	4682      	mov	sl, r0
 8006352:	2300      	movs	r3, #0
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	f7fa fb98 	bl	8000a8c <__aeabi_dcmplt>
 800635c:	b148      	cbz	r0, 8006372 <_dtoa_r+0x162>
 800635e:	4650      	mov	r0, sl
 8006360:	f7fa f8b8 	bl	80004d4 <__aeabi_i2d>
 8006364:	4632      	mov	r2, r6
 8006366:	463b      	mov	r3, r7
 8006368:	f7fa fb86 	bl	8000a78 <__aeabi_dcmpeq>
 800636c:	b908      	cbnz	r0, 8006372 <_dtoa_r+0x162>
 800636e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006372:	f1ba 0f16 	cmp.w	sl, #22
 8006376:	d859      	bhi.n	800642c <_dtoa_r+0x21c>
 8006378:	4970      	ldr	r1, [pc, #448]	; (800653c <_dtoa_r+0x32c>)
 800637a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800637e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006386:	f7fa fb9f 	bl	8000ac8 <__aeabi_dcmpgt>
 800638a:	2800      	cmp	r0, #0
 800638c:	d050      	beq.n	8006430 <_dtoa_r+0x220>
 800638e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006392:	2300      	movs	r3, #0
 8006394:	930f      	str	r3, [sp, #60]	; 0x3c
 8006396:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006398:	1b5d      	subs	r5, r3, r5
 800639a:	f1b5 0801 	subs.w	r8, r5, #1
 800639e:	bf49      	itett	mi
 80063a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80063a4:	2300      	movpl	r3, #0
 80063a6:	9305      	strmi	r3, [sp, #20]
 80063a8:	f04f 0800 	movmi.w	r8, #0
 80063ac:	bf58      	it	pl
 80063ae:	9305      	strpl	r3, [sp, #20]
 80063b0:	f1ba 0f00 	cmp.w	sl, #0
 80063b4:	db3e      	blt.n	8006434 <_dtoa_r+0x224>
 80063b6:	2300      	movs	r3, #0
 80063b8:	44d0      	add	r8, sl
 80063ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80063be:	9307      	str	r3, [sp, #28]
 80063c0:	9b06      	ldr	r3, [sp, #24]
 80063c2:	2b09      	cmp	r3, #9
 80063c4:	f200 8090 	bhi.w	80064e8 <_dtoa_r+0x2d8>
 80063c8:	2b05      	cmp	r3, #5
 80063ca:	bfc4      	itt	gt
 80063cc:	3b04      	subgt	r3, #4
 80063ce:	9306      	strgt	r3, [sp, #24]
 80063d0:	9b06      	ldr	r3, [sp, #24]
 80063d2:	f1a3 0302 	sub.w	r3, r3, #2
 80063d6:	bfcc      	ite	gt
 80063d8:	2500      	movgt	r5, #0
 80063da:	2501      	movle	r5, #1
 80063dc:	2b03      	cmp	r3, #3
 80063de:	f200 808f 	bhi.w	8006500 <_dtoa_r+0x2f0>
 80063e2:	e8df f003 	tbb	[pc, r3]
 80063e6:	7f7d      	.short	0x7f7d
 80063e8:	7131      	.short	0x7131
 80063ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80063ee:	441d      	add	r5, r3
 80063f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80063f4:	2820      	cmp	r0, #32
 80063f6:	dd13      	ble.n	8006420 <_dtoa_r+0x210>
 80063f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80063fc:	9b00      	ldr	r3, [sp, #0]
 80063fe:	fa08 f800 	lsl.w	r8, r8, r0
 8006402:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006406:	fa23 f000 	lsr.w	r0, r3, r0
 800640a:	ea48 0000 	orr.w	r0, r8, r0
 800640e:	f7fa f851 	bl	80004b4 <__aeabi_ui2d>
 8006412:	2301      	movs	r3, #1
 8006414:	4682      	mov	sl, r0
 8006416:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800641a:	3d01      	subs	r5, #1
 800641c:	9313      	str	r3, [sp, #76]	; 0x4c
 800641e:	e772      	b.n	8006306 <_dtoa_r+0xf6>
 8006420:	9b00      	ldr	r3, [sp, #0]
 8006422:	f1c0 0020 	rsb	r0, r0, #32
 8006426:	fa03 f000 	lsl.w	r0, r3, r0
 800642a:	e7f0      	b.n	800640e <_dtoa_r+0x1fe>
 800642c:	2301      	movs	r3, #1
 800642e:	e7b1      	b.n	8006394 <_dtoa_r+0x184>
 8006430:	900f      	str	r0, [sp, #60]	; 0x3c
 8006432:	e7b0      	b.n	8006396 <_dtoa_r+0x186>
 8006434:	9b05      	ldr	r3, [sp, #20]
 8006436:	eba3 030a 	sub.w	r3, r3, sl
 800643a:	9305      	str	r3, [sp, #20]
 800643c:	f1ca 0300 	rsb	r3, sl, #0
 8006440:	9307      	str	r3, [sp, #28]
 8006442:	2300      	movs	r3, #0
 8006444:	930e      	str	r3, [sp, #56]	; 0x38
 8006446:	e7bb      	b.n	80063c0 <_dtoa_r+0x1b0>
 8006448:	2301      	movs	r3, #1
 800644a:	930a      	str	r3, [sp, #40]	; 0x28
 800644c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800644e:	2b00      	cmp	r3, #0
 8006450:	dd59      	ble.n	8006506 <_dtoa_r+0x2f6>
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	4699      	mov	r9, r3
 8006456:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006458:	2200      	movs	r2, #0
 800645a:	6072      	str	r2, [r6, #4]
 800645c:	2204      	movs	r2, #4
 800645e:	f102 0014 	add.w	r0, r2, #20
 8006462:	4298      	cmp	r0, r3
 8006464:	6871      	ldr	r1, [r6, #4]
 8006466:	d953      	bls.n	8006510 <_dtoa_r+0x300>
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fc9f 	bl	8006dac <_Balloc>
 800646e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006470:	6030      	str	r0, [r6, #0]
 8006472:	f1b9 0f0e 	cmp.w	r9, #14
 8006476:	f8d3 b000 	ldr.w	fp, [r3]
 800647a:	f200 80e6 	bhi.w	800664a <_dtoa_r+0x43a>
 800647e:	2d00      	cmp	r5, #0
 8006480:	f000 80e3 	beq.w	800664a <_dtoa_r+0x43a>
 8006484:	ed9d 7b00 	vldr	d7, [sp]
 8006488:	f1ba 0f00 	cmp.w	sl, #0
 800648c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006490:	dd74      	ble.n	800657c <_dtoa_r+0x36c>
 8006492:	4a2a      	ldr	r2, [pc, #168]	; (800653c <_dtoa_r+0x32c>)
 8006494:	f00a 030f 	and.w	r3, sl, #15
 8006498:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800649c:	ed93 7b00 	vldr	d7, [r3]
 80064a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80064a4:	06f0      	lsls	r0, r6, #27
 80064a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80064aa:	d565      	bpl.n	8006578 <_dtoa_r+0x368>
 80064ac:	4b24      	ldr	r3, [pc, #144]	; (8006540 <_dtoa_r+0x330>)
 80064ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064b6:	f7fa f9a1 	bl	80007fc <__aeabi_ddiv>
 80064ba:	e9cd 0100 	strd	r0, r1, [sp]
 80064be:	f006 060f 	and.w	r6, r6, #15
 80064c2:	2503      	movs	r5, #3
 80064c4:	4f1e      	ldr	r7, [pc, #120]	; (8006540 <_dtoa_r+0x330>)
 80064c6:	e04c      	b.n	8006562 <_dtoa_r+0x352>
 80064c8:	2301      	movs	r3, #1
 80064ca:	930a      	str	r3, [sp, #40]	; 0x28
 80064cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ce:	4453      	add	r3, sl
 80064d0:	f103 0901 	add.w	r9, r3, #1
 80064d4:	9302      	str	r3, [sp, #8]
 80064d6:	464b      	mov	r3, r9
 80064d8:	2b01      	cmp	r3, #1
 80064da:	bfb8      	it	lt
 80064dc:	2301      	movlt	r3, #1
 80064de:	e7ba      	b.n	8006456 <_dtoa_r+0x246>
 80064e0:	2300      	movs	r3, #0
 80064e2:	e7b2      	b.n	800644a <_dtoa_r+0x23a>
 80064e4:	2300      	movs	r3, #0
 80064e6:	e7f0      	b.n	80064ca <_dtoa_r+0x2ba>
 80064e8:	2501      	movs	r5, #1
 80064ea:	2300      	movs	r3, #0
 80064ec:	9306      	str	r3, [sp, #24]
 80064ee:	950a      	str	r5, [sp, #40]	; 0x28
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295
 80064f4:	9302      	str	r3, [sp, #8]
 80064f6:	4699      	mov	r9, r3
 80064f8:	2200      	movs	r2, #0
 80064fa:	2312      	movs	r3, #18
 80064fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80064fe:	e7aa      	b.n	8006456 <_dtoa_r+0x246>
 8006500:	2301      	movs	r3, #1
 8006502:	930a      	str	r3, [sp, #40]	; 0x28
 8006504:	e7f4      	b.n	80064f0 <_dtoa_r+0x2e0>
 8006506:	2301      	movs	r3, #1
 8006508:	9302      	str	r3, [sp, #8]
 800650a:	4699      	mov	r9, r3
 800650c:	461a      	mov	r2, r3
 800650e:	e7f5      	b.n	80064fc <_dtoa_r+0x2ec>
 8006510:	3101      	adds	r1, #1
 8006512:	6071      	str	r1, [r6, #4]
 8006514:	0052      	lsls	r2, r2, #1
 8006516:	e7a2      	b.n	800645e <_dtoa_r+0x24e>
 8006518:	636f4361 	.word	0x636f4361
 800651c:	3fd287a7 	.word	0x3fd287a7
 8006520:	8b60c8b3 	.word	0x8b60c8b3
 8006524:	3fc68a28 	.word	0x3fc68a28
 8006528:	509f79fb 	.word	0x509f79fb
 800652c:	3fd34413 	.word	0x3fd34413
 8006530:	7ff00000 	.word	0x7ff00000
 8006534:	080079a1 	.word	0x080079a1
 8006538:	3ff80000 	.word	0x3ff80000
 800653c:	08007a60 	.word	0x08007a60
 8006540:	08007a38 	.word	0x08007a38
 8006544:	080079cd 	.word	0x080079cd
 8006548:	07f1      	lsls	r1, r6, #31
 800654a:	d508      	bpl.n	800655e <_dtoa_r+0x34e>
 800654c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006554:	f7fa f828 	bl	80005a8 <__aeabi_dmul>
 8006558:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800655c:	3501      	adds	r5, #1
 800655e:	1076      	asrs	r6, r6, #1
 8006560:	3708      	adds	r7, #8
 8006562:	2e00      	cmp	r6, #0
 8006564:	d1f0      	bne.n	8006548 <_dtoa_r+0x338>
 8006566:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800656a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800656e:	f7fa f945 	bl	80007fc <__aeabi_ddiv>
 8006572:	e9cd 0100 	strd	r0, r1, [sp]
 8006576:	e01a      	b.n	80065ae <_dtoa_r+0x39e>
 8006578:	2502      	movs	r5, #2
 800657a:	e7a3      	b.n	80064c4 <_dtoa_r+0x2b4>
 800657c:	f000 80a0 	beq.w	80066c0 <_dtoa_r+0x4b0>
 8006580:	f1ca 0600 	rsb	r6, sl, #0
 8006584:	4b9f      	ldr	r3, [pc, #636]	; (8006804 <_dtoa_r+0x5f4>)
 8006586:	4fa0      	ldr	r7, [pc, #640]	; (8006808 <_dtoa_r+0x5f8>)
 8006588:	f006 020f 	and.w	r2, r6, #15
 800658c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006598:	f7fa f806 	bl	80005a8 <__aeabi_dmul>
 800659c:	e9cd 0100 	strd	r0, r1, [sp]
 80065a0:	1136      	asrs	r6, r6, #4
 80065a2:	2300      	movs	r3, #0
 80065a4:	2502      	movs	r5, #2
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	d17f      	bne.n	80066aa <_dtoa_r+0x49a>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e1      	bne.n	8006572 <_dtoa_r+0x362>
 80065ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8087 	beq.w	80066c4 <_dtoa_r+0x4b4>
 80065b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80065ba:	2200      	movs	r2, #0
 80065bc:	4b93      	ldr	r3, [pc, #588]	; (800680c <_dtoa_r+0x5fc>)
 80065be:	4630      	mov	r0, r6
 80065c0:	4639      	mov	r1, r7
 80065c2:	f7fa fa63 	bl	8000a8c <__aeabi_dcmplt>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d07c      	beq.n	80066c4 <_dtoa_r+0x4b4>
 80065ca:	f1b9 0f00 	cmp.w	r9, #0
 80065ce:	d079      	beq.n	80066c4 <_dtoa_r+0x4b4>
 80065d0:	9b02      	ldr	r3, [sp, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	dd35      	ble.n	8006642 <_dtoa_r+0x432>
 80065d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80065da:	9308      	str	r3, [sp, #32]
 80065dc:	4639      	mov	r1, r7
 80065de:	2200      	movs	r2, #0
 80065e0:	4b8b      	ldr	r3, [pc, #556]	; (8006810 <_dtoa_r+0x600>)
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7f9 ffe0 	bl	80005a8 <__aeabi_dmul>
 80065e8:	e9cd 0100 	strd	r0, r1, [sp]
 80065ec:	9f02      	ldr	r7, [sp, #8]
 80065ee:	3501      	adds	r5, #1
 80065f0:	4628      	mov	r0, r5
 80065f2:	f7f9 ff6f 	bl	80004d4 <__aeabi_i2d>
 80065f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065fa:	f7f9 ffd5 	bl	80005a8 <__aeabi_dmul>
 80065fe:	2200      	movs	r2, #0
 8006600:	4b84      	ldr	r3, [pc, #528]	; (8006814 <_dtoa_r+0x604>)
 8006602:	f7f9 fe1b 	bl	800023c <__adddf3>
 8006606:	4605      	mov	r5, r0
 8006608:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800660c:	2f00      	cmp	r7, #0
 800660e:	d15d      	bne.n	80066cc <_dtoa_r+0x4bc>
 8006610:	2200      	movs	r2, #0
 8006612:	4b81      	ldr	r3, [pc, #516]	; (8006818 <_dtoa_r+0x608>)
 8006614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006618:	f7f9 fe0e 	bl	8000238 <__aeabi_dsub>
 800661c:	462a      	mov	r2, r5
 800661e:	4633      	mov	r3, r6
 8006620:	e9cd 0100 	strd	r0, r1, [sp]
 8006624:	f7fa fa50 	bl	8000ac8 <__aeabi_dcmpgt>
 8006628:	2800      	cmp	r0, #0
 800662a:	f040 8288 	bne.w	8006b3e <_dtoa_r+0x92e>
 800662e:	462a      	mov	r2, r5
 8006630:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006634:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006638:	f7fa fa28 	bl	8000a8c <__aeabi_dcmplt>
 800663c:	2800      	cmp	r0, #0
 800663e:	f040 827c 	bne.w	8006b3a <_dtoa_r+0x92a>
 8006642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006646:	e9cd 2300 	strd	r2, r3, [sp]
 800664a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800664c:	2b00      	cmp	r3, #0
 800664e:	f2c0 8150 	blt.w	80068f2 <_dtoa_r+0x6e2>
 8006652:	f1ba 0f0e 	cmp.w	sl, #14
 8006656:	f300 814c 	bgt.w	80068f2 <_dtoa_r+0x6e2>
 800665a:	4b6a      	ldr	r3, [pc, #424]	; (8006804 <_dtoa_r+0x5f4>)
 800665c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006660:	ed93 7b00 	vldr	d7, [r3]
 8006664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	ed8d 7b02 	vstr	d7, [sp, #8]
 800666c:	f280 80d8 	bge.w	8006820 <_dtoa_r+0x610>
 8006670:	f1b9 0f00 	cmp.w	r9, #0
 8006674:	f300 80d4 	bgt.w	8006820 <_dtoa_r+0x610>
 8006678:	f040 825e 	bne.w	8006b38 <_dtoa_r+0x928>
 800667c:	2200      	movs	r2, #0
 800667e:	4b66      	ldr	r3, [pc, #408]	; (8006818 <_dtoa_r+0x608>)
 8006680:	ec51 0b17 	vmov	r0, r1, d7
 8006684:	f7f9 ff90 	bl	80005a8 <__aeabi_dmul>
 8006688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800668c:	f7fa fa12 	bl	8000ab4 <__aeabi_dcmpge>
 8006690:	464f      	mov	r7, r9
 8006692:	464e      	mov	r6, r9
 8006694:	2800      	cmp	r0, #0
 8006696:	f040 8234 	bne.w	8006b02 <_dtoa_r+0x8f2>
 800669a:	2331      	movs	r3, #49	; 0x31
 800669c:	f10b 0501 	add.w	r5, fp, #1
 80066a0:	f88b 3000 	strb.w	r3, [fp]
 80066a4:	f10a 0a01 	add.w	sl, sl, #1
 80066a8:	e22f      	b.n	8006b0a <_dtoa_r+0x8fa>
 80066aa:	07f2      	lsls	r2, r6, #31
 80066ac:	d505      	bpl.n	80066ba <_dtoa_r+0x4aa>
 80066ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b2:	f7f9 ff79 	bl	80005a8 <__aeabi_dmul>
 80066b6:	3501      	adds	r5, #1
 80066b8:	2301      	movs	r3, #1
 80066ba:	1076      	asrs	r6, r6, #1
 80066bc:	3708      	adds	r7, #8
 80066be:	e772      	b.n	80065a6 <_dtoa_r+0x396>
 80066c0:	2502      	movs	r5, #2
 80066c2:	e774      	b.n	80065ae <_dtoa_r+0x39e>
 80066c4:	f8cd a020 	str.w	sl, [sp, #32]
 80066c8:	464f      	mov	r7, r9
 80066ca:	e791      	b.n	80065f0 <_dtoa_r+0x3e0>
 80066cc:	4b4d      	ldr	r3, [pc, #308]	; (8006804 <_dtoa_r+0x5f4>)
 80066ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80066d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d047      	beq.n	800676c <_dtoa_r+0x55c>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	2000      	movs	r0, #0
 80066e2:	494e      	ldr	r1, [pc, #312]	; (800681c <_dtoa_r+0x60c>)
 80066e4:	f7fa f88a 	bl	80007fc <__aeabi_ddiv>
 80066e8:	462a      	mov	r2, r5
 80066ea:	4633      	mov	r3, r6
 80066ec:	f7f9 fda4 	bl	8000238 <__aeabi_dsub>
 80066f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80066f4:	465d      	mov	r5, fp
 80066f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066fa:	f7fa fa05 	bl	8000b08 <__aeabi_d2iz>
 80066fe:	4606      	mov	r6, r0
 8006700:	f7f9 fee8 	bl	80004d4 <__aeabi_i2d>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800670c:	f7f9 fd94 	bl	8000238 <__aeabi_dsub>
 8006710:	3630      	adds	r6, #48	; 0x30
 8006712:	f805 6b01 	strb.w	r6, [r5], #1
 8006716:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800671a:	e9cd 0100 	strd	r0, r1, [sp]
 800671e:	f7fa f9b5 	bl	8000a8c <__aeabi_dcmplt>
 8006722:	2800      	cmp	r0, #0
 8006724:	d163      	bne.n	80067ee <_dtoa_r+0x5de>
 8006726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800672a:	2000      	movs	r0, #0
 800672c:	4937      	ldr	r1, [pc, #220]	; (800680c <_dtoa_r+0x5fc>)
 800672e:	f7f9 fd83 	bl	8000238 <__aeabi_dsub>
 8006732:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006736:	f7fa f9a9 	bl	8000a8c <__aeabi_dcmplt>
 800673a:	2800      	cmp	r0, #0
 800673c:	f040 80b7 	bne.w	80068ae <_dtoa_r+0x69e>
 8006740:	eba5 030b 	sub.w	r3, r5, fp
 8006744:	429f      	cmp	r7, r3
 8006746:	f77f af7c 	ble.w	8006642 <_dtoa_r+0x432>
 800674a:	2200      	movs	r2, #0
 800674c:	4b30      	ldr	r3, [pc, #192]	; (8006810 <_dtoa_r+0x600>)
 800674e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006752:	f7f9 ff29 	bl	80005a8 <__aeabi_dmul>
 8006756:	2200      	movs	r2, #0
 8006758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800675c:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <_dtoa_r+0x600>)
 800675e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006762:	f7f9 ff21 	bl	80005a8 <__aeabi_dmul>
 8006766:	e9cd 0100 	strd	r0, r1, [sp]
 800676a:	e7c4      	b.n	80066f6 <_dtoa_r+0x4e6>
 800676c:	462a      	mov	r2, r5
 800676e:	4633      	mov	r3, r6
 8006770:	f7f9 ff1a 	bl	80005a8 <__aeabi_dmul>
 8006774:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006778:	eb0b 0507 	add.w	r5, fp, r7
 800677c:	465e      	mov	r6, fp
 800677e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006782:	f7fa f9c1 	bl	8000b08 <__aeabi_d2iz>
 8006786:	4607      	mov	r7, r0
 8006788:	f7f9 fea4 	bl	80004d4 <__aeabi_i2d>
 800678c:	3730      	adds	r7, #48	; 0x30
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006796:	f7f9 fd4f 	bl	8000238 <__aeabi_dsub>
 800679a:	f806 7b01 	strb.w	r7, [r6], #1
 800679e:	42ae      	cmp	r6, r5
 80067a0:	e9cd 0100 	strd	r0, r1, [sp]
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	d126      	bne.n	80067f8 <_dtoa_r+0x5e8>
 80067aa:	4b1c      	ldr	r3, [pc, #112]	; (800681c <_dtoa_r+0x60c>)
 80067ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067b0:	f7f9 fd44 	bl	800023c <__adddf3>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067bc:	f7fa f984 	bl	8000ac8 <__aeabi_dcmpgt>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d174      	bne.n	80068ae <_dtoa_r+0x69e>
 80067c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80067c8:	2000      	movs	r0, #0
 80067ca:	4914      	ldr	r1, [pc, #80]	; (800681c <_dtoa_r+0x60c>)
 80067cc:	f7f9 fd34 	bl	8000238 <__aeabi_dsub>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067d8:	f7fa f958 	bl	8000a8c <__aeabi_dcmplt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	f43f af30 	beq.w	8006642 <_dtoa_r+0x432>
 80067e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067e6:	2b30      	cmp	r3, #48	; 0x30
 80067e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80067ec:	d002      	beq.n	80067f4 <_dtoa_r+0x5e4>
 80067ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80067f2:	e04a      	b.n	800688a <_dtoa_r+0x67a>
 80067f4:	4615      	mov	r5, r2
 80067f6:	e7f4      	b.n	80067e2 <_dtoa_r+0x5d2>
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <_dtoa_r+0x600>)
 80067fa:	f7f9 fed5 	bl	80005a8 <__aeabi_dmul>
 80067fe:	e9cd 0100 	strd	r0, r1, [sp]
 8006802:	e7bc      	b.n	800677e <_dtoa_r+0x56e>
 8006804:	08007a60 	.word	0x08007a60
 8006808:	08007a38 	.word	0x08007a38
 800680c:	3ff00000 	.word	0x3ff00000
 8006810:	40240000 	.word	0x40240000
 8006814:	401c0000 	.word	0x401c0000
 8006818:	40140000 	.word	0x40140000
 800681c:	3fe00000 	.word	0x3fe00000
 8006820:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006824:	465d      	mov	r5, fp
 8006826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800682a:	4630      	mov	r0, r6
 800682c:	4639      	mov	r1, r7
 800682e:	f7f9 ffe5 	bl	80007fc <__aeabi_ddiv>
 8006832:	f7fa f969 	bl	8000b08 <__aeabi_d2iz>
 8006836:	4680      	mov	r8, r0
 8006838:	f7f9 fe4c 	bl	80004d4 <__aeabi_i2d>
 800683c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006840:	f7f9 feb2 	bl	80005a8 <__aeabi_dmul>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4630      	mov	r0, r6
 800684a:	4639      	mov	r1, r7
 800684c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006850:	f7f9 fcf2 	bl	8000238 <__aeabi_dsub>
 8006854:	f805 6b01 	strb.w	r6, [r5], #1
 8006858:	eba5 060b 	sub.w	r6, r5, fp
 800685c:	45b1      	cmp	r9, r6
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	d139      	bne.n	80068d8 <_dtoa_r+0x6c8>
 8006864:	f7f9 fcea 	bl	800023c <__adddf3>
 8006868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800686c:	4606      	mov	r6, r0
 800686e:	460f      	mov	r7, r1
 8006870:	f7fa f92a 	bl	8000ac8 <__aeabi_dcmpgt>
 8006874:	b9c8      	cbnz	r0, 80068aa <_dtoa_r+0x69a>
 8006876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800687a:	4630      	mov	r0, r6
 800687c:	4639      	mov	r1, r7
 800687e:	f7fa f8fb 	bl	8000a78 <__aeabi_dcmpeq>
 8006882:	b110      	cbz	r0, 800688a <_dtoa_r+0x67a>
 8006884:	f018 0f01 	tst.w	r8, #1
 8006888:	d10f      	bne.n	80068aa <_dtoa_r+0x69a>
 800688a:	9904      	ldr	r1, [sp, #16]
 800688c:	4620      	mov	r0, r4
 800688e:	f000 fac1 	bl	8006e14 <_Bfree>
 8006892:	2300      	movs	r3, #0
 8006894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006896:	702b      	strb	r3, [r5, #0]
 8006898:	f10a 0301 	add.w	r3, sl, #1
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8241 	beq.w	8006d28 <_dtoa_r+0xb18>
 80068a6:	601d      	str	r5, [r3, #0]
 80068a8:	e23e      	b.n	8006d28 <_dtoa_r+0xb18>
 80068aa:	f8cd a020 	str.w	sl, [sp, #32]
 80068ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80068b2:	2a39      	cmp	r2, #57	; 0x39
 80068b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80068b8:	d108      	bne.n	80068cc <_dtoa_r+0x6bc>
 80068ba:	459b      	cmp	fp, r3
 80068bc:	d10a      	bne.n	80068d4 <_dtoa_r+0x6c4>
 80068be:	9b08      	ldr	r3, [sp, #32]
 80068c0:	3301      	adds	r3, #1
 80068c2:	9308      	str	r3, [sp, #32]
 80068c4:	2330      	movs	r3, #48	; 0x30
 80068c6:	f88b 3000 	strb.w	r3, [fp]
 80068ca:	465b      	mov	r3, fp
 80068cc:	781a      	ldrb	r2, [r3, #0]
 80068ce:	3201      	adds	r2, #1
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	e78c      	b.n	80067ee <_dtoa_r+0x5de>
 80068d4:	461d      	mov	r5, r3
 80068d6:	e7ea      	b.n	80068ae <_dtoa_r+0x69e>
 80068d8:	2200      	movs	r2, #0
 80068da:	4b9b      	ldr	r3, [pc, #620]	; (8006b48 <_dtoa_r+0x938>)
 80068dc:	f7f9 fe64 	bl	80005a8 <__aeabi_dmul>
 80068e0:	2200      	movs	r2, #0
 80068e2:	2300      	movs	r3, #0
 80068e4:	4606      	mov	r6, r0
 80068e6:	460f      	mov	r7, r1
 80068e8:	f7fa f8c6 	bl	8000a78 <__aeabi_dcmpeq>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d09a      	beq.n	8006826 <_dtoa_r+0x616>
 80068f0:	e7cb      	b.n	800688a <_dtoa_r+0x67a>
 80068f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	f000 808b 	beq.w	8006a10 <_dtoa_r+0x800>
 80068fa:	9a06      	ldr	r2, [sp, #24]
 80068fc:	2a01      	cmp	r2, #1
 80068fe:	dc6e      	bgt.n	80069de <_dtoa_r+0x7ce>
 8006900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006902:	2a00      	cmp	r2, #0
 8006904:	d067      	beq.n	80069d6 <_dtoa_r+0x7c6>
 8006906:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800690a:	9f07      	ldr	r7, [sp, #28]
 800690c:	9d05      	ldr	r5, [sp, #20]
 800690e:	9a05      	ldr	r2, [sp, #20]
 8006910:	2101      	movs	r1, #1
 8006912:	441a      	add	r2, r3
 8006914:	4620      	mov	r0, r4
 8006916:	9205      	str	r2, [sp, #20]
 8006918:	4498      	add	r8, r3
 800691a:	f000 fb1b 	bl	8006f54 <__i2b>
 800691e:	4606      	mov	r6, r0
 8006920:	2d00      	cmp	r5, #0
 8006922:	dd0c      	ble.n	800693e <_dtoa_r+0x72e>
 8006924:	f1b8 0f00 	cmp.w	r8, #0
 8006928:	dd09      	ble.n	800693e <_dtoa_r+0x72e>
 800692a:	4545      	cmp	r5, r8
 800692c:	9a05      	ldr	r2, [sp, #20]
 800692e:	462b      	mov	r3, r5
 8006930:	bfa8      	it	ge
 8006932:	4643      	movge	r3, r8
 8006934:	1ad2      	subs	r2, r2, r3
 8006936:	9205      	str	r2, [sp, #20]
 8006938:	1aed      	subs	r5, r5, r3
 800693a:	eba8 0803 	sub.w	r8, r8, r3
 800693e:	9b07      	ldr	r3, [sp, #28]
 8006940:	b1eb      	cbz	r3, 800697e <_dtoa_r+0x76e>
 8006942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006944:	2b00      	cmp	r3, #0
 8006946:	d067      	beq.n	8006a18 <_dtoa_r+0x808>
 8006948:	b18f      	cbz	r7, 800696e <_dtoa_r+0x75e>
 800694a:	4631      	mov	r1, r6
 800694c:	463a      	mov	r2, r7
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fba0 	bl	8007094 <__pow5mult>
 8006954:	9a04      	ldr	r2, [sp, #16]
 8006956:	4601      	mov	r1, r0
 8006958:	4606      	mov	r6, r0
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fb03 	bl	8006f66 <__multiply>
 8006960:	9904      	ldr	r1, [sp, #16]
 8006962:	9008      	str	r0, [sp, #32]
 8006964:	4620      	mov	r0, r4
 8006966:	f000 fa55 	bl	8006e14 <_Bfree>
 800696a:	9b08      	ldr	r3, [sp, #32]
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	9b07      	ldr	r3, [sp, #28]
 8006970:	1bda      	subs	r2, r3, r7
 8006972:	d004      	beq.n	800697e <_dtoa_r+0x76e>
 8006974:	9904      	ldr	r1, [sp, #16]
 8006976:	4620      	mov	r0, r4
 8006978:	f000 fb8c 	bl	8007094 <__pow5mult>
 800697c:	9004      	str	r0, [sp, #16]
 800697e:	2101      	movs	r1, #1
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fae7 	bl	8006f54 <__i2b>
 8006986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006988:	4607      	mov	r7, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 81d0 	beq.w	8006d30 <_dtoa_r+0xb20>
 8006990:	461a      	mov	r2, r3
 8006992:	4601      	mov	r1, r0
 8006994:	4620      	mov	r0, r4
 8006996:	f000 fb7d 	bl	8007094 <__pow5mult>
 800699a:	9b06      	ldr	r3, [sp, #24]
 800699c:	2b01      	cmp	r3, #1
 800699e:	4607      	mov	r7, r0
 80069a0:	dc40      	bgt.n	8006a24 <_dtoa_r+0x814>
 80069a2:	9b00      	ldr	r3, [sp, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d139      	bne.n	8006a1c <_dtoa_r+0x80c>
 80069a8:	9b01      	ldr	r3, [sp, #4]
 80069aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d136      	bne.n	8006a20 <_dtoa_r+0x810>
 80069b2:	9b01      	ldr	r3, [sp, #4]
 80069b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069b8:	0d1b      	lsrs	r3, r3, #20
 80069ba:	051b      	lsls	r3, r3, #20
 80069bc:	b12b      	cbz	r3, 80069ca <_dtoa_r+0x7ba>
 80069be:	9b05      	ldr	r3, [sp, #20]
 80069c0:	3301      	adds	r3, #1
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	f108 0801 	add.w	r8, r8, #1
 80069c8:	2301      	movs	r3, #1
 80069ca:	9307      	str	r3, [sp, #28]
 80069cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d12a      	bne.n	8006a28 <_dtoa_r+0x818>
 80069d2:	2001      	movs	r0, #1
 80069d4:	e030      	b.n	8006a38 <_dtoa_r+0x828>
 80069d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069dc:	e795      	b.n	800690a <_dtoa_r+0x6fa>
 80069de:	9b07      	ldr	r3, [sp, #28]
 80069e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80069e4:	42bb      	cmp	r3, r7
 80069e6:	bfbf      	itttt	lt
 80069e8:	9b07      	ldrlt	r3, [sp, #28]
 80069ea:	9707      	strlt	r7, [sp, #28]
 80069ec:	1afa      	sublt	r2, r7, r3
 80069ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80069f0:	bfbb      	ittet	lt
 80069f2:	189b      	addlt	r3, r3, r2
 80069f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80069f6:	1bdf      	subge	r7, r3, r7
 80069f8:	2700      	movlt	r7, #0
 80069fa:	f1b9 0f00 	cmp.w	r9, #0
 80069fe:	bfb5      	itete	lt
 8006a00:	9b05      	ldrlt	r3, [sp, #20]
 8006a02:	9d05      	ldrge	r5, [sp, #20]
 8006a04:	eba3 0509 	sublt.w	r5, r3, r9
 8006a08:	464b      	movge	r3, r9
 8006a0a:	bfb8      	it	lt
 8006a0c:	2300      	movlt	r3, #0
 8006a0e:	e77e      	b.n	800690e <_dtoa_r+0x6fe>
 8006a10:	9f07      	ldr	r7, [sp, #28]
 8006a12:	9d05      	ldr	r5, [sp, #20]
 8006a14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006a16:	e783      	b.n	8006920 <_dtoa_r+0x710>
 8006a18:	9a07      	ldr	r2, [sp, #28]
 8006a1a:	e7ab      	b.n	8006974 <_dtoa_r+0x764>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e7d4      	b.n	80069ca <_dtoa_r+0x7ba>
 8006a20:	9b00      	ldr	r3, [sp, #0]
 8006a22:	e7d2      	b.n	80069ca <_dtoa_r+0x7ba>
 8006a24:	2300      	movs	r3, #0
 8006a26:	9307      	str	r3, [sp, #28]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006a2e:	6918      	ldr	r0, [r3, #16]
 8006a30:	f000 fa42 	bl	8006eb8 <__hi0bits>
 8006a34:	f1c0 0020 	rsb	r0, r0, #32
 8006a38:	4440      	add	r0, r8
 8006a3a:	f010 001f 	ands.w	r0, r0, #31
 8006a3e:	d047      	beq.n	8006ad0 <_dtoa_r+0x8c0>
 8006a40:	f1c0 0320 	rsb	r3, r0, #32
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	dd3b      	ble.n	8006ac0 <_dtoa_r+0x8b0>
 8006a48:	9b05      	ldr	r3, [sp, #20]
 8006a4a:	f1c0 001c 	rsb	r0, r0, #28
 8006a4e:	4403      	add	r3, r0
 8006a50:	9305      	str	r3, [sp, #20]
 8006a52:	4405      	add	r5, r0
 8006a54:	4480      	add	r8, r0
 8006a56:	9b05      	ldr	r3, [sp, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dd05      	ble.n	8006a68 <_dtoa_r+0x858>
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	9904      	ldr	r1, [sp, #16]
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fb65 	bl	8007130 <__lshift>
 8006a66:	9004      	str	r0, [sp, #16]
 8006a68:	f1b8 0f00 	cmp.w	r8, #0
 8006a6c:	dd05      	ble.n	8006a7a <_dtoa_r+0x86a>
 8006a6e:	4639      	mov	r1, r7
 8006a70:	4642      	mov	r2, r8
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 fb5c 	bl	8007130 <__lshift>
 8006a78:	4607      	mov	r7, r0
 8006a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a7c:	b353      	cbz	r3, 8006ad4 <_dtoa_r+0x8c4>
 8006a7e:	4639      	mov	r1, r7
 8006a80:	9804      	ldr	r0, [sp, #16]
 8006a82:	f000 fba9 	bl	80071d8 <__mcmp>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	da24      	bge.n	8006ad4 <_dtoa_r+0x8c4>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	220a      	movs	r2, #10
 8006a8e:	9904      	ldr	r1, [sp, #16]
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 f9d6 	bl	8006e42 <__multadd>
 8006a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a98:	9004      	str	r0, [sp, #16]
 8006a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 814d 	beq.w	8006d3e <_dtoa_r+0xb2e>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f000 f9c9 	bl	8006e42 <__multadd>
 8006ab0:	9b02      	ldr	r3, [sp, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	dc4f      	bgt.n	8006b58 <_dtoa_r+0x948>
 8006ab8:	9b06      	ldr	r3, [sp, #24]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	dd4c      	ble.n	8006b58 <_dtoa_r+0x948>
 8006abe:	e011      	b.n	8006ae4 <_dtoa_r+0x8d4>
 8006ac0:	d0c9      	beq.n	8006a56 <_dtoa_r+0x846>
 8006ac2:	9a05      	ldr	r2, [sp, #20]
 8006ac4:	331c      	adds	r3, #28
 8006ac6:	441a      	add	r2, r3
 8006ac8:	9205      	str	r2, [sp, #20]
 8006aca:	441d      	add	r5, r3
 8006acc:	4498      	add	r8, r3
 8006ace:	e7c2      	b.n	8006a56 <_dtoa_r+0x846>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	e7f6      	b.n	8006ac2 <_dtoa_r+0x8b2>
 8006ad4:	f1b9 0f00 	cmp.w	r9, #0
 8006ad8:	dc38      	bgt.n	8006b4c <_dtoa_r+0x93c>
 8006ada:	9b06      	ldr	r3, [sp, #24]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	dd35      	ble.n	8006b4c <_dtoa_r+0x93c>
 8006ae0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ae4:	9b02      	ldr	r3, [sp, #8]
 8006ae6:	b963      	cbnz	r3, 8006b02 <_dtoa_r+0x8f2>
 8006ae8:	4639      	mov	r1, r7
 8006aea:	2205      	movs	r2, #5
 8006aec:	4620      	mov	r0, r4
 8006aee:	f000 f9a8 	bl	8006e42 <__multadd>
 8006af2:	4601      	mov	r1, r0
 8006af4:	4607      	mov	r7, r0
 8006af6:	9804      	ldr	r0, [sp, #16]
 8006af8:	f000 fb6e 	bl	80071d8 <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f73f adcc 	bgt.w	800669a <_dtoa_r+0x48a>
 8006b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b04:	465d      	mov	r5, fp
 8006b06:	ea6f 0a03 	mvn.w	sl, r3
 8006b0a:	f04f 0900 	mov.w	r9, #0
 8006b0e:	4639      	mov	r1, r7
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 f97f 	bl	8006e14 <_Bfree>
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	f43f aeb7 	beq.w	800688a <_dtoa_r+0x67a>
 8006b1c:	f1b9 0f00 	cmp.w	r9, #0
 8006b20:	d005      	beq.n	8006b2e <_dtoa_r+0x91e>
 8006b22:	45b1      	cmp	r9, r6
 8006b24:	d003      	beq.n	8006b2e <_dtoa_r+0x91e>
 8006b26:	4649      	mov	r1, r9
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 f973 	bl	8006e14 <_Bfree>
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 f96f 	bl	8006e14 <_Bfree>
 8006b36:	e6a8      	b.n	800688a <_dtoa_r+0x67a>
 8006b38:	2700      	movs	r7, #0
 8006b3a:	463e      	mov	r6, r7
 8006b3c:	e7e1      	b.n	8006b02 <_dtoa_r+0x8f2>
 8006b3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006b42:	463e      	mov	r6, r7
 8006b44:	e5a9      	b.n	800669a <_dtoa_r+0x48a>
 8006b46:	bf00      	nop
 8006b48:	40240000 	.word	0x40240000
 8006b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 80fa 	beq.w	8006d4c <_dtoa_r+0xb3c>
 8006b58:	2d00      	cmp	r5, #0
 8006b5a:	dd05      	ble.n	8006b68 <_dtoa_r+0x958>
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	462a      	mov	r2, r5
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 fae5 	bl	8007130 <__lshift>
 8006b66:	4606      	mov	r6, r0
 8006b68:	9b07      	ldr	r3, [sp, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d04c      	beq.n	8006c08 <_dtoa_r+0x9f8>
 8006b6e:	6871      	ldr	r1, [r6, #4]
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 f91b 	bl	8006dac <_Balloc>
 8006b76:	6932      	ldr	r2, [r6, #16]
 8006b78:	3202      	adds	r2, #2
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	0092      	lsls	r2, r2, #2
 8006b7e:	f106 010c 	add.w	r1, r6, #12
 8006b82:	300c      	adds	r0, #12
 8006b84:	f7fe fe28 	bl	80057d8 <memcpy>
 8006b88:	2201      	movs	r2, #1
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 facf 	bl	8007130 <__lshift>
 8006b92:	9b00      	ldr	r3, [sp, #0]
 8006b94:	f8cd b014 	str.w	fp, [sp, #20]
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	46b1      	mov	r9, r6
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	9804      	ldr	r0, [sp, #16]
 8006ba6:	f7ff faa7 	bl	80060f8 <quorem>
 8006baa:	4649      	mov	r1, r9
 8006bac:	4605      	mov	r5, r0
 8006bae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006bb2:	9804      	ldr	r0, [sp, #16]
 8006bb4:	f000 fb10 	bl	80071d8 <__mcmp>
 8006bb8:	4632      	mov	r2, r6
 8006bba:	9000      	str	r0, [sp, #0]
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 fb24 	bl	800720c <__mdiff>
 8006bc4:	68c3      	ldr	r3, [r0, #12]
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	bb03      	cbnz	r3, 8006c0c <_dtoa_r+0x9fc>
 8006bca:	4601      	mov	r1, r0
 8006bcc:	9008      	str	r0, [sp, #32]
 8006bce:	9804      	ldr	r0, [sp, #16]
 8006bd0:	f000 fb02 	bl	80071d8 <__mcmp>
 8006bd4:	9a08      	ldr	r2, [sp, #32]
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4620      	mov	r0, r4
 8006bdc:	9308      	str	r3, [sp, #32]
 8006bde:	f000 f919 	bl	8006e14 <_Bfree>
 8006be2:	9b08      	ldr	r3, [sp, #32]
 8006be4:	b9a3      	cbnz	r3, 8006c10 <_dtoa_r+0xa00>
 8006be6:	9a06      	ldr	r2, [sp, #24]
 8006be8:	b992      	cbnz	r2, 8006c10 <_dtoa_r+0xa00>
 8006bea:	9a07      	ldr	r2, [sp, #28]
 8006bec:	b982      	cbnz	r2, 8006c10 <_dtoa_r+0xa00>
 8006bee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bf2:	d029      	beq.n	8006c48 <_dtoa_r+0xa38>
 8006bf4:	9b00      	ldr	r3, [sp, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	dd01      	ble.n	8006bfe <_dtoa_r+0x9ee>
 8006bfa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006bfe:	9b05      	ldr	r3, [sp, #20]
 8006c00:	1c5d      	adds	r5, r3, #1
 8006c02:	f883 8000 	strb.w	r8, [r3]
 8006c06:	e782      	b.n	8006b0e <_dtoa_r+0x8fe>
 8006c08:	4630      	mov	r0, r6
 8006c0a:	e7c2      	b.n	8006b92 <_dtoa_r+0x982>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e7e3      	b.n	8006bd8 <_dtoa_r+0x9c8>
 8006c10:	9a00      	ldr	r2, [sp, #0]
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	db04      	blt.n	8006c20 <_dtoa_r+0xa10>
 8006c16:	d125      	bne.n	8006c64 <_dtoa_r+0xa54>
 8006c18:	9a06      	ldr	r2, [sp, #24]
 8006c1a:	bb1a      	cbnz	r2, 8006c64 <_dtoa_r+0xa54>
 8006c1c:	9a07      	ldr	r2, [sp, #28]
 8006c1e:	bb0a      	cbnz	r2, 8006c64 <_dtoa_r+0xa54>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	ddec      	ble.n	8006bfe <_dtoa_r+0x9ee>
 8006c24:	2201      	movs	r2, #1
 8006c26:	9904      	ldr	r1, [sp, #16]
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fa81 	bl	8007130 <__lshift>
 8006c2e:	4639      	mov	r1, r7
 8006c30:	9004      	str	r0, [sp, #16]
 8006c32:	f000 fad1 	bl	80071d8 <__mcmp>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	dc03      	bgt.n	8006c42 <_dtoa_r+0xa32>
 8006c3a:	d1e0      	bne.n	8006bfe <_dtoa_r+0x9ee>
 8006c3c:	f018 0f01 	tst.w	r8, #1
 8006c40:	d0dd      	beq.n	8006bfe <_dtoa_r+0x9ee>
 8006c42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c46:	d1d8      	bne.n	8006bfa <_dtoa_r+0x9ea>
 8006c48:	9b05      	ldr	r3, [sp, #20]
 8006c4a:	9a05      	ldr	r2, [sp, #20]
 8006c4c:	1c5d      	adds	r5, r3, #1
 8006c4e:	2339      	movs	r3, #57	; 0x39
 8006c50:	7013      	strb	r3, [r2, #0]
 8006c52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c56:	2b39      	cmp	r3, #57	; 0x39
 8006c58:	f105 32ff 	add.w	r2, r5, #4294967295
 8006c5c:	d04f      	beq.n	8006cfe <_dtoa_r+0xaee>
 8006c5e:	3301      	adds	r3, #1
 8006c60:	7013      	strb	r3, [r2, #0]
 8006c62:	e754      	b.n	8006b0e <_dtoa_r+0x8fe>
 8006c64:	9a05      	ldr	r2, [sp, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f102 0501 	add.w	r5, r2, #1
 8006c6c:	dd06      	ble.n	8006c7c <_dtoa_r+0xa6c>
 8006c6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c72:	d0e9      	beq.n	8006c48 <_dtoa_r+0xa38>
 8006c74:	f108 0801 	add.w	r8, r8, #1
 8006c78:	9b05      	ldr	r3, [sp, #20]
 8006c7a:	e7c2      	b.n	8006c02 <_dtoa_r+0x9f2>
 8006c7c:	9a02      	ldr	r2, [sp, #8]
 8006c7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006c82:	eba5 030b 	sub.w	r3, r5, fp
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d021      	beq.n	8006cce <_dtoa_r+0xabe>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	220a      	movs	r2, #10
 8006c8e:	9904      	ldr	r1, [sp, #16]
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 f8d6 	bl	8006e42 <__multadd>
 8006c96:	45b1      	cmp	r9, r6
 8006c98:	9004      	str	r0, [sp, #16]
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	f04f 020a 	mov.w	r2, #10
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	d105      	bne.n	8006cb4 <_dtoa_r+0xaa4>
 8006ca8:	f000 f8cb 	bl	8006e42 <__multadd>
 8006cac:	4681      	mov	r9, r0
 8006cae:	4606      	mov	r6, r0
 8006cb0:	9505      	str	r5, [sp, #20]
 8006cb2:	e776      	b.n	8006ba2 <_dtoa_r+0x992>
 8006cb4:	f000 f8c5 	bl	8006e42 <__multadd>
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4681      	mov	r9, r0
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	220a      	movs	r2, #10
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 f8be 	bl	8006e42 <__multadd>
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	e7f2      	b.n	8006cb0 <_dtoa_r+0xaa0>
 8006cca:	f04f 0900 	mov.w	r9, #0
 8006cce:	2201      	movs	r2, #1
 8006cd0:	9904      	ldr	r1, [sp, #16]
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fa2c 	bl	8007130 <__lshift>
 8006cd8:	4639      	mov	r1, r7
 8006cda:	9004      	str	r0, [sp, #16]
 8006cdc:	f000 fa7c 	bl	80071d8 <__mcmp>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	dcb6      	bgt.n	8006c52 <_dtoa_r+0xa42>
 8006ce4:	d102      	bne.n	8006cec <_dtoa_r+0xadc>
 8006ce6:	f018 0f01 	tst.w	r8, #1
 8006cea:	d1b2      	bne.n	8006c52 <_dtoa_r+0xa42>
 8006cec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cf0:	2b30      	cmp	r3, #48	; 0x30
 8006cf2:	f105 32ff 	add.w	r2, r5, #4294967295
 8006cf6:	f47f af0a 	bne.w	8006b0e <_dtoa_r+0x8fe>
 8006cfa:	4615      	mov	r5, r2
 8006cfc:	e7f6      	b.n	8006cec <_dtoa_r+0xadc>
 8006cfe:	4593      	cmp	fp, r2
 8006d00:	d105      	bne.n	8006d0e <_dtoa_r+0xafe>
 8006d02:	2331      	movs	r3, #49	; 0x31
 8006d04:	f10a 0a01 	add.w	sl, sl, #1
 8006d08:	f88b 3000 	strb.w	r3, [fp]
 8006d0c:	e6ff      	b.n	8006b0e <_dtoa_r+0x8fe>
 8006d0e:	4615      	mov	r5, r2
 8006d10:	e79f      	b.n	8006c52 <_dtoa_r+0xa42>
 8006d12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006d78 <_dtoa_r+0xb68>
 8006d16:	e007      	b.n	8006d28 <_dtoa_r+0xb18>
 8006d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006d7c <_dtoa_r+0xb6c>
 8006d1e:	b11b      	cbz	r3, 8006d28 <_dtoa_r+0xb18>
 8006d20:	f10b 0308 	add.w	r3, fp, #8
 8006d24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	4658      	mov	r0, fp
 8006d2a:	b017      	add	sp, #92	; 0x5c
 8006d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	9b06      	ldr	r3, [sp, #24]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	f77f ae35 	ble.w	80069a2 <_dtoa_r+0x792>
 8006d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d3a:	9307      	str	r3, [sp, #28]
 8006d3c:	e649      	b.n	80069d2 <_dtoa_r+0x7c2>
 8006d3e:	9b02      	ldr	r3, [sp, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc03      	bgt.n	8006d4c <_dtoa_r+0xb3c>
 8006d44:	9b06      	ldr	r3, [sp, #24]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	f73f aecc 	bgt.w	8006ae4 <_dtoa_r+0x8d4>
 8006d4c:	465d      	mov	r5, fp
 8006d4e:	4639      	mov	r1, r7
 8006d50:	9804      	ldr	r0, [sp, #16]
 8006d52:	f7ff f9d1 	bl	80060f8 <quorem>
 8006d56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d5a:	f805 8b01 	strb.w	r8, [r5], #1
 8006d5e:	9a02      	ldr	r2, [sp, #8]
 8006d60:	eba5 030b 	sub.w	r3, r5, fp
 8006d64:	429a      	cmp	r2, r3
 8006d66:	ddb0      	ble.n	8006cca <_dtoa_r+0xaba>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	9904      	ldr	r1, [sp, #16]
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 f867 	bl	8006e42 <__multadd>
 8006d74:	9004      	str	r0, [sp, #16]
 8006d76:	e7ea      	b.n	8006d4e <_dtoa_r+0xb3e>
 8006d78:	080079a0 	.word	0x080079a0
 8006d7c:	080079c4 	.word	0x080079c4

08006d80 <_localeconv_r>:
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <_localeconv_r+0x14>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a18      	ldr	r0, [r3, #32]
 8006d86:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <_localeconv_r+0x18>)
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	bf08      	it	eq
 8006d8c:	4618      	moveq	r0, r3
 8006d8e:	30f0      	adds	r0, #240	; 0xf0
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000010 	.word	0x20000010
 8006d98:	20000074 	.word	0x20000074

08006d9c <malloc>:
 8006d9c:	4b02      	ldr	r3, [pc, #8]	; (8006da8 <malloc+0xc>)
 8006d9e:	4601      	mov	r1, r0
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	f000 bb3b 	b.w	800741c <_malloc_r>
 8006da6:	bf00      	nop
 8006da8:	20000010 	.word	0x20000010

08006dac <_Balloc>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006db0:	4604      	mov	r4, r0
 8006db2:	460e      	mov	r6, r1
 8006db4:	b93d      	cbnz	r5, 8006dc6 <_Balloc+0x1a>
 8006db6:	2010      	movs	r0, #16
 8006db8:	f7ff fff0 	bl	8006d9c <malloc>
 8006dbc:	6260      	str	r0, [r4, #36]	; 0x24
 8006dbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006dc2:	6005      	str	r5, [r0, #0]
 8006dc4:	60c5      	str	r5, [r0, #12]
 8006dc6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006dc8:	68eb      	ldr	r3, [r5, #12]
 8006dca:	b183      	cbz	r3, 8006dee <_Balloc+0x42>
 8006dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006dd4:	b9b8      	cbnz	r0, 8006e06 <_Balloc+0x5a>
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	fa01 f506 	lsl.w	r5, r1, r6
 8006ddc:	1d6a      	adds	r2, r5, #5
 8006dde:	0092      	lsls	r2, r2, #2
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fabf 	bl	8007364 <_calloc_r>
 8006de6:	b160      	cbz	r0, 8006e02 <_Balloc+0x56>
 8006de8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006dec:	e00e      	b.n	8006e0c <_Balloc+0x60>
 8006dee:	2221      	movs	r2, #33	; 0x21
 8006df0:	2104      	movs	r1, #4
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 fab6 	bl	8007364 <_calloc_r>
 8006df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dfa:	60e8      	str	r0, [r5, #12]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e4      	bne.n	8006dcc <_Balloc+0x20>
 8006e02:	2000      	movs	r0, #0
 8006e04:	bd70      	pop	{r4, r5, r6, pc}
 8006e06:	6802      	ldr	r2, [r0, #0]
 8006e08:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e12:	e7f7      	b.n	8006e04 <_Balloc+0x58>

08006e14 <_Bfree>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e18:	4606      	mov	r6, r0
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	b93c      	cbnz	r4, 8006e2e <_Bfree+0x1a>
 8006e1e:	2010      	movs	r0, #16
 8006e20:	f7ff ffbc 	bl	8006d9c <malloc>
 8006e24:	6270      	str	r0, [r6, #36]	; 0x24
 8006e26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e2a:	6004      	str	r4, [r0, #0]
 8006e2c:	60c4      	str	r4, [r0, #12]
 8006e2e:	b13d      	cbz	r5, 8006e40 <_Bfree+0x2c>
 8006e30:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e32:	686a      	ldr	r2, [r5, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e3a:	6029      	str	r1, [r5, #0]
 8006e3c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006e40:	bd70      	pop	{r4, r5, r6, pc}

08006e42 <__multadd>:
 8006e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	690d      	ldr	r5, [r1, #16]
 8006e48:	461f      	mov	r7, r3
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	f101 0c14 	add.w	ip, r1, #20
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8dc 0000 	ldr.w	r0, [ip]
 8006e58:	b281      	uxth	r1, r0
 8006e5a:	fb02 7101 	mla	r1, r2, r1, r7
 8006e5e:	0c0f      	lsrs	r7, r1, #16
 8006e60:	0c00      	lsrs	r0, r0, #16
 8006e62:	fb02 7000 	mla	r0, r2, r0, r7
 8006e66:	b289      	uxth	r1, r1
 8006e68:	3301      	adds	r3, #1
 8006e6a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006e6e:	429d      	cmp	r5, r3
 8006e70:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006e74:	f84c 1b04 	str.w	r1, [ip], #4
 8006e78:	dcec      	bgt.n	8006e54 <__multadd+0x12>
 8006e7a:	b1d7      	cbz	r7, 8006eb2 <__multadd+0x70>
 8006e7c:	68a3      	ldr	r3, [r4, #8]
 8006e7e:	42ab      	cmp	r3, r5
 8006e80:	dc12      	bgt.n	8006ea8 <__multadd+0x66>
 8006e82:	6861      	ldr	r1, [r4, #4]
 8006e84:	4630      	mov	r0, r6
 8006e86:	3101      	adds	r1, #1
 8006e88:	f7ff ff90 	bl	8006dac <_Balloc>
 8006e8c:	6922      	ldr	r2, [r4, #16]
 8006e8e:	3202      	adds	r2, #2
 8006e90:	f104 010c 	add.w	r1, r4, #12
 8006e94:	4680      	mov	r8, r0
 8006e96:	0092      	lsls	r2, r2, #2
 8006e98:	300c      	adds	r0, #12
 8006e9a:	f7fe fc9d 	bl	80057d8 <memcpy>
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f7ff ffb7 	bl	8006e14 <_Bfree>
 8006ea6:	4644      	mov	r4, r8
 8006ea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006eac:	3501      	adds	r5, #1
 8006eae:	615f      	str	r7, [r3, #20]
 8006eb0:	6125      	str	r5, [r4, #16]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006eb8 <__hi0bits>:
 8006eb8:	0c02      	lsrs	r2, r0, #16
 8006eba:	0412      	lsls	r2, r2, #16
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	b9b2      	cbnz	r2, 8006eee <__hi0bits+0x36>
 8006ec0:	0403      	lsls	r3, r0, #16
 8006ec2:	2010      	movs	r0, #16
 8006ec4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ec8:	bf04      	itt	eq
 8006eca:	021b      	lsleq	r3, r3, #8
 8006ecc:	3008      	addeq	r0, #8
 8006ece:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ed2:	bf04      	itt	eq
 8006ed4:	011b      	lsleq	r3, r3, #4
 8006ed6:	3004      	addeq	r0, #4
 8006ed8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006edc:	bf04      	itt	eq
 8006ede:	009b      	lsleq	r3, r3, #2
 8006ee0:	3002      	addeq	r0, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	db06      	blt.n	8006ef4 <__hi0bits+0x3c>
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	d503      	bpl.n	8006ef2 <__hi0bits+0x3a>
 8006eea:	3001      	adds	r0, #1
 8006eec:	4770      	bx	lr
 8006eee:	2000      	movs	r0, #0
 8006ef0:	e7e8      	b.n	8006ec4 <__hi0bits+0xc>
 8006ef2:	2020      	movs	r0, #32
 8006ef4:	4770      	bx	lr

08006ef6 <__lo0bits>:
 8006ef6:	6803      	ldr	r3, [r0, #0]
 8006ef8:	f013 0207 	ands.w	r2, r3, #7
 8006efc:	4601      	mov	r1, r0
 8006efe:	d00b      	beq.n	8006f18 <__lo0bits+0x22>
 8006f00:	07da      	lsls	r2, r3, #31
 8006f02:	d423      	bmi.n	8006f4c <__lo0bits+0x56>
 8006f04:	0798      	lsls	r0, r3, #30
 8006f06:	bf49      	itett	mi
 8006f08:	085b      	lsrmi	r3, r3, #1
 8006f0a:	089b      	lsrpl	r3, r3, #2
 8006f0c:	2001      	movmi	r0, #1
 8006f0e:	600b      	strmi	r3, [r1, #0]
 8006f10:	bf5c      	itt	pl
 8006f12:	600b      	strpl	r3, [r1, #0]
 8006f14:	2002      	movpl	r0, #2
 8006f16:	4770      	bx	lr
 8006f18:	b298      	uxth	r0, r3
 8006f1a:	b9a8      	cbnz	r0, 8006f48 <__lo0bits+0x52>
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	2010      	movs	r0, #16
 8006f20:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f24:	bf04      	itt	eq
 8006f26:	0a1b      	lsreq	r3, r3, #8
 8006f28:	3008      	addeq	r0, #8
 8006f2a:	071a      	lsls	r2, r3, #28
 8006f2c:	bf04      	itt	eq
 8006f2e:	091b      	lsreq	r3, r3, #4
 8006f30:	3004      	addeq	r0, #4
 8006f32:	079a      	lsls	r2, r3, #30
 8006f34:	bf04      	itt	eq
 8006f36:	089b      	lsreq	r3, r3, #2
 8006f38:	3002      	addeq	r0, #2
 8006f3a:	07da      	lsls	r2, r3, #31
 8006f3c:	d402      	bmi.n	8006f44 <__lo0bits+0x4e>
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	d006      	beq.n	8006f50 <__lo0bits+0x5a>
 8006f42:	3001      	adds	r0, #1
 8006f44:	600b      	str	r3, [r1, #0]
 8006f46:	4770      	bx	lr
 8006f48:	4610      	mov	r0, r2
 8006f4a:	e7e9      	b.n	8006f20 <__lo0bits+0x2a>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	4770      	bx	lr
 8006f50:	2020      	movs	r0, #32
 8006f52:	4770      	bx	lr

08006f54 <__i2b>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	460c      	mov	r4, r1
 8006f58:	2101      	movs	r1, #1
 8006f5a:	f7ff ff27 	bl	8006dac <_Balloc>
 8006f5e:	2201      	movs	r2, #1
 8006f60:	6144      	str	r4, [r0, #20]
 8006f62:	6102      	str	r2, [r0, #16]
 8006f64:	bd10      	pop	{r4, pc}

08006f66 <__multiply>:
 8006f66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	4614      	mov	r4, r2
 8006f6c:	690a      	ldr	r2, [r1, #16]
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	bfb8      	it	lt
 8006f74:	460b      	movlt	r3, r1
 8006f76:	4688      	mov	r8, r1
 8006f78:	bfbc      	itt	lt
 8006f7a:	46a0      	movlt	r8, r4
 8006f7c:	461c      	movlt	r4, r3
 8006f7e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f82:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f8a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f8e:	eb07 0609 	add.w	r6, r7, r9
 8006f92:	42b3      	cmp	r3, r6
 8006f94:	bfb8      	it	lt
 8006f96:	3101      	addlt	r1, #1
 8006f98:	f7ff ff08 	bl	8006dac <_Balloc>
 8006f9c:	f100 0514 	add.w	r5, r0, #20
 8006fa0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006fa4:	462b      	mov	r3, r5
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4573      	cmp	r3, lr
 8006faa:	d316      	bcc.n	8006fda <__multiply+0x74>
 8006fac:	f104 0214 	add.w	r2, r4, #20
 8006fb0:	f108 0114 	add.w	r1, r8, #20
 8006fb4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006fb8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	9b00      	ldr	r3, [sp, #0]
 8006fc0:	9201      	str	r2, [sp, #4]
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d80c      	bhi.n	8006fe0 <__multiply+0x7a>
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	dd03      	ble.n	8006fd2 <__multiply+0x6c>
 8006fca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d05d      	beq.n	800708e <__multiply+0x128>
 8006fd2:	6106      	str	r6, [r0, #16]
 8006fd4:	b003      	add	sp, #12
 8006fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fda:	f843 2b04 	str.w	r2, [r3], #4
 8006fde:	e7e3      	b.n	8006fa8 <__multiply+0x42>
 8006fe0:	f8b2 b000 	ldrh.w	fp, [r2]
 8006fe4:	f1bb 0f00 	cmp.w	fp, #0
 8006fe8:	d023      	beq.n	8007032 <__multiply+0xcc>
 8006fea:	4689      	mov	r9, r1
 8006fec:	46ac      	mov	ip, r5
 8006fee:	f04f 0800 	mov.w	r8, #0
 8006ff2:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ff6:	f8dc a000 	ldr.w	sl, [ip]
 8006ffa:	b2a3      	uxth	r3, r4
 8006ffc:	fa1f fa8a 	uxth.w	sl, sl
 8007000:	fb0b a303 	mla	r3, fp, r3, sl
 8007004:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007008:	f8dc 4000 	ldr.w	r4, [ip]
 800700c:	4443      	add	r3, r8
 800700e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007012:	fb0b 840a 	mla	r4, fp, sl, r8
 8007016:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800701a:	46e2      	mov	sl, ip
 800701c:	b29b      	uxth	r3, r3
 800701e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007022:	454f      	cmp	r7, r9
 8007024:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007028:	f84a 3b04 	str.w	r3, [sl], #4
 800702c:	d82b      	bhi.n	8007086 <__multiply+0x120>
 800702e:	f8cc 8004 	str.w	r8, [ip, #4]
 8007032:	9b01      	ldr	r3, [sp, #4]
 8007034:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007038:	3204      	adds	r2, #4
 800703a:	f1ba 0f00 	cmp.w	sl, #0
 800703e:	d020      	beq.n	8007082 <__multiply+0x11c>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	4689      	mov	r9, r1
 8007044:	46a8      	mov	r8, r5
 8007046:	f04f 0b00 	mov.w	fp, #0
 800704a:	f8b9 c000 	ldrh.w	ip, [r9]
 800704e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007052:	fb0a 440c 	mla	r4, sl, ip, r4
 8007056:	445c      	add	r4, fp
 8007058:	46c4      	mov	ip, r8
 800705a:	b29b      	uxth	r3, r3
 800705c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007060:	f84c 3b04 	str.w	r3, [ip], #4
 8007064:	f859 3b04 	ldr.w	r3, [r9], #4
 8007068:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	fb0a b303 	mla	r3, sl, r3, fp
 8007072:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007076:	454f      	cmp	r7, r9
 8007078:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800707c:	d805      	bhi.n	800708a <__multiply+0x124>
 800707e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007082:	3504      	adds	r5, #4
 8007084:	e79b      	b.n	8006fbe <__multiply+0x58>
 8007086:	46d4      	mov	ip, sl
 8007088:	e7b3      	b.n	8006ff2 <__multiply+0x8c>
 800708a:	46e0      	mov	r8, ip
 800708c:	e7dd      	b.n	800704a <__multiply+0xe4>
 800708e:	3e01      	subs	r6, #1
 8007090:	e799      	b.n	8006fc6 <__multiply+0x60>
	...

08007094 <__pow5mult>:
 8007094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007098:	4615      	mov	r5, r2
 800709a:	f012 0203 	ands.w	r2, r2, #3
 800709e:	4606      	mov	r6, r0
 80070a0:	460f      	mov	r7, r1
 80070a2:	d007      	beq.n	80070b4 <__pow5mult+0x20>
 80070a4:	3a01      	subs	r2, #1
 80070a6:	4c21      	ldr	r4, [pc, #132]	; (800712c <__pow5mult+0x98>)
 80070a8:	2300      	movs	r3, #0
 80070aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070ae:	f7ff fec8 	bl	8006e42 <__multadd>
 80070b2:	4607      	mov	r7, r0
 80070b4:	10ad      	asrs	r5, r5, #2
 80070b6:	d035      	beq.n	8007124 <__pow5mult+0x90>
 80070b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070ba:	b93c      	cbnz	r4, 80070cc <__pow5mult+0x38>
 80070bc:	2010      	movs	r0, #16
 80070be:	f7ff fe6d 	bl	8006d9c <malloc>
 80070c2:	6270      	str	r0, [r6, #36]	; 0x24
 80070c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070c8:	6004      	str	r4, [r0, #0]
 80070ca:	60c4      	str	r4, [r0, #12]
 80070cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070d4:	b94c      	cbnz	r4, 80070ea <__pow5mult+0x56>
 80070d6:	f240 2171 	movw	r1, #625	; 0x271
 80070da:	4630      	mov	r0, r6
 80070dc:	f7ff ff3a 	bl	8006f54 <__i2b>
 80070e0:	2300      	movs	r3, #0
 80070e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80070e6:	4604      	mov	r4, r0
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	f04f 0800 	mov.w	r8, #0
 80070ee:	07eb      	lsls	r3, r5, #31
 80070f0:	d50a      	bpl.n	8007108 <__pow5mult+0x74>
 80070f2:	4639      	mov	r1, r7
 80070f4:	4622      	mov	r2, r4
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff ff35 	bl	8006f66 <__multiply>
 80070fc:	4639      	mov	r1, r7
 80070fe:	4681      	mov	r9, r0
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff fe87 	bl	8006e14 <_Bfree>
 8007106:	464f      	mov	r7, r9
 8007108:	106d      	asrs	r5, r5, #1
 800710a:	d00b      	beq.n	8007124 <__pow5mult+0x90>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	b938      	cbnz	r0, 8007120 <__pow5mult+0x8c>
 8007110:	4622      	mov	r2, r4
 8007112:	4621      	mov	r1, r4
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff ff26 	bl	8006f66 <__multiply>
 800711a:	6020      	str	r0, [r4, #0]
 800711c:	f8c0 8000 	str.w	r8, [r0]
 8007120:	4604      	mov	r4, r0
 8007122:	e7e4      	b.n	80070ee <__pow5mult+0x5a>
 8007124:	4638      	mov	r0, r7
 8007126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712a:	bf00      	nop
 800712c:	08007b28 	.word	0x08007b28

08007130 <__lshift>:
 8007130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	460c      	mov	r4, r1
 8007136:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	6849      	ldr	r1, [r1, #4]
 800713e:	eb0a 0903 	add.w	r9, sl, r3
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	4607      	mov	r7, r0
 8007146:	4616      	mov	r6, r2
 8007148:	f109 0501 	add.w	r5, r9, #1
 800714c:	42ab      	cmp	r3, r5
 800714e:	db32      	blt.n	80071b6 <__lshift+0x86>
 8007150:	4638      	mov	r0, r7
 8007152:	f7ff fe2b 	bl	8006dac <_Balloc>
 8007156:	2300      	movs	r3, #0
 8007158:	4680      	mov	r8, r0
 800715a:	f100 0114 	add.w	r1, r0, #20
 800715e:	461a      	mov	r2, r3
 8007160:	4553      	cmp	r3, sl
 8007162:	db2b      	blt.n	80071bc <__lshift+0x8c>
 8007164:	6920      	ldr	r0, [r4, #16]
 8007166:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800716a:	f104 0314 	add.w	r3, r4, #20
 800716e:	f016 021f 	ands.w	r2, r6, #31
 8007172:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007176:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800717a:	d025      	beq.n	80071c8 <__lshift+0x98>
 800717c:	f1c2 0e20 	rsb	lr, r2, #32
 8007180:	2000      	movs	r0, #0
 8007182:	681e      	ldr	r6, [r3, #0]
 8007184:	468a      	mov	sl, r1
 8007186:	4096      	lsls	r6, r2
 8007188:	4330      	orrs	r0, r6
 800718a:	f84a 0b04 	str.w	r0, [sl], #4
 800718e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007192:	459c      	cmp	ip, r3
 8007194:	fa20 f00e 	lsr.w	r0, r0, lr
 8007198:	d814      	bhi.n	80071c4 <__lshift+0x94>
 800719a:	6048      	str	r0, [r1, #4]
 800719c:	b108      	cbz	r0, 80071a2 <__lshift+0x72>
 800719e:	f109 0502 	add.w	r5, r9, #2
 80071a2:	3d01      	subs	r5, #1
 80071a4:	4638      	mov	r0, r7
 80071a6:	f8c8 5010 	str.w	r5, [r8, #16]
 80071aa:	4621      	mov	r1, r4
 80071ac:	f7ff fe32 	bl	8006e14 <_Bfree>
 80071b0:	4640      	mov	r0, r8
 80071b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b6:	3101      	adds	r1, #1
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	e7c7      	b.n	800714c <__lshift+0x1c>
 80071bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80071c0:	3301      	adds	r3, #1
 80071c2:	e7cd      	b.n	8007160 <__lshift+0x30>
 80071c4:	4651      	mov	r1, sl
 80071c6:	e7dc      	b.n	8007182 <__lshift+0x52>
 80071c8:	3904      	subs	r1, #4
 80071ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80071d2:	459c      	cmp	ip, r3
 80071d4:	d8f9      	bhi.n	80071ca <__lshift+0x9a>
 80071d6:	e7e4      	b.n	80071a2 <__lshift+0x72>

080071d8 <__mcmp>:
 80071d8:	6903      	ldr	r3, [r0, #16]
 80071da:	690a      	ldr	r2, [r1, #16]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	b530      	push	{r4, r5, lr}
 80071e0:	d10c      	bne.n	80071fc <__mcmp+0x24>
 80071e2:	0092      	lsls	r2, r2, #2
 80071e4:	3014      	adds	r0, #20
 80071e6:	3114      	adds	r1, #20
 80071e8:	1884      	adds	r4, r0, r2
 80071ea:	4411      	add	r1, r2
 80071ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071f4:	4295      	cmp	r5, r2
 80071f6:	d003      	beq.n	8007200 <__mcmp+0x28>
 80071f8:	d305      	bcc.n	8007206 <__mcmp+0x2e>
 80071fa:	2301      	movs	r3, #1
 80071fc:	4618      	mov	r0, r3
 80071fe:	bd30      	pop	{r4, r5, pc}
 8007200:	42a0      	cmp	r0, r4
 8007202:	d3f3      	bcc.n	80071ec <__mcmp+0x14>
 8007204:	e7fa      	b.n	80071fc <__mcmp+0x24>
 8007206:	f04f 33ff 	mov.w	r3, #4294967295
 800720a:	e7f7      	b.n	80071fc <__mcmp+0x24>

0800720c <__mdiff>:
 800720c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007210:	460d      	mov	r5, r1
 8007212:	4607      	mov	r7, r0
 8007214:	4611      	mov	r1, r2
 8007216:	4628      	mov	r0, r5
 8007218:	4614      	mov	r4, r2
 800721a:	f7ff ffdd 	bl	80071d8 <__mcmp>
 800721e:	1e06      	subs	r6, r0, #0
 8007220:	d108      	bne.n	8007234 <__mdiff+0x28>
 8007222:	4631      	mov	r1, r6
 8007224:	4638      	mov	r0, r7
 8007226:	f7ff fdc1 	bl	8006dac <_Balloc>
 800722a:	2301      	movs	r3, #1
 800722c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007234:	bfa4      	itt	ge
 8007236:	4623      	movge	r3, r4
 8007238:	462c      	movge	r4, r5
 800723a:	4638      	mov	r0, r7
 800723c:	6861      	ldr	r1, [r4, #4]
 800723e:	bfa6      	itte	ge
 8007240:	461d      	movge	r5, r3
 8007242:	2600      	movge	r6, #0
 8007244:	2601      	movlt	r6, #1
 8007246:	f7ff fdb1 	bl	8006dac <_Balloc>
 800724a:	692b      	ldr	r3, [r5, #16]
 800724c:	60c6      	str	r6, [r0, #12]
 800724e:	6926      	ldr	r6, [r4, #16]
 8007250:	f105 0914 	add.w	r9, r5, #20
 8007254:	f104 0214 	add.w	r2, r4, #20
 8007258:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800725c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007260:	f100 0514 	add.w	r5, r0, #20
 8007264:	f04f 0e00 	mov.w	lr, #0
 8007268:	f852 ab04 	ldr.w	sl, [r2], #4
 800726c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007270:	fa1e f18a 	uxtah	r1, lr, sl
 8007274:	b2a3      	uxth	r3, r4
 8007276:	1ac9      	subs	r1, r1, r3
 8007278:	0c23      	lsrs	r3, r4, #16
 800727a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800727e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007282:	b289      	uxth	r1, r1
 8007284:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007288:	45c8      	cmp	r8, r9
 800728a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800728e:	4694      	mov	ip, r2
 8007290:	f845 3b04 	str.w	r3, [r5], #4
 8007294:	d8e8      	bhi.n	8007268 <__mdiff+0x5c>
 8007296:	45bc      	cmp	ip, r7
 8007298:	d304      	bcc.n	80072a4 <__mdiff+0x98>
 800729a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800729e:	b183      	cbz	r3, 80072c2 <__mdiff+0xb6>
 80072a0:	6106      	str	r6, [r0, #16]
 80072a2:	e7c5      	b.n	8007230 <__mdiff+0x24>
 80072a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80072a8:	fa1e f381 	uxtah	r3, lr, r1
 80072ac:	141a      	asrs	r2, r3, #16
 80072ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072b8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80072bc:	f845 3b04 	str.w	r3, [r5], #4
 80072c0:	e7e9      	b.n	8007296 <__mdiff+0x8a>
 80072c2:	3e01      	subs	r6, #1
 80072c4:	e7e9      	b.n	800729a <__mdiff+0x8e>

080072c6 <__d2b>:
 80072c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072ca:	460e      	mov	r6, r1
 80072cc:	2101      	movs	r1, #1
 80072ce:	ec59 8b10 	vmov	r8, r9, d0
 80072d2:	4615      	mov	r5, r2
 80072d4:	f7ff fd6a 	bl	8006dac <_Balloc>
 80072d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072dc:	4607      	mov	r7, r0
 80072de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072e2:	bb34      	cbnz	r4, 8007332 <__d2b+0x6c>
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	f1b8 0300 	subs.w	r3, r8, #0
 80072ea:	d027      	beq.n	800733c <__d2b+0x76>
 80072ec:	a802      	add	r0, sp, #8
 80072ee:	f840 3d08 	str.w	r3, [r0, #-8]!
 80072f2:	f7ff fe00 	bl	8006ef6 <__lo0bits>
 80072f6:	9900      	ldr	r1, [sp, #0]
 80072f8:	b1f0      	cbz	r0, 8007338 <__d2b+0x72>
 80072fa:	9a01      	ldr	r2, [sp, #4]
 80072fc:	f1c0 0320 	rsb	r3, r0, #32
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	430b      	orrs	r3, r1
 8007306:	40c2      	lsrs	r2, r0
 8007308:	617b      	str	r3, [r7, #20]
 800730a:	9201      	str	r2, [sp, #4]
 800730c:	9b01      	ldr	r3, [sp, #4]
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	2b00      	cmp	r3, #0
 8007312:	bf14      	ite	ne
 8007314:	2102      	movne	r1, #2
 8007316:	2101      	moveq	r1, #1
 8007318:	6139      	str	r1, [r7, #16]
 800731a:	b1c4      	cbz	r4, 800734e <__d2b+0x88>
 800731c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007320:	4404      	add	r4, r0
 8007322:	6034      	str	r4, [r6, #0]
 8007324:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007328:	6028      	str	r0, [r5, #0]
 800732a:	4638      	mov	r0, r7
 800732c:	b003      	add	sp, #12
 800732e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007336:	e7d5      	b.n	80072e4 <__d2b+0x1e>
 8007338:	6179      	str	r1, [r7, #20]
 800733a:	e7e7      	b.n	800730c <__d2b+0x46>
 800733c:	a801      	add	r0, sp, #4
 800733e:	f7ff fdda 	bl	8006ef6 <__lo0bits>
 8007342:	9b01      	ldr	r3, [sp, #4]
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	2101      	movs	r1, #1
 8007348:	6139      	str	r1, [r7, #16]
 800734a:	3020      	adds	r0, #32
 800734c:	e7e5      	b.n	800731a <__d2b+0x54>
 800734e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007352:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007356:	6030      	str	r0, [r6, #0]
 8007358:	6918      	ldr	r0, [r3, #16]
 800735a:	f7ff fdad 	bl	8006eb8 <__hi0bits>
 800735e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007362:	e7e1      	b.n	8007328 <__d2b+0x62>

08007364 <_calloc_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	fb02 f401 	mul.w	r4, r2, r1
 800736a:	4621      	mov	r1, r4
 800736c:	f000 f856 	bl	800741c <_malloc_r>
 8007370:	4605      	mov	r5, r0
 8007372:	b118      	cbz	r0, 800737c <_calloc_r+0x18>
 8007374:	4622      	mov	r2, r4
 8007376:	2100      	movs	r1, #0
 8007378:	f7fe fa39 	bl	80057ee <memset>
 800737c:	4628      	mov	r0, r5
 800737e:	bd38      	pop	{r3, r4, r5, pc}

08007380 <_free_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4605      	mov	r5, r0
 8007384:	2900      	cmp	r1, #0
 8007386:	d045      	beq.n	8007414 <_free_r+0x94>
 8007388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800738c:	1f0c      	subs	r4, r1, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfb8      	it	lt
 8007392:	18e4      	addlt	r4, r4, r3
 8007394:	f000 fa29 	bl	80077ea <__malloc_lock>
 8007398:	4a1f      	ldr	r2, [pc, #124]	; (8007418 <_free_r+0x98>)
 800739a:	6813      	ldr	r3, [r2, #0]
 800739c:	4610      	mov	r0, r2
 800739e:	b933      	cbnz	r3, 80073ae <_free_r+0x2e>
 80073a0:	6063      	str	r3, [r4, #4]
 80073a2:	6014      	str	r4, [r2, #0]
 80073a4:	4628      	mov	r0, r5
 80073a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073aa:	f000 ba1f 	b.w	80077ec <__malloc_unlock>
 80073ae:	42a3      	cmp	r3, r4
 80073b0:	d90c      	bls.n	80073cc <_free_r+0x4c>
 80073b2:	6821      	ldr	r1, [r4, #0]
 80073b4:	1862      	adds	r2, r4, r1
 80073b6:	4293      	cmp	r3, r2
 80073b8:	bf04      	itt	eq
 80073ba:	681a      	ldreq	r2, [r3, #0]
 80073bc:	685b      	ldreq	r3, [r3, #4]
 80073be:	6063      	str	r3, [r4, #4]
 80073c0:	bf04      	itt	eq
 80073c2:	1852      	addeq	r2, r2, r1
 80073c4:	6022      	streq	r2, [r4, #0]
 80073c6:	6004      	str	r4, [r0, #0]
 80073c8:	e7ec      	b.n	80073a4 <_free_r+0x24>
 80073ca:	4613      	mov	r3, r2
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	b10a      	cbz	r2, 80073d4 <_free_r+0x54>
 80073d0:	42a2      	cmp	r2, r4
 80073d2:	d9fa      	bls.n	80073ca <_free_r+0x4a>
 80073d4:	6819      	ldr	r1, [r3, #0]
 80073d6:	1858      	adds	r0, r3, r1
 80073d8:	42a0      	cmp	r0, r4
 80073da:	d10b      	bne.n	80073f4 <_free_r+0x74>
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	4401      	add	r1, r0
 80073e0:	1858      	adds	r0, r3, r1
 80073e2:	4282      	cmp	r2, r0
 80073e4:	6019      	str	r1, [r3, #0]
 80073e6:	d1dd      	bne.n	80073a4 <_free_r+0x24>
 80073e8:	6810      	ldr	r0, [r2, #0]
 80073ea:	6852      	ldr	r2, [r2, #4]
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	4401      	add	r1, r0
 80073f0:	6019      	str	r1, [r3, #0]
 80073f2:	e7d7      	b.n	80073a4 <_free_r+0x24>
 80073f4:	d902      	bls.n	80073fc <_free_r+0x7c>
 80073f6:	230c      	movs	r3, #12
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	e7d3      	b.n	80073a4 <_free_r+0x24>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	1821      	adds	r1, r4, r0
 8007400:	428a      	cmp	r2, r1
 8007402:	bf04      	itt	eq
 8007404:	6811      	ldreq	r1, [r2, #0]
 8007406:	6852      	ldreq	r2, [r2, #4]
 8007408:	6062      	str	r2, [r4, #4]
 800740a:	bf04      	itt	eq
 800740c:	1809      	addeq	r1, r1, r0
 800740e:	6021      	streq	r1, [r4, #0]
 8007410:	605c      	str	r4, [r3, #4]
 8007412:	e7c7      	b.n	80073a4 <_free_r+0x24>
 8007414:	bd38      	pop	{r3, r4, r5, pc}
 8007416:	bf00      	nop
 8007418:	20000208 	.word	0x20000208

0800741c <_malloc_r>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	1ccd      	adds	r5, r1, #3
 8007420:	f025 0503 	bic.w	r5, r5, #3
 8007424:	3508      	adds	r5, #8
 8007426:	2d0c      	cmp	r5, #12
 8007428:	bf38      	it	cc
 800742a:	250c      	movcc	r5, #12
 800742c:	2d00      	cmp	r5, #0
 800742e:	4606      	mov	r6, r0
 8007430:	db01      	blt.n	8007436 <_malloc_r+0x1a>
 8007432:	42a9      	cmp	r1, r5
 8007434:	d903      	bls.n	800743e <_malloc_r+0x22>
 8007436:	230c      	movs	r3, #12
 8007438:	6033      	str	r3, [r6, #0]
 800743a:	2000      	movs	r0, #0
 800743c:	bd70      	pop	{r4, r5, r6, pc}
 800743e:	f000 f9d4 	bl	80077ea <__malloc_lock>
 8007442:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <_malloc_r+0xac>)
 8007444:	6814      	ldr	r4, [r2, #0]
 8007446:	4621      	mov	r1, r4
 8007448:	b991      	cbnz	r1, 8007470 <_malloc_r+0x54>
 800744a:	4c20      	ldr	r4, [pc, #128]	; (80074cc <_malloc_r+0xb0>)
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	b91b      	cbnz	r3, 8007458 <_malloc_r+0x3c>
 8007450:	4630      	mov	r0, r6
 8007452:	f000 f98f 	bl	8007774 <_sbrk_r>
 8007456:	6020      	str	r0, [r4, #0]
 8007458:	4629      	mov	r1, r5
 800745a:	4630      	mov	r0, r6
 800745c:	f000 f98a 	bl	8007774 <_sbrk_r>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d124      	bne.n	80074ae <_malloc_r+0x92>
 8007464:	230c      	movs	r3, #12
 8007466:	6033      	str	r3, [r6, #0]
 8007468:	4630      	mov	r0, r6
 800746a:	f000 f9bf 	bl	80077ec <__malloc_unlock>
 800746e:	e7e4      	b.n	800743a <_malloc_r+0x1e>
 8007470:	680b      	ldr	r3, [r1, #0]
 8007472:	1b5b      	subs	r3, r3, r5
 8007474:	d418      	bmi.n	80074a8 <_malloc_r+0x8c>
 8007476:	2b0b      	cmp	r3, #11
 8007478:	d90f      	bls.n	800749a <_malloc_r+0x7e>
 800747a:	600b      	str	r3, [r1, #0]
 800747c:	50cd      	str	r5, [r1, r3]
 800747e:	18cc      	adds	r4, r1, r3
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f9b3 	bl	80077ec <__malloc_unlock>
 8007486:	f104 000b 	add.w	r0, r4, #11
 800748a:	1d23      	adds	r3, r4, #4
 800748c:	f020 0007 	bic.w	r0, r0, #7
 8007490:	1ac3      	subs	r3, r0, r3
 8007492:	d0d3      	beq.n	800743c <_malloc_r+0x20>
 8007494:	425a      	negs	r2, r3
 8007496:	50e2      	str	r2, [r4, r3]
 8007498:	e7d0      	b.n	800743c <_malloc_r+0x20>
 800749a:	428c      	cmp	r4, r1
 800749c:	684b      	ldr	r3, [r1, #4]
 800749e:	bf16      	itet	ne
 80074a0:	6063      	strne	r3, [r4, #4]
 80074a2:	6013      	streq	r3, [r2, #0]
 80074a4:	460c      	movne	r4, r1
 80074a6:	e7eb      	b.n	8007480 <_malloc_r+0x64>
 80074a8:	460c      	mov	r4, r1
 80074aa:	6849      	ldr	r1, [r1, #4]
 80074ac:	e7cc      	b.n	8007448 <_malloc_r+0x2c>
 80074ae:	1cc4      	adds	r4, r0, #3
 80074b0:	f024 0403 	bic.w	r4, r4, #3
 80074b4:	42a0      	cmp	r0, r4
 80074b6:	d005      	beq.n	80074c4 <_malloc_r+0xa8>
 80074b8:	1a21      	subs	r1, r4, r0
 80074ba:	4630      	mov	r0, r6
 80074bc:	f000 f95a 	bl	8007774 <_sbrk_r>
 80074c0:	3001      	adds	r0, #1
 80074c2:	d0cf      	beq.n	8007464 <_malloc_r+0x48>
 80074c4:	6025      	str	r5, [r4, #0]
 80074c6:	e7db      	b.n	8007480 <_malloc_r+0x64>
 80074c8:	20000208 	.word	0x20000208
 80074cc:	2000020c 	.word	0x2000020c

080074d0 <__ssputs_r>:
 80074d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d4:	688e      	ldr	r6, [r1, #8]
 80074d6:	429e      	cmp	r6, r3
 80074d8:	4682      	mov	sl, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	4690      	mov	r8, r2
 80074de:	4699      	mov	r9, r3
 80074e0:	d837      	bhi.n	8007552 <__ssputs_r+0x82>
 80074e2:	898a      	ldrh	r2, [r1, #12]
 80074e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074e8:	d031      	beq.n	800754e <__ssputs_r+0x7e>
 80074ea:	6825      	ldr	r5, [r4, #0]
 80074ec:	6909      	ldr	r1, [r1, #16]
 80074ee:	1a6f      	subs	r7, r5, r1
 80074f0:	6965      	ldr	r5, [r4, #20]
 80074f2:	2302      	movs	r3, #2
 80074f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80074fc:	f109 0301 	add.w	r3, r9, #1
 8007500:	443b      	add	r3, r7
 8007502:	429d      	cmp	r5, r3
 8007504:	bf38      	it	cc
 8007506:	461d      	movcc	r5, r3
 8007508:	0553      	lsls	r3, r2, #21
 800750a:	d530      	bpl.n	800756e <__ssputs_r+0x9e>
 800750c:	4629      	mov	r1, r5
 800750e:	f7ff ff85 	bl	800741c <_malloc_r>
 8007512:	4606      	mov	r6, r0
 8007514:	b950      	cbnz	r0, 800752c <__ssputs_r+0x5c>
 8007516:	230c      	movs	r3, #12
 8007518:	f8ca 3000 	str.w	r3, [sl]
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007522:	81a3      	strh	r3, [r4, #12]
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752c:	463a      	mov	r2, r7
 800752e:	6921      	ldr	r1, [r4, #16]
 8007530:	f7fe f952 	bl	80057d8 <memcpy>
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800753a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	6126      	str	r6, [r4, #16]
 8007542:	6165      	str	r5, [r4, #20]
 8007544:	443e      	add	r6, r7
 8007546:	1bed      	subs	r5, r5, r7
 8007548:	6026      	str	r6, [r4, #0]
 800754a:	60a5      	str	r5, [r4, #8]
 800754c:	464e      	mov	r6, r9
 800754e:	454e      	cmp	r6, r9
 8007550:	d900      	bls.n	8007554 <__ssputs_r+0x84>
 8007552:	464e      	mov	r6, r9
 8007554:	4632      	mov	r2, r6
 8007556:	4641      	mov	r1, r8
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	f000 f92d 	bl	80077b8 <memmove>
 800755e:	68a3      	ldr	r3, [r4, #8]
 8007560:	1b9b      	subs	r3, r3, r6
 8007562:	60a3      	str	r3, [r4, #8]
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	441e      	add	r6, r3
 8007568:	6026      	str	r6, [r4, #0]
 800756a:	2000      	movs	r0, #0
 800756c:	e7dc      	b.n	8007528 <__ssputs_r+0x58>
 800756e:	462a      	mov	r2, r5
 8007570:	f000 f93d 	bl	80077ee <_realloc_r>
 8007574:	4606      	mov	r6, r0
 8007576:	2800      	cmp	r0, #0
 8007578:	d1e2      	bne.n	8007540 <__ssputs_r+0x70>
 800757a:	6921      	ldr	r1, [r4, #16]
 800757c:	4650      	mov	r0, sl
 800757e:	f7ff feff 	bl	8007380 <_free_r>
 8007582:	e7c8      	b.n	8007516 <__ssputs_r+0x46>

08007584 <_svfiprintf_r>:
 8007584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007588:	461d      	mov	r5, r3
 800758a:	898b      	ldrh	r3, [r1, #12]
 800758c:	061f      	lsls	r7, r3, #24
 800758e:	b09d      	sub	sp, #116	; 0x74
 8007590:	4680      	mov	r8, r0
 8007592:	460c      	mov	r4, r1
 8007594:	4616      	mov	r6, r2
 8007596:	d50f      	bpl.n	80075b8 <_svfiprintf_r+0x34>
 8007598:	690b      	ldr	r3, [r1, #16]
 800759a:	b96b      	cbnz	r3, 80075b8 <_svfiprintf_r+0x34>
 800759c:	2140      	movs	r1, #64	; 0x40
 800759e:	f7ff ff3d 	bl	800741c <_malloc_r>
 80075a2:	6020      	str	r0, [r4, #0]
 80075a4:	6120      	str	r0, [r4, #16]
 80075a6:	b928      	cbnz	r0, 80075b4 <_svfiprintf_r+0x30>
 80075a8:	230c      	movs	r3, #12
 80075aa:	f8c8 3000 	str.w	r3, [r8]
 80075ae:	f04f 30ff 	mov.w	r0, #4294967295
 80075b2:	e0c8      	b.n	8007746 <_svfiprintf_r+0x1c2>
 80075b4:	2340      	movs	r3, #64	; 0x40
 80075b6:	6163      	str	r3, [r4, #20]
 80075b8:	2300      	movs	r3, #0
 80075ba:	9309      	str	r3, [sp, #36]	; 0x24
 80075bc:	2320      	movs	r3, #32
 80075be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075c2:	2330      	movs	r3, #48	; 0x30
 80075c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075c8:	9503      	str	r5, [sp, #12]
 80075ca:	f04f 0b01 	mov.w	fp, #1
 80075ce:	4637      	mov	r7, r6
 80075d0:	463d      	mov	r5, r7
 80075d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075d6:	b10b      	cbz	r3, 80075dc <_svfiprintf_r+0x58>
 80075d8:	2b25      	cmp	r3, #37	; 0x25
 80075da:	d13e      	bne.n	800765a <_svfiprintf_r+0xd6>
 80075dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80075e0:	d00b      	beq.n	80075fa <_svfiprintf_r+0x76>
 80075e2:	4653      	mov	r3, sl
 80075e4:	4632      	mov	r2, r6
 80075e6:	4621      	mov	r1, r4
 80075e8:	4640      	mov	r0, r8
 80075ea:	f7ff ff71 	bl	80074d0 <__ssputs_r>
 80075ee:	3001      	adds	r0, #1
 80075f0:	f000 80a4 	beq.w	800773c <_svfiprintf_r+0x1b8>
 80075f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f6:	4453      	add	r3, sl
 80075f8:	9309      	str	r3, [sp, #36]	; 0x24
 80075fa:	783b      	ldrb	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 809d 	beq.w	800773c <_svfiprintf_r+0x1b8>
 8007602:	2300      	movs	r3, #0
 8007604:	f04f 32ff 	mov.w	r2, #4294967295
 8007608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800760c:	9304      	str	r3, [sp, #16]
 800760e:	9307      	str	r3, [sp, #28]
 8007610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007614:	931a      	str	r3, [sp, #104]	; 0x68
 8007616:	462f      	mov	r7, r5
 8007618:	2205      	movs	r2, #5
 800761a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800761e:	4850      	ldr	r0, [pc, #320]	; (8007760 <_svfiprintf_r+0x1dc>)
 8007620:	f7f8 fdb6 	bl	8000190 <memchr>
 8007624:	9b04      	ldr	r3, [sp, #16]
 8007626:	b9d0      	cbnz	r0, 800765e <_svfiprintf_r+0xda>
 8007628:	06d9      	lsls	r1, r3, #27
 800762a:	bf44      	itt	mi
 800762c:	2220      	movmi	r2, #32
 800762e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007632:	071a      	lsls	r2, r3, #28
 8007634:	bf44      	itt	mi
 8007636:	222b      	movmi	r2, #43	; 0x2b
 8007638:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800763c:	782a      	ldrb	r2, [r5, #0]
 800763e:	2a2a      	cmp	r2, #42	; 0x2a
 8007640:	d015      	beq.n	800766e <_svfiprintf_r+0xea>
 8007642:	9a07      	ldr	r2, [sp, #28]
 8007644:	462f      	mov	r7, r5
 8007646:	2000      	movs	r0, #0
 8007648:	250a      	movs	r5, #10
 800764a:	4639      	mov	r1, r7
 800764c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007650:	3b30      	subs	r3, #48	; 0x30
 8007652:	2b09      	cmp	r3, #9
 8007654:	d94d      	bls.n	80076f2 <_svfiprintf_r+0x16e>
 8007656:	b1b8      	cbz	r0, 8007688 <_svfiprintf_r+0x104>
 8007658:	e00f      	b.n	800767a <_svfiprintf_r+0xf6>
 800765a:	462f      	mov	r7, r5
 800765c:	e7b8      	b.n	80075d0 <_svfiprintf_r+0x4c>
 800765e:	4a40      	ldr	r2, [pc, #256]	; (8007760 <_svfiprintf_r+0x1dc>)
 8007660:	1a80      	subs	r0, r0, r2
 8007662:	fa0b f000 	lsl.w	r0, fp, r0
 8007666:	4318      	orrs	r0, r3
 8007668:	9004      	str	r0, [sp, #16]
 800766a:	463d      	mov	r5, r7
 800766c:	e7d3      	b.n	8007616 <_svfiprintf_r+0x92>
 800766e:	9a03      	ldr	r2, [sp, #12]
 8007670:	1d11      	adds	r1, r2, #4
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	9103      	str	r1, [sp, #12]
 8007676:	2a00      	cmp	r2, #0
 8007678:	db01      	blt.n	800767e <_svfiprintf_r+0xfa>
 800767a:	9207      	str	r2, [sp, #28]
 800767c:	e004      	b.n	8007688 <_svfiprintf_r+0x104>
 800767e:	4252      	negs	r2, r2
 8007680:	f043 0302 	orr.w	r3, r3, #2
 8007684:	9207      	str	r2, [sp, #28]
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	783b      	ldrb	r3, [r7, #0]
 800768a:	2b2e      	cmp	r3, #46	; 0x2e
 800768c:	d10c      	bne.n	80076a8 <_svfiprintf_r+0x124>
 800768e:	787b      	ldrb	r3, [r7, #1]
 8007690:	2b2a      	cmp	r3, #42	; 0x2a
 8007692:	d133      	bne.n	80076fc <_svfiprintf_r+0x178>
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	9203      	str	r2, [sp, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	bfb8      	it	lt
 80076a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80076a4:	3702      	adds	r7, #2
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	4d2e      	ldr	r5, [pc, #184]	; (8007764 <_svfiprintf_r+0x1e0>)
 80076aa:	7839      	ldrb	r1, [r7, #0]
 80076ac:	2203      	movs	r2, #3
 80076ae:	4628      	mov	r0, r5
 80076b0:	f7f8 fd6e 	bl	8000190 <memchr>
 80076b4:	b138      	cbz	r0, 80076c6 <_svfiprintf_r+0x142>
 80076b6:	2340      	movs	r3, #64	; 0x40
 80076b8:	1b40      	subs	r0, r0, r5
 80076ba:	fa03 f000 	lsl.w	r0, r3, r0
 80076be:	9b04      	ldr	r3, [sp, #16]
 80076c0:	4303      	orrs	r3, r0
 80076c2:	3701      	adds	r7, #1
 80076c4:	9304      	str	r3, [sp, #16]
 80076c6:	7839      	ldrb	r1, [r7, #0]
 80076c8:	4827      	ldr	r0, [pc, #156]	; (8007768 <_svfiprintf_r+0x1e4>)
 80076ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ce:	2206      	movs	r2, #6
 80076d0:	1c7e      	adds	r6, r7, #1
 80076d2:	f7f8 fd5d 	bl	8000190 <memchr>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d038      	beq.n	800774c <_svfiprintf_r+0x1c8>
 80076da:	4b24      	ldr	r3, [pc, #144]	; (800776c <_svfiprintf_r+0x1e8>)
 80076dc:	bb13      	cbnz	r3, 8007724 <_svfiprintf_r+0x1a0>
 80076de:	9b03      	ldr	r3, [sp, #12]
 80076e0:	3307      	adds	r3, #7
 80076e2:	f023 0307 	bic.w	r3, r3, #7
 80076e6:	3308      	adds	r3, #8
 80076e8:	9303      	str	r3, [sp, #12]
 80076ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ec:	444b      	add	r3, r9
 80076ee:	9309      	str	r3, [sp, #36]	; 0x24
 80076f0:	e76d      	b.n	80075ce <_svfiprintf_r+0x4a>
 80076f2:	fb05 3202 	mla	r2, r5, r2, r3
 80076f6:	2001      	movs	r0, #1
 80076f8:	460f      	mov	r7, r1
 80076fa:	e7a6      	b.n	800764a <_svfiprintf_r+0xc6>
 80076fc:	2300      	movs	r3, #0
 80076fe:	3701      	adds	r7, #1
 8007700:	9305      	str	r3, [sp, #20]
 8007702:	4619      	mov	r1, r3
 8007704:	250a      	movs	r5, #10
 8007706:	4638      	mov	r0, r7
 8007708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800770c:	3a30      	subs	r2, #48	; 0x30
 800770e:	2a09      	cmp	r2, #9
 8007710:	d903      	bls.n	800771a <_svfiprintf_r+0x196>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0c8      	beq.n	80076a8 <_svfiprintf_r+0x124>
 8007716:	9105      	str	r1, [sp, #20]
 8007718:	e7c6      	b.n	80076a8 <_svfiprintf_r+0x124>
 800771a:	fb05 2101 	mla	r1, r5, r1, r2
 800771e:	2301      	movs	r3, #1
 8007720:	4607      	mov	r7, r0
 8007722:	e7f0      	b.n	8007706 <_svfiprintf_r+0x182>
 8007724:	ab03      	add	r3, sp, #12
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	4622      	mov	r2, r4
 800772a:	4b11      	ldr	r3, [pc, #68]	; (8007770 <_svfiprintf_r+0x1ec>)
 800772c:	a904      	add	r1, sp, #16
 800772e:	4640      	mov	r0, r8
 8007730:	f7fe f8fa 	bl	8005928 <_printf_float>
 8007734:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007738:	4681      	mov	r9, r0
 800773a:	d1d6      	bne.n	80076ea <_svfiprintf_r+0x166>
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	065b      	lsls	r3, r3, #25
 8007740:	f53f af35 	bmi.w	80075ae <_svfiprintf_r+0x2a>
 8007744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007746:	b01d      	add	sp, #116	; 0x74
 8007748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774c:	ab03      	add	r3, sp, #12
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	4622      	mov	r2, r4
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <_svfiprintf_r+0x1ec>)
 8007754:	a904      	add	r1, sp, #16
 8007756:	4640      	mov	r0, r8
 8007758:	f7fe fb9c 	bl	8005e94 <_printf_i>
 800775c:	e7ea      	b.n	8007734 <_svfiprintf_r+0x1b0>
 800775e:	bf00      	nop
 8007760:	08007b34 	.word	0x08007b34
 8007764:	08007b3a 	.word	0x08007b3a
 8007768:	08007b3e 	.word	0x08007b3e
 800776c:	08005929 	.word	0x08005929
 8007770:	080074d1 	.word	0x080074d1

08007774 <_sbrk_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4c06      	ldr	r4, [pc, #24]	; (8007790 <_sbrk_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4605      	mov	r5, r0
 800777c:	4608      	mov	r0, r1
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	f7fa f85e 	bl	8001840 <_sbrk>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_sbrk_r+0x1a>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	b103      	cbz	r3, 800778e <_sbrk_r+0x1a>
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	20000584 	.word	0x20000584

08007794 <__ascii_mbtowc>:
 8007794:	b082      	sub	sp, #8
 8007796:	b901      	cbnz	r1, 800779a <__ascii_mbtowc+0x6>
 8007798:	a901      	add	r1, sp, #4
 800779a:	b142      	cbz	r2, 80077ae <__ascii_mbtowc+0x1a>
 800779c:	b14b      	cbz	r3, 80077b2 <__ascii_mbtowc+0x1e>
 800779e:	7813      	ldrb	r3, [r2, #0]
 80077a0:	600b      	str	r3, [r1, #0]
 80077a2:	7812      	ldrb	r2, [r2, #0]
 80077a4:	1c10      	adds	r0, r2, #0
 80077a6:	bf18      	it	ne
 80077a8:	2001      	movne	r0, #1
 80077aa:	b002      	add	sp, #8
 80077ac:	4770      	bx	lr
 80077ae:	4610      	mov	r0, r2
 80077b0:	e7fb      	b.n	80077aa <__ascii_mbtowc+0x16>
 80077b2:	f06f 0001 	mvn.w	r0, #1
 80077b6:	e7f8      	b.n	80077aa <__ascii_mbtowc+0x16>

080077b8 <memmove>:
 80077b8:	4288      	cmp	r0, r1
 80077ba:	b510      	push	{r4, lr}
 80077bc:	eb01 0302 	add.w	r3, r1, r2
 80077c0:	d807      	bhi.n	80077d2 <memmove+0x1a>
 80077c2:	1e42      	subs	r2, r0, #1
 80077c4:	4299      	cmp	r1, r3
 80077c6:	d00a      	beq.n	80077de <memmove+0x26>
 80077c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80077d0:	e7f8      	b.n	80077c4 <memmove+0xc>
 80077d2:	4283      	cmp	r3, r0
 80077d4:	d9f5      	bls.n	80077c2 <memmove+0xa>
 80077d6:	1881      	adds	r1, r0, r2
 80077d8:	1ad2      	subs	r2, r2, r3
 80077da:	42d3      	cmn	r3, r2
 80077dc:	d100      	bne.n	80077e0 <memmove+0x28>
 80077de:	bd10      	pop	{r4, pc}
 80077e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80077e8:	e7f7      	b.n	80077da <memmove+0x22>

080077ea <__malloc_lock>:
 80077ea:	4770      	bx	lr

080077ec <__malloc_unlock>:
 80077ec:	4770      	bx	lr

080077ee <_realloc_r>:
 80077ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f0:	4607      	mov	r7, r0
 80077f2:	4614      	mov	r4, r2
 80077f4:	460e      	mov	r6, r1
 80077f6:	b921      	cbnz	r1, 8007802 <_realloc_r+0x14>
 80077f8:	4611      	mov	r1, r2
 80077fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077fe:	f7ff be0d 	b.w	800741c <_malloc_r>
 8007802:	b922      	cbnz	r2, 800780e <_realloc_r+0x20>
 8007804:	f7ff fdbc 	bl	8007380 <_free_r>
 8007808:	4625      	mov	r5, r4
 800780a:	4628      	mov	r0, r5
 800780c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780e:	f000 f821 	bl	8007854 <_malloc_usable_size_r>
 8007812:	42a0      	cmp	r0, r4
 8007814:	d20f      	bcs.n	8007836 <_realloc_r+0x48>
 8007816:	4621      	mov	r1, r4
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff fdff 	bl	800741c <_malloc_r>
 800781e:	4605      	mov	r5, r0
 8007820:	2800      	cmp	r0, #0
 8007822:	d0f2      	beq.n	800780a <_realloc_r+0x1c>
 8007824:	4631      	mov	r1, r6
 8007826:	4622      	mov	r2, r4
 8007828:	f7fd ffd6 	bl	80057d8 <memcpy>
 800782c:	4631      	mov	r1, r6
 800782e:	4638      	mov	r0, r7
 8007830:	f7ff fda6 	bl	8007380 <_free_r>
 8007834:	e7e9      	b.n	800780a <_realloc_r+0x1c>
 8007836:	4635      	mov	r5, r6
 8007838:	e7e7      	b.n	800780a <_realloc_r+0x1c>

0800783a <__ascii_wctomb>:
 800783a:	b149      	cbz	r1, 8007850 <__ascii_wctomb+0x16>
 800783c:	2aff      	cmp	r2, #255	; 0xff
 800783e:	bf85      	ittet	hi
 8007840:	238a      	movhi	r3, #138	; 0x8a
 8007842:	6003      	strhi	r3, [r0, #0]
 8007844:	700a      	strbls	r2, [r1, #0]
 8007846:	f04f 30ff 	movhi.w	r0, #4294967295
 800784a:	bf98      	it	ls
 800784c:	2001      	movls	r0, #1
 800784e:	4770      	bx	lr
 8007850:	4608      	mov	r0, r1
 8007852:	4770      	bx	lr

08007854 <_malloc_usable_size_r>:
 8007854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007858:	1f18      	subs	r0, r3, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	bfbc      	itt	lt
 800785e:	580b      	ldrlt	r3, [r1, r0]
 8007860:	18c0      	addlt	r0, r0, r3
 8007862:	4770      	bx	lr

08007864 <_init>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr

08007870 <_fini>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr
